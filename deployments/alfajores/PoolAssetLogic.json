{
  "address": "0xDF94f028ac0587496F5E047c6231Ae8286Cf4c96",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "CollectERC20Asset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedAssetsValue",
          "type": "uint256"
        }
      ],
      "name": "CollectNFTAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toPoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ExportNFTAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "daysPastDue",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "advanceRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "penaltyRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "interestRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "probabilityOfDefault",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lossGivenDefault",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "writeOffAfterGracePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "gracePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "collectionPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "writeOffAfterCollectionPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "discountRate",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.RiskScore[]",
          "name": "riskscores",
          "type": "tuple[]"
        }
      ],
      "name": "SetRiskScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdateOpeningBlockTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawERC20Asset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "WithdrawNFTAsset",
      "type": "event"
    }
  ],
  "transactionHash": "0x390034c8f4b18c24c632c17e9860764b46584380ce5f4102b8c439243c64e18d",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xDF94f028ac0587496F5E047c6231Ae8286Cf4c96",
    "transactionIndex": 0,
    "gasUsed": "1542287",
    "logsBloom": "0x
    "blockHash": "0xced186fb802778a726415baee267fbe72474c2c25172581d1779f27f2a363165",
    "transactionHash": "0x390034c8f4b18c24c632c17e9860764b46584380ce5f4102b8c439243c64e18d",
    "logs": [],
    "blockNumber": 24557060,
    "cumulativeGasUsed": "1542287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "430c0a92c5fceeb5bb1419cc8438605e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"CollectERC20Asset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAssetsValue\",\"type\":\"uint256\"}],\"name\":\"CollectNFTAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ExportNFTAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daysPastDue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"advanceRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interestRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"probabilityOfDefault\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lossGivenDefault\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"writeOffAfterGracePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gracePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"collectionPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"writeOffAfterCollectionPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"discountRate\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.RiskScore[]\",\"name\":\"riskscores\",\"type\":\"tuple[]\"}],\"name\":\"SetRiskScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateOpeningBlockTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawERC20Asset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"WithdrawNFTAsset\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Untangled's SecuritizationPoolAsset contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides pool's asset related functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/PoolAssetLogic.sol\":\"PoolAssetLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb66b2285eab5f7766c538c326c1a0e86013487b1636177d595d1ce543fec43a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\\n    Initializable, ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721PausableUpgradeable\\n{\\n    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    function __ERC721PresetMinterPauserAutoId_init(string memory name, string memory symbol, string memory baseTokenURI) internal onlyInitializing {\\n        __ERC721_init_unchained(name, symbol);\\n        __Pausable_init_unchained();\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory, string memory, string memory baseTokenURI) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xa0045ea98f9c5c3b1656be3f78ce3e1adf2c046bf1ce6a8ae9062b411f117536\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\r\\nimport '../libraries/Configuration.sol';\\r\\nimport {OWNER_ROLE, ORIGINATOR_ROLE, VALIDATOR_ROLE, POOL_ADMIN_ROLE} from '../libraries/DataTypes.sol';\\r\\n/**\\r\\n * @title Untangled's SecuritizationPool contract\\r\\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\\r\\n *  It provides functionalities for contract initialization, pausing, and access control.\\r\\n * @author Untangled Team\\r\\n */\\r\\nabstract contract UntangledBase is\\r\\n    Initializable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    AccessControlEnumerableUpgradeable\\r\\n{\\r\\n    function isAdmin() public view virtual returns (bool) {\\r\\n        return hasRole(OWNER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\r\\n        __Pausable_init_unchained();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __UntangledBase__init_unchained(owner);\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\r\\n        if (owner == address(0)) owner = _msgSender();\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _setupRole(OWNER_ROLE, owner);\\r\\n\\r\\n        _setRoleAdmin(ORIGINATOR_ROLE, OWNER_ROLE);\\r\\n        _setRoleAdmin(VALIDATOR_ROLE, POOL_ADMIN_ROLE);\\r\\n    }\\r\\n\\r\\n    function getInitializedVersion() public view virtual returns (uint256) {\\r\\n        return _getInitializedVersion();\\r\\n    }\\r\\n\\r\\n    function pause() public virtual onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public virtual onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _setRoleAdmin(role, adminRole);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xa828fd73d4873b4b5b2b556aa6d3068096cea75ce08b805e780a535c59a004cb\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IMintedNormalTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Registry} from '../storage/Registry.sol';\\r\\n\\r\\ninterface IMintedNormalTGE {\\r\\n    event SetHasStarted(bool hasStarted);\\r\\n    event UpdateMinBidAmount(uint256 minBidAmount);\\r\\n    event UpdateTotalCap(uint256 totalCap);\\r\\n    event UpdateInitialAmount(uint256 initialAmount);\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\r\\n\\r\\n    enum SaleType {\\r\\n        NORMAL_SALE\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        Registry _registry,\\r\\n        address _pool,\\r\\n        address _token,\\r\\n        address _currency,\\r\\n        uint256 _openingTime\\r\\n    ) external;\\r\\n\\r\\n    ///@notice investor bids for SOT/JOT token. Paid by pool's currency\\r\\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function initialAmount() external view returns (uint256);\\r\\n\\r\\n    function currencyRaisedByInvestor(address _investor) external view returns (uint256);\\r\\n\\r\\n    function currencyRaised() external view returns (uint256);\\r\\n\\r\\n    function firstNoteTokenMintedTimestamp() external view returns (uint256);\\r\\n\\r\\n    function setHasStarted(bool _hasStarted) external;\\r\\n\\r\\n    function setMinBidAmount(uint256 _minBidAmount) external;\\r\\n\\r\\n    function onRedeem(uint256 _currencyAmount) external;\\r\\n\\r\\n    function setInitialAmount(uint256 _initialAmount) external;\\r\\n\\r\\n    function setOpeningTime(uint256 _openingTime) external;\\r\\n\\r\\n    function setTotalCap(uint256 _cap) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5f94dfa53dde2b8c3847d719abcdaea4177e80656263b57c4e02f4c6e310083d\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\r\\nimport {IPauseable} from './IPauseable.sol';\\r\\n\\r\\ninterface INoteToken is IERC20Upgradeable, IERC20MetadataUpgradeable, IPauseable {\\r\\n\\r\\n    function poolAddress() external view returns (address);\\r\\n\\r\\n    function noteTokenType() external view returns (uint8);\\r\\n\\r\\n    function mint(address receiver, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x93344b4a1d95d62e48af4cb78641cb9748ad810e35ad2b81e488fffa44dfdc08\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPauseable {\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x350fb8b7112b0242b2dd05ba185adbd364052385ef1b4fcd00b17958e12434f2\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        TOKEN_GENERATION_EVENT_FACTORY,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO,\\r\\n        NOTE_TOKEN_VAULT\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x667c8e731fed3ece0d945ec16fb7c55e668743b9bda26dc4d87de9dd8666d73f\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n        uint256 debtCeiling;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address tgeAddress;\\r\\n        address secondTGEAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        uint256 interestRateSOT;\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n        uint256 loanCount;\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b6120a2810775ef84487aa845d03070b7c10a0defa78324dce9d8e0b094abbd\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport './Math.sol';\\r\\n\\r\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\r\\nlibrary Discounting {\\r\\n    /// @notice calculates the discount for a given loan\\r\\n    /// @param discountRate the discount rate\\r\\n    /// @param fv the future value of the loan\\r\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @return result discount for the loan\\r\\n    function calcDiscount(\\r\\n        uint256 discountRate,\\r\\n        uint256 fv,\\r\\n        uint256 normalizedBlockTimestamp,\\r\\n        uint256 maturityDate\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\r\\n    /// @param loanInterestRate the interest rate of the loan\\r\\n    /// @param amount of the loan (principal)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\r\\n    /// @return fv future value of the loan\\r\\n    function calcFutureValue(\\r\\n        uint256 loanInterestRate,\\r\\n        uint256 amount,\\r\\n        uint256 maturityDate,\\r\\n        uint256 recoveryRatePD\\r\\n    ) internal view returns (uint256 fv) {\\r\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\r\\n        uint256 timeRemaining = 0;\\r\\n        if (maturityDate > nnow) {\\r\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\r\\n        }\\r\\n\\r\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\r\\n    }\\r\\n\\r\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\r\\n    /// @param x the first value (minuend)\\r\\n    /// @param y the second value (subtrahend)\\r\\n    /// @return result result of the subtraction\\r\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (y > x) {\\r\\n            return 0;\\r\\n        }\\r\\n        return Math.safeSub(x, y);\\r\\n    }\\r\\n\\r\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\r\\n    /// @param timestamp the timestamp which should be normalized\\r\\n    /// @return nTimestamp normalized timestamp\\r\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\r\\n        return (1 days) * (timestamp / (1 days));\\r\\n    }\\r\\n\\r\\n    /// @notice rpow peforms a math pow operation with fixed point number\\r\\n    /// adopted from ds-math\\r\\n    /// @param x the base for the pow operation\\r\\n    /// @param n the exponent for the pow operation\\r\\n    /// @param base the base of the fixed point number\\r\\n    /// @return z the result of the pow operation\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c5b75f63c3bbe2ed6cc9d676385802140bdd5aef5fc238807b652d946661b49\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// tinlake-math/math.sol -- Tinlake Math\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Math {\\r\\n    uint256 constant ONE = 10 ** 27;\\r\\n\\r\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'safe-add-failed');\\r\\n    }\\r\\n\\r\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'safe-sub-failed');\\r\\n    }\\r\\n\\r\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\r\\n    }\\r\\n\\r\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x / y;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = safeMul(x, y) / ONE;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        // always rounds up\\r\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5da55cb6423fc2810924e3ebea355caae8b5108c280fd3cba416e30083d8526f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\",\"keccak256\":\"0x98c93fdc829c3d90702c0b383423b9cfd6b544511f7040be3d1dee38700f29c8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UntangledMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title UntangledMath\\r\\n/// @author Untangled Team\\r\\nlibrary UntangledMath {\\r\\n    uint256 public constant ONE = 10 ** 27;\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uncheckedInc(uint256 x) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x + 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7361e1f20c36cca9b47700f18e5e8c65922f7fec4ecc9a4357bf8967868def1b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General internal License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General internal License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General internal License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary GenericLogic {\\r\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\r\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\r\\n\\r\\n    /** GETTER */\\r\\n    /// @notice getter function for the maturityDate\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return maturityDate_ the maturityDate of the nft\\r\\n    function maturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nft_\\r\\n    ) internal view returns (uint256 maturityDate_) {\\r\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the risk group\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return risk_ the risk group of the nft\\r\\n\\r\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\r\\n        return uint256(_poolStorage.details[nft_].risk);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the nft value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return nftValue_ the value of the nft\\r\\n\\r\\n    /// @notice getter function for the future value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return fv_ future value of the loan\\r\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\r\\n        return uint256(_poolStorage.details[nft_].futureValue);\\r\\n    }\\r\\n\\r\\n    // function discountRate() internal view  returns (uint256) {\\r\\n    //     return uint256(_getStorage().discountRate);\\r\\n    // }\\r\\n\\r\\n    /// @notice getter function for the recovery rate PD\\r\\n    /// @param riskID id of a risk group\\r\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\r\\n    function recoveryRatePD(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 riskID,\\r\\n        uint256 termLength\\r\\n    ) internal view returns (uint256 recoveryRatePD_) {\\r\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\r\\n\\r\\n        return\\r\\n            Discounting.secureSub(\\r\\n                Math.ONE,\\r\\n                (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\r\\n                    (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the borrowed amount\\r\\n    /// @param loan id of a loan\\r\\n    /// @return borrowed_ borrowed amount of the loan\\r\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\r\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\r\\n    }\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    // TODO have to use modifier in main contract\\r\\n    function getRiskScoreByIdx(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 idx\\r\\n    ) internal view returns (DataTypes.RiskScore memory) {\\r\\n        if (idx == 0 || riskScores.length == 0) {\\r\\n            // Default risk score\\r\\n            return\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: 0,\\r\\n                    advanceRate: 1000000,\\r\\n                    penaltyRate: 0,\\r\\n                    interestRate: 0,\\r\\n                    probabilityOfDefault: 0,\\r\\n                    lossGivenDefault: 0,\\r\\n                    writeOffAfterGracePeriod: 0,\\r\\n                    gracePeriod: 0,\\r\\n                    collectionPeriod: 0,\\r\\n                    writeOffAfterCollectionPeriod: 0,\\r\\n                    discountRate: 0\\r\\n                });\\r\\n        }\\r\\n        // Because risk score upload = risk score index onchain + 1\\r\\n        idx = idx - 1;\\r\\n        return riskScores[idx];\\r\\n    }\\r\\n\\r\\n    /// @notice converts a uint256 to uint128\\r\\n    /// @param value the value to be converted\\r\\n    /// @return converted value to uint128\\r\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\r\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n\\r\\n    /// @notice returns if a loan is written off\\r\\n    /// @param loan the id of the loan\\r\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\r\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV\\r\\n    /// @return nav_ current NAV\\r\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\r\\n    /// @return totalDiscount the present value of the loans\\r\\n    /// @return overdue the present value of the overdue loans\\r\\n    /// @return writeOffs the present value of the written off loans\\r\\n    function currentPVs(\\r\\n        DataTypes.Storage storage _poolStorage\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 latestDiscount;\\r\\n        uint256 overdueLoans;\\r\\n        uint256 discountRate;\\r\\n        uint256 lastNAVUpdate;\\r\\n        {\\r\\n            latestDiscount = _poolStorage.latestDiscount;\\r\\n            overdueLoans = _poolStorage.overdueLoans;\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n        }\\r\\n        if (latestDiscount == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // find all new overdue loans since the last update\\r\\n        // calculate the discount of the overdue loans which is needed\\r\\n        // for the total discount calculation\\r\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\r\\n            uint256 b = _poolStorage.buckets[i];\\r\\n            if (b != 0) {\\r\\n                errPV = Math.safeAdd(\\r\\n                    errPV,\\r\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\r\\n                );\\r\\n                overdue = Math.safeAdd(overdue, b);\\r\\n            }\\r\\n        }\\r\\n        return (\\r\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\r\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\r\\n                errPV\\r\\n            ),\\r\\n            // current overdue loans not written off\\r\\n            Math.safeAdd(overdueLoans, overdue),\\r\\n            // current write-offs loans\\r\\n            currentWriteOffs(_poolStorage)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function currentAV(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 tokenId\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 _currentWriteOffs = 0;\\r\\n        uint256 discountRate;\\r\\n        uint256 latestDiscountOfNavAssetsID;\\r\\n        uint256 lastNAVUpdate;\\r\\n        uint256 overdueLoansOfNavAssetsID;\\r\\n        {\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\r\\n        }\\r\\n\\r\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\r\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\r\\n            _currentWriteOffs = Math.rmul(\\r\\n                debt(_poolStorage, uint256(tokenId)),\\r\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (latestDiscountOfNavAssetsID == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // loan is overdue since lastNAVUpdate\\r\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\r\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\r\\n            uint256 b = futureValue(_poolStorage, tokenId);\\r\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\r\\n            overdue = b;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(\\r\\n                    latestDiscountOfNavAssetsID,\\r\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\r\\n                ),\\r\\n                errPV\\r\\n            ),\\r\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\r\\n            _currentWriteOffs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the sum of all write off loans\\r\\n    /// @return sum of all write off loans\\r\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\r\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            // multiply writeOffGroupDebt with the writeOff rate\\r\\n\\r\\n            sum = Math.safeAdd(\\r\\n                sum,\\r\\n                Math.rmul(\\r\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\r\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV and updates the state\\r\\n    /// @return nav_ current NAV\\r\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n\\r\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\r\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\r\\n\\r\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\r\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\r\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\r\\n        }\\r\\n\\r\\n        _poolStorage.overdueLoans = overdue;\\r\\n        _poolStorage.latestDiscount = totalDiscount;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\r\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice re-calculates the nav in a non-optimized way\\r\\n    ///  the method is not updating the NAV to latest block.timestamp\\r\\n    /// @return nav_ current NAV\\r\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        // reCalcTotalDiscount\\r\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\r\\n        /// @return latestDiscount_ returns the total discount of the active loans\\r\\n        uint256 latestDiscount_ = 0;\\r\\n        for (uint256 count = 0; count < _poolStorage.loanCount; count++) {\\r\\n            uint256 loanID = _poolStorage.nftAssets[count].tokenId;\\r\\n            bytes32 nftID_ = nftID(loanID);\\r\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\r\\n                _poolStorage.discountRate,\\r\\n                futureValue(_poolStorage, nftID_),\\r\\n                _poolStorage.lastNAVUpdate,\\r\\n                maturityDate_\\r\\n            );\\r\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\r\\n        }\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestDiscount_,\\r\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\r\\n        );\\r\\n        _poolStorage.latestDiscount = latestDiscount_;\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the nftID for the underlying collateral nft\\r\\n    /// @param loan the loan id\\r\\n    /// @return nftID_ the nftID of the loan\\r\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\r\\n        return bytes32(loan);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the current valid write off group of a loan\\r\\n    /// @param loan the loan id\\r\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\r\\n    function currentValidWriteOffGroup(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 writeOffGroup_) {\\r\\n        bytes32 nftID_ = nftID(loan);\\r\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\r\\n\\r\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\r\\n\\r\\n        uint128 lastValidWriteOff = type(uint128).max;\\r\\n        uint128 highestOverdueDays = 0;\\r\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\r\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\r\\n            if (\\r\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\r\\n                overdueDays >= highestOverdueDays &&\\r\\n                nnow >= maturityDate_ + overdueDays * 1 days\\r\\n            ) {\\r\\n                lastValidWriteOff = i;\\r\\n                highestOverdueDays = overdueDays;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // returns type(uint128).max if no write-off group is valid for this loan\\r\\n        return lastValidWriteOff;\\r\\n    }\\r\\n\\r\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\r\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].chi,\\r\\n                _poolStorage.rates[rate_].ratePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].penaltyChi,\\r\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function debtWithChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 chi,\\r\\n        uint256 penaltyChi\\r\\n    ) internal view returns (uint256 loanDebt) {\\r\\n        if (penaltyChi == 0) {\\r\\n            return toAmount(chi, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chiAndPenaltyChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        chi = _poolStorage.rates[rate_].chi;\\r\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\r\\n    }\\r\\n\\r\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\r\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\r\\n\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].penaltyChi,\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, pie_);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\r\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\r\\n        // rate category has to be initiated\\r\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\r\\n        _poolStorage.loanRates[loan] = rate;\\r\\n        emit SetRate(nftID(loan), rate);\\r\\n    }\\r\\n\\r\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\r\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\r\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\r\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\r\\n        }\\r\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\r\\n        drip(_poolStorage, currentRate);\\r\\n        drip(_poolStorage, newRate);\\r\\n        uint256 pie_ = _poolStorage.pie[loan];\\r\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\r\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\r\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\r\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\r\\n        _poolStorage.loanRates[loan] = newRate;\\r\\n        emit ChangeRate(nftID(loan), newRate);\\r\\n    }\\r\\n\\r\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\r\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\r\\n    }\\r\\n\\r\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            (uint256 chi, ) = compounding(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated,\\r\\n                _poolStorage.rates[rate].pie\\r\\n            );\\r\\n            _poolStorage.rates[rate].chi = chi;\\r\\n            if (\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\r\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\r\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\r\\n            ) {\\r\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\r\\n                    ? _poolStorage.rates[rate].lastUpdated\\r\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\r\\n                (uint256 penaltyChi, ) = compounding(\\r\\n                    _poolStorage.rates[rate].penaltyChi,\\r\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                    lastUpdated_,\\r\\n                    _poolStorage.rates[rate].pie\\r\\n                );\\r\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\r\\n            }\\r\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Interest functions\\r\\n    // @notice This function provides compounding in seconds\\r\\n    // @param chi Accumulated interest rate over time\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated When the interest rate was last updated\\r\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\r\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\r\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\r\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\r\\n        require(chi != 0);\\r\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\r\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\r\\n    }\\r\\n\\r\\n    // @notice This function charge interest on a interestBearingAmount\\r\\n    // @param interestBearingAmount is the interest bearing amount\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated last time the interest has been charged\\r\\n    // @return interestBearingAmount + interest\\r\\n    function chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated\\r\\n    ) internal view returns (uint) {\\r\\n        if (block.timestamp >= lastUpdated) {\\r\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        }\\r\\n        return interestBearingAmount;\\r\\n    }\\r\\n\\r\\n    function _chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated,\\r\\n        uint current\\r\\n    ) internal pure returns (uint) {\\r\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\r\\n    }\\r\\n\\r\\n    // convert pie to debt/savings amount\\r\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\r\\n        return Math.rmul(_pie, chi);\\r\\n    }\\r\\n\\r\\n    // convert debt/savings amount to pie\\r\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\r\\n        return Math.rdivup(amount, chi);\\r\\n    }\\r\\n\\r\\n    function getAsset(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 agreementId\\r\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\r\\n        return _poolStorage.details[agreementId];\\r\\n    }\\r\\n\\r\\n    function reserve(DataTypes.Storage storage _poolStorage) internal view returns (uint256) {\\r\\n        return Math.safeAdd(_poolStorage.capitalReserve, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    /// @param amortizationUnitType AmortizationUnitType enum\\r\\n    /// @return the corresponding length of the unit in seconds\\r\\n    function _getAmortizationUnitLengthInSeconds(\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\r\\n    ) private pure returns (uint256) {\\r\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\r\\n            return 1 minutes;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\r\\n            return 1 hours;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\r\\n            return 1 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\r\\n            return 7 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\r\\n            return 30 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\r\\n            return 365 days;\\r\\n        } else {\\r\\n            revert('Unknown amortization unit type.');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   Get parameters by Agreement ID (commitment hash)\\r\\n     */\\r\\n    function unpackParamsForAgreementID(\\r\\n        DataTypes.LoanEntry calldata loan\\r\\n    ) internal view returns (UnpackLoanParamtersLib.InterestParams memory params) {\\r\\n        // The principal amount denominated in the aforementioned token.\\r\\n        uint256 principalAmount;\\r\\n        // The interest rate accrued per amortization unit.\\r\\n        uint256 interestRate;\\r\\n        // The amortization unit in which the repayments installments schedule is defined.\\r\\n        uint256 rawAmortizationUnitType;\\r\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 gracePeriodInDays;\\r\\n\\r\\n        (\\r\\n            principalAmount,\\r\\n            interestRate,\\r\\n            rawAmortizationUnitType,\\r\\n            termLengthInAmortizationUnits,\\r\\n            gracePeriodInDays\\r\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\r\\n\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\r\\n            rawAmortizationUnitType\\r\\n        );\\r\\n\\r\\n        // Grant the real origination date\\r\\n        termLengthInAmortizationUnits =\\r\\n            (loan.expirationTimestamp - block.timestamp) /\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        // Calculate term length base on Amortization Unit and number\\r\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        return\\r\\n            UnpackLoanParamtersLib.InterestParams({\\r\\n                principalAmount: principalAmount,\\r\\n                interestRate: interestRate,\\r\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\r\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\r\\n                amortizationUnitType: amortizationUnitType,\\r\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd2dbe21507523c55ae86aaaaf7489af31db08a5e42c45456779d901c481bd9d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolAssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledERC721} from '../../tokens/ERC721/UntangledERC721.sol';\\r\\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\\r\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\r\\nimport {DataTypes} from '../DataTypes.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\\r\\nimport './PoolNAVLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizationPoolAsset contract\\r\\n * @notice Provides pool's asset related functions\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolAssetLogic {\\r\\n    event ExportNFTAsset(address tokenAddress, address toPoolAddress, uint256[] tokenIds);\\r\\n    event WithdrawNFTAsset(address[] tokenAddresses, uint256[] tokenIds, address[] recipients);\\r\\n    event UpdateOpeningBlockTimestamp(uint256 newTimestamp);\\r\\n    event CollectNFTAsset(uint256[] tokenIds, uint256 expectedAssetsValue);\\r\\n    event CollectERC20Asset(address token, uint256 currentBalance);\\r\\n    event WithdrawERC20Asset(address[] tokenAddresses, address[] recipients, uint256[] amounts);\\r\\n    event SetRiskScore(DataTypes.RiskScore[] riskscores);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    function _removeNFTAsset(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address tokenAddress,\\r\\n        uint256 tokenId\\r\\n    ) private returns (bool) {\\r\\n        uint256 nftAssetsLength = _nftAssets.length;\\r\\n        for (uint256 i = 0; i < nftAssetsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            if (_nftAssets[i].tokenAddress == tokenAddress && _nftAssets[i].tokenId == tokenId) {\\r\\n                // Remove i element from nftAssets\\r\\n                _removeNFTAssetIndex(_nftAssets, i);\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _removeNFTAssetIndex(DataTypes.NFTAsset[] storage _nftAssets, uint256 indexToRemove) private {\\r\\n        _nftAssets[indexToRemove] = _nftAssets[_nftAssets.length - 1];\\r\\n\\r\\n        _nftAssets.pop();\\r\\n    }\\r\\n\\r\\n    function _pushTokenAssetAddress(\\r\\n        mapping(address => bool) storage existsTokenAssetAddress,\\r\\n        address[] storage tokenAssetAddresses,\\r\\n        address tokenAddress\\r\\n    ) private {\\r\\n        if (!existsTokenAssetAddress[tokenAddress]) tokenAssetAddresses.push(tokenAddress);\\r\\n        existsTokenAssetAddress[tokenAddress] = true;\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function setupRiskScores(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint32[] calldata _daysPastDues,\\r\\n        uint32[] calldata _ratesAndDefaults,\\r\\n        uint32[] calldata _periodsAndWriteOffs\\r\\n    ) external {\\r\\n        uint256 _daysPastDuesLength = _daysPastDues.length;\\r\\n        require(\\r\\n            _daysPastDuesLength * 6 == _ratesAndDefaults.length &&\\r\\n                _daysPastDuesLength * 4 == _periodsAndWriteOffs.length,\\r\\n            'SecuritizationPool: Riskscore params length is not equal'\\r\\n        );\\r\\n\\r\\n        delete _poolStorage.riskScores;\\r\\n\\r\\n        for (uint256 i = 0; i < _daysPastDuesLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(\\r\\n                i == 0 || _daysPastDues[i] > _daysPastDues[i - 1],\\r\\n                'SecuritizationPool: Risk scores must be sorted'\\r\\n            );\\r\\n            uint32 _interestRate = _ratesAndDefaults[i + _daysPastDuesLength * 2];\\r\\n            uint32 _writeOffAfterGracePeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 2];\\r\\n            uint32 _writeOffAfterCollectionPeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 3];\\r\\n            _poolStorage.riskScores.push(\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: _daysPastDues[i],\\r\\n                    advanceRate: _ratesAndDefaults[i],\\r\\n                    penaltyRate: _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                    interestRate: _interestRate,\\r\\n                    probabilityOfDefault: _ratesAndDefaults[i + _daysPastDuesLength * 3],\\r\\n                    lossGivenDefault: _ratesAndDefaults[i + _daysPastDuesLength * 4],\\r\\n                    discountRate: _ratesAndDefaults[i + _daysPastDuesLength * 5],\\r\\n                    gracePeriod: _periodsAndWriteOffs[i],\\r\\n                    collectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength],\\r\\n                    writeOffAfterGracePeriod: _writeOffAfterGracePeriod,\\r\\n                    writeOffAfterCollectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength * 3]\\r\\n                })\\r\\n            );\\r\\n            PoolNAVLogic.file(\\r\\n                _poolStorage,\\r\\n                'writeOffGroup',\\r\\n                _interestRate,\\r\\n                _writeOffAfterGracePeriod,\\r\\n                _periodsAndWriteOffs[i],\\r\\n                _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                i\\r\\n            );\\r\\n            PoolNAVLogic.file(\\r\\n                _poolStorage,\\r\\n                'writeOffGroup',\\r\\n                _interestRate,\\r\\n                _writeOffAfterCollectionPeriod,\\r\\n                _periodsAndWriteOffs[i + _daysPastDuesLength],\\r\\n                _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                i\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Set discount rate\\r\\n        PoolNAVLogic.file(_poolStorage, 'discountRate', _poolStorage.riskScores[0].discountRate);\\r\\n\\r\\n        emit SetRiskScore(_poolStorage.riskScores);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function exportAssets(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address tokenAddress,\\r\\n        address toPoolAddress,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(_removeNFTAsset(_nftAssets, tokenAddress, tokenIds[i]), 'SecuritizationPool: Asset does not exist');\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            UntangledERC721(tokenAddress).safeTransferFrom(address(this), toPoolAddress, tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit ExportNFTAsset(tokenAddress, toPoolAddress, tokenIds);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function withdrawAssets(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address[] calldata tokenAddresses,\\r\\n        uint256[] calldata tokenIds,\\r\\n        address[] calldata recipients\\r\\n    ) external {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        require(tokenAddresses.length == tokenIdsLength, 'tokenAddresses length and tokenIds length are not equal');\\r\\n        require(\\r\\n            tokenAddresses.length == recipients.length,\\r\\n            'tokenAddresses length and recipients length are not equal'\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(\\r\\n                _removeNFTAsset(_nftAssets, tokenAddresses[i], tokenIds[i]),\\r\\n                'SecuritizationPool: Asset does not exist'\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            UntangledERC721(tokenAddresses[i]).safeTransferFrom(address(this), recipients[i], tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit WithdrawNFTAsset(tokenAddresses, tokenIds, recipients);\\r\\n    }\\r\\n\\r\\n    function getLoansValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata tokenIds,\\r\\n        DataTypes.LoanEntry[] calldata loanEntries\\r\\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues) {\\r\\n        expectedAssetValues = new uint256[](tokenIds.length);\\r\\n        for (uint256 i = 0; i < tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\r\\n            uint256 assetValue = PoolNAVLogic.getExpectedLoanvalue(_poolStorage, loanEntries[i]);\\r\\n            expectedAssetsValue = expectedAssetsValue + assetValue;\\r\\n            expectedAssetValues[i] = assetValue;\\r\\n        }\\r\\n\\r\\n        return (expectedAssetsValue, expectedAssetValues);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function collectAssets(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata tokenIds,\\r\\n        DataTypes.LoanEntry[] calldata loanEntries\\r\\n    ) external returns (uint256) {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        uint256 expectedAssetsValue = 0;\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            expectedAssetsValue = expectedAssetsValue + PoolNAVLogic.addLoan(_poolStorage, tokenIds[i], loanEntries[i]);\\r\\n        }\\r\\n\\r\\n        if (_poolStorage.firstAssetTimestamp == 0) {\\r\\n            _poolStorage.firstAssetTimestamp = uint64(block.timestamp);\\r\\n            _setUpOpeningBlockTimestamp(_poolStorage);\\r\\n        }\\r\\n        if (_poolStorage.openingBlockTimestamp == 0) {\\r\\n            // If openingBlockTimestamp is not set\\r\\n            _setOpeningBlockTimestamp(_poolStorage, uint64(block.timestamp));\\r\\n        }\\r\\n\\r\\n        emit CollectNFTAsset(tokenIds, expectedAssetsValue);\\r\\n        return expectedAssetsValue;\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) public {\\r\\n        _setUpOpeningBlockTimestamp(_poolStorage);\\r\\n    }\\r\\n\\r\\n    /// @dev Set the opening block timestamp\\r\\n    function _setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) private {\\r\\n        address tgeAddress = _poolStorage.tgeAddress;\\r\\n        if (tgeAddress == address(0)) return;\\r\\n        uint64 _firstNoteTokenMintedTimestamp = uint64(IMintedNormalTGE(tgeAddress).firstNoteTokenMintedTimestamp());\\r\\n        uint64 _firstAssetTimestamp = _poolStorage.firstAssetTimestamp;\\r\\n        if (_firstNoteTokenMintedTimestamp > 0 && _firstAssetTimestamp > 0) {\\r\\n            // Pick the later\\r\\n            if (_firstAssetTimestamp > _firstNoteTokenMintedTimestamp) {\\r\\n                _setOpeningBlockTimestamp(_poolStorage, _firstAssetTimestamp);\\r\\n            } else {\\r\\n                _setOpeningBlockTimestamp(_poolStorage, _firstNoteTokenMintedTimestamp);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage, uint64 _openingBlockTimestamp) internal {\\r\\n        _poolStorage.openingBlockTimestamp = _openingBlockTimestamp;\\r\\n        emit UpdateOpeningBlockTimestamp(_openingBlockTimestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57707118ca7e315af33cc5b3144d3f235118b91cad0eb1f1f4e1cdc2981f9917\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {GenericLogic} from './GenericLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolNAVLogic {\\r\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n\\r\\n    // events\\r\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\r\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\r\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\r\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n\\r\\n    function getExpectedLoanvalue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public view returns (uint256 principalAmount) {\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        principalAmount = (loanParam.principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n    }\\r\\n\\r\\n    function addLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public returns (uint256) {\\r\\n        bytes32 _tokenId = bytes32(loan);\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n\\r\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\r\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\r\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\r\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\r\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\r\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\r\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\r\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\r\\n\\r\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\r\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\r\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\r\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\r\\n\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        uint256 principalAmount = loanParam.principalAmount;\\r\\n        uint256 _convertedInterestRate;\\r\\n\\r\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n\\r\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\r\\n        _poolStorage.loanCount++;\\r\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\r\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n            // If interest rate is not set\\r\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n        }\\r\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\r\\n        GenericLogic.accrue(_poolStorage, loan);\\r\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\r\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\r\\n\\r\\n        // increase NAV\\r\\n        borrow(_poolStorage, loan, principalAmount);\\r\\n        _incDebt(_poolStorage, loan, principalAmount);\\r\\n\\r\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\r\\n\\r\\n        return principalAmount;\\r\\n    }\\r\\n\\r\\n    function setLoanMaturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\r\\n\\r\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\r\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\r\\n        );\\r\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter\\r\\n    /// @param value new value of the parameter\\r\\n\\r\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\r\\n        if (name == 'discountRate') {\\r\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n        } else {\\r\\n            revert('unknown config parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter group\\r\\n    /// @param writeOffPercentage_ the write off rate in percent\\r\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\r\\n\\r\\n    function file(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 name,\\r\\n        uint256 rate_,\\r\\n        uint256 writeOffPercentage_,\\r\\n        uint256 overdueDays_,\\r\\n        uint256 penaltyRate_,\\r\\n        uint256 riskIndex\\r\\n    ) public {\\r\\n        if (name == 'writeOffGroup') {\\r\\n            uint256 index = _poolStorage.writeOffGroups.length;\\r\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\r\\n            uint256 _convertedPenaltyRate = Math.ONE +\\r\\n                (Math.ONE * penaltyRate_ * rate_) /\\r\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\r\\n            _poolStorage.writeOffGroups.push(\\r\\n                DataTypes.WriteOffGroup(\\r\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\r\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\r\\n                    GenericLogic.toUint128(riskIndex)\\r\\n                )\\r\\n            );\\r\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\r\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\r\\n        } else {\\r\\n            revert('unknown name');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file manages different state configs for the pile\\r\\n    /// only a ward can call this function\\r\\n    /// @param what what config to change\\r\\n    /// @param rate the interest rate group\\r\\n    /// @param value the value to change\\r\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\r\\n        if (what == 'rate') {\\r\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].chi == 0) {\\r\\n                _poolStorage.rates[rate].chi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n            _poolStorage.rates[rate].ratePerSecond = value;\\r\\n        } else if (what == 'penalty') {\\r\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\r\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n\\r\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\r\\n        } else {\\r\\n            revert('unknown parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice borrow updates the NAV for a new borrowed loan\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param amount the amount borrowed\\r\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\r\\n    function borrow(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 amount\\r\\n    ) private returns (uint256 navIncrease) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\r\\n\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // uint256 beforeNAV = latestNAV;\\r\\n\\r\\n        // calculate amount including fixed fee if applicatable\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n\\r\\n        // calculate future value FV\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            amount,\\r\\n            maturityDate_,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\r\\n        );\\r\\n\\r\\n        // add future value to the bucket of assets with the same maturity date\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n        // increase borrowed amount for future ceiling computations\\r\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\r\\n        );\\r\\n\\r\\n        // return increase NAV amount\\r\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n\\r\\n        return navIncrease;\\r\\n    }\\r\\n\\r\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\r\\n        _poolStorage.latestNAV = Discounting.secureSub(\\r\\n            _poolStorage.latestNAV,\\r\\n            Math.rmul(\\r\\n                amount,\\r\\n                GenericLogic.toUint128(\\r\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        decDebt(_poolStorage, loan, amount);\\r\\n    }\\r\\n\\r\\n    function _calcFutureValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 _debt,\\r\\n        uint256 _maturityDate\\r\\n    ) private view returns (uint256) {\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            _debt,\\r\\n            _maturityDate,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        return fv;\\r\\n    }\\r\\n\\r\\n    /// @notice repay updates the NAV for a new repaid loan\\r\\n    /// @param loans the ids of the loan\\r\\n    /// @param amounts the amounts repaid\\r\\n    function repayLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        uint256 numberOfLoans = loans.length;\\r\\n\\r\\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\\r\\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            uint256 loan = loans[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            // re-define: prevent stack too deep\\r\\n            DataTypes.Storage storage __poolStorage = _poolStorage;\\r\\n\\r\\n            GenericLogic.accrue(__poolStorage, loan);\\r\\n\\r\\n            if (nnow > __poolStorage.lastNAVUpdate) {\\r\\n                GenericLogic.calcUpdateNAV(__poolStorage);\\r\\n            }\\r\\n\\r\\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\\r\\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\\r\\n\\r\\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\\r\\n            if (amount > _currentDebt) {\\r\\n                amount = _currentDebt;\\r\\n            }\\r\\n\\r\\n            repayAmounts[i] = amount;\\r\\n            previousDebts[i] = _currentDebt;\\r\\n\\r\\n            // case 1: repayment of a written-off loan\\r\\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\\r\\n                // update nav with write-off decrease\\r\\n                _decreaseLoan(__poolStorage, loan, amount);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\\r\\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\r\\n            uint256 fvDecrease = preFV;\\r\\n\\r\\n            // prevent stack too deep\\r\\n            {\\r\\n                uint256 fv = 0;\\r\\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\r\\n                if (_debt != 0) {\\r\\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\\r\\n                    if (preFV >= fv) {\\r\\n                        fvDecrease = Math.safeSub(preFV, fv);\\r\\n                    } else {\\r\\n                        fvDecrease = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\\r\\n            }\\r\\n\\r\\n            // case 2: repayment of a loan before or on maturity date\\r\\n            if (maturityDate_ >= nnow) {\\r\\n                // remove future value decrease from bucket\\r\\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n                uint256 discountDecrease = Discounting.calcDiscount(\\r\\n                    __poolStorage.discountRate,\\r\\n                    fvDecrease,\\r\\n                    nnow,\\r\\n                    maturityDate_\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\\r\\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\\r\\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\\r\\n                    discountDecrease\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\\r\\n            } else {\\r\\n                // case 3: repayment of an overdue loan\\r\\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\\r\\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\\r\\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\\r\\n                    fvDecrease\\r\\n                );\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\\r\\n            }\\r\\n\\r\\n            decDebt(__poolStorage, loan, amount);\\r\\n            emit Repay(bytes32(loan), amount);\\r\\n        }\\r\\n        return (repayAmounts, previousDebts);\\r\\n    }\\r\\n\\r\\n    /// @notice writeOff writes off a loan if it is overdue\\r\\n    /// @param loan the id of the loan\\r\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\r\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\r\\n\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\r\\n\\r\\n        // can not write-off healthy loans\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\r\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\r\\n        // check the writeoff group based on the amount of days overdue\\r\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\r\\n\\r\\n        if (\\r\\n            writeOffGroupIndex_ < type(uint128).max &&\\r\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\r\\n        ) {\\r\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\r\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal function for the write off\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\r\\n    /// @param nftID_ the nftID of the loan\\r\\n    /// @param maturityDate_ the maturity date of the loan\\r\\n    function _writeOff(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 writeOffGroupIndex_,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        // Ensure we have an up to date NAV\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\r\\n\\r\\n        // first time written-off\\r\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\r\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\r\\n                // write off after the maturity date\\r\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\r\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\r\\n                    fv\\r\\n                );\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\r\\n            } else {\\r\\n                // write off before or on the maturity date\\r\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n                uint256 pv = Math.rmul(\\r\\n                    fv,\\r\\n                    Discounting.rpow(\\r\\n                        _poolStorage.discountRate,\\r\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\r\\n                        Math.ONE\\r\\n                    )\\r\\n                );\\r\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                    pv\\r\\n                );\\r\\n\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestNAV_,\\r\\n            Math.rmul(\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\r\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\r\\n\\r\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\r\\n        // change to new rate interestRate immediately in pile if loan debt exists\\r\\n        uint256 loan = uint256(nftID_);\\r\\n        if (_poolStorage.pie[loan] != 0) {\\r\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\r\\n            uint256 _convertedInterestRate = Math.ONE +\\r\\n                (riskParam.interestRate * Math.ONE) /\\r\\n                (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n                // If interest rate is not set\\r\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n            }\\r\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\r\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\r\\n        }\\r\\n\\r\\n        // no currencyAmount borrowed yet\\r\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\r\\n        // New interest rate leads to a future value.\\r\\n        // recalculation required\\r\\n\\r\\n        uint256 lastNAVUpdate = Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate);\\r\\n        {\\r\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            uint256 navDecrease = _poolStorage.latestDiscountOfNavAssets[nftID_];\\r\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = 0;\\r\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\r\\n        }\\r\\n\\r\\n        // update latest NAV\\r\\n        // update latest Discount\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Discounting.calcFutureValue(\\r\\n                _rate.ratePerSecond,\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\r\\n                GenericLogic.recoveryRatePD(\\r\\n                    _poolStorage.riskScores,\\r\\n                    risk_,\\r\\n                    nftDetail.expirationTimestamp - block.timestamp\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n        uint256 navIncrease = Discounting.calcDiscount(\\r\\n            _poolStorage.discountRate,\\r\\n            fvIncrease,\\r\\n            lastNAVUpdate,\\r\\n            maturityDate_\\r\\n        );\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\r\\n    }\\r\\n\\r\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n\\r\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        if (penaltyChi_ > 0) {\\r\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\r\\n        }\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a90f3bc53c58a6f95c09ce92dfb8bf88624984f97303d5df528c4f659c1bde8\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledBase} from '../base/UntangledBase.sol';\\r\\nimport {Configuration} from '../libraries/Configuration.sol';\\r\\n\\r\\n/**\\r\\n * @title Registry\\r\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\r\\n *  for all other contracts to access it. These config vars\\r\\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\\r\\n * @author Untangled Team\\r\\n */\\r\\ncontract Registry is UntangledBase {\\r\\n    mapping(uint8 => address) public contractAddresses;\\r\\n    mapping(address => bool) public whiteListToAddresses;\\r\\n    mapping(address => bool) public whiteListFromAddresses;\\r\\n\\r\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __UntangledBase__init(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\r\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\r\\n        contractAddresses[addressIndex] = newAddress;\\r\\n    }\\r\\n\\r\\n    function getAddress(uint8 index) public view returns (address) {\\r\\n        return contractAddresses[index];\\r\\n    }\\r\\n\\r\\n    function isValidNoteTokenTransfer(address from, address to) external view returns (bool) {\\r\\n        return whiteListFromAddresses[from] || whiteListToAddresses[to];\\r\\n    }\\r\\n\\r\\n    function setWhiteListAddresses(\\r\\n        address[] calldata addresses,\\r\\n        bool[] calldata boolFroms,\\r\\n        bool[] calldata boolTos\\r\\n    ) public onlyAdmin {\\r\\n        uint256 length = addresses.length;\\r\\n        require(length == boolFroms.length && length == boolTos.length, 'Invalid length');\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            whiteListFromAddresses[addresses[i]] = boolFroms[i];\\r\\n            whiteListToAddresses[addresses[i]] = boolTos[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\r\\n    }\\r\\n\\r\\n    function setTokenGenerationEventFactory(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\\r\\n    }\\r\\n\\r\\n    function setNoteTokenVault(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        address oldNoteTokenVault = getAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\\r\\n        if (oldNoteTokenVault != address(0)) {\\r\\n            whiteListFromAddresses[oldNoteTokenVault] = false;\\r\\n            whiteListToAddresses[oldNoteTokenVault] = false;\\r\\n        }\\r\\n\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT), newAddress);\\r\\n\\r\\n        whiteListFromAddresses[newAddress] = true;\\r\\n        whiteListToAddresses[newAddress] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5960ee7e3fbd431c2e70ac69f03b4e9254dd9f107705ed2eeb07cf2950265e00\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/UntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '../../storage/Registry.sol';\\r\\n\\r\\nabstract contract UntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\\r\\n    Registry public registry;\\r\\n\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    function __UntangledERC721__init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) internal onlyInitializing {\\r\\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\\r\\n    }\\r\\n\\r\\n    function __UntangledERC721__init_unchained(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) internal onlyInitializing {\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseTokenURI) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        baseURI,\\r\\n                        Strings.toHexString(tokenId),\\r\\n                        '?chain_id=',\\r\\n                        Strings.toString(block.chainid)\\r\\n                    )\\r\\n                )\\r\\n                : '';\\r\\n    }\\r\\n\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x2a42952eb0e8a31848c24a0c4ff8221007b2f07ab8054bb102540717c0c5441e\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x611af261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632fc94355146100715780639178a8a114610093578063aa12d15f146100b3578063c6b208a8146100dd578063d37cc713146100fd578063fe66f5c21461011d575b600080fd5b81801561007d57600080fd5b5061009161008c3660046113d8565b61014b565b005b81801561009f57600080fd5b506100916100ae366004611458565b610157565b6100c66100c13660046114c6565b6102a8565b6040516100d492919061156c565b60405180910390f35b8180156100e957600080fd5b506100916100f83660046115ba565b6103cf565b81801561010957600080fd5b506100916101183660046115ba565b610cdd565b81801561012957600080fd5b5061013d6101383660046114c6565b610f69565b6040519081526020016100d4565b610154816110e4565b50565b8060005b818110156101b357610186878786868581811061017a5761017a61165d565b905060200201356111cc565b6101ab5760405162461bcd60e51b81526004016101a290611673565b60405180910390fd5b60010161015b565b5060005b8181101561026257856001600160a01b03166342842e0e30878787868181106101e2576101e261165d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b5050505061025b8160010190565b90506101b7565b507fc70ceba6c66e22dfb9eb8b9e82dc09a08cbf7a0bb8c759367909cabbe10ac5948585858560405161029894939291906116ed565b60405180910390a1505050505050565b60006060846001600160401b038111156102c4576102c4611724565b6040519080825280602002602001820160405280156102ed578160200160208202803683370190505b50905060005b858110156103c4576000730EEA42c19b03A8A53EF46c8cD4D5a7CabD6a055763a9eed6958a88888681811061032a5761032a61165d565b905061010002016040518363ffffffff1660e01b815260040161034e9291906117f6565b602060405180830381865af415801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f919061180b565b905061039b818561183a565b9350808383815181106103b0576103b061165d565b6020908102919091010152506001016102f3565b509550959350505050565b84836103dc826006611853565b1480156103f25750816103f0826004611853565b145b6104645760405162461bcd60e51b815260206004820152603860248201527f53656375726974697a6174696f6e506f6f6c3a205269736b73636f726520706160448201527f72616d73206c656e677468206973206e6f7420657175616c000000000000000060648201526084016101a2565b61047260018901600061138c565b60005b81811015610bd8578015806104eb5750878761049260018461186a565b8181106104a1576104a161165d565b90506020020160208101906104b6919061187d565b63ffffffff168888838181106104ce576104ce61165d565b90506020020160208101906104e3919061187d565b63ffffffff16115b61054e5760405162461bcd60e51b815260206004820152602e60248201527f53656375726974697a6174696f6e506f6f6c3a205269736b2073636f7265732060448201526d1b5d5cdd081899481cdbdc9d195960921b60648201526084016101a2565b6000868661055d856002611853565b610567908561183a565b8181106105765761057661165d565b905060200201602081019061058b919061187d565b90506000858561059c866002611853565b6105a6908661183a565b8181106105b5576105b561165d565b90506020020160208101906105ca919061187d565b9050600086866105db876003611853565b6105e5908761183a565b8181106105f4576105f461165d565b9050602002016020810190610609919061187d565b90508b6001016040518061016001604052808d8d8881811061062d5761062d61165d565b9050602002016020810190610642919061187d565b63ffffffff1681526020018b8b8881811061065f5761065f61165d565b9050602002016020810190610674919061187d565b63ffffffff1681526020018b8b61068b8a8a61183a565b81811061069a5761069a61165d565b90506020020160208101906106af919061187d565b63ffffffff9081168252861660208201526040018b8b6106d08a6003611853565b6106da908a61183a565b8181106106e9576106e961165d565b90506020020160208101906106fe919061187d565b63ffffffff1681526020018b8b6107168a6004611853565b610720908a61183a565b81811061072f5761072f61165d565b9050602002016020810190610744919061187d565b63ffffffff1681526020018463ffffffff16815260200189898881811061076d5761076d61165d565b9050602002016020810190610782919061187d565b63ffffffff16815260200189896107998a8a61183a565b8181106107a8576107a861165d565b90506020020160208101906107bd919061187d565b63ffffffff16815260200189896107d58a6003611853565b6107df908a61183a565b8181106107ee576107ee61165d565b9050602002016020810190610803919061187d565b63ffffffff1681526020018b8b61081b8a6005611853565b610825908a61183a565b8181106108345761083461165d565b9050602002016020810190610849919061187d565b63ffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160186101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160010160006101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160010160046101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160010160086101000a81548163ffffffff021916908363ffffffff1602179055505050730EEA42c19b03A8A53EF46c8cD4D5a7CabD6a055763b77604c58d85858b8b8a818110610a5c57610a5c61165d565b9050602002016020810190610a71919061187d565b8e8e610a7d8d8d61183a565b818110610a8c57610a8c61165d565b9050602002016020810190610aa1919061187d565b8a6040518763ffffffff1660e01b8152600401610ac3969594939291906118a3565b60006040518083038186803b158015610adb57600080fd5b505af4158015610aef573d6000803e3d6000fd5b50505050730EEA42c19b03A8A53EF46c8cD4D5a7CabD6a055763b77604c58d85848b8b8b8b610b1e919061183a565b818110610b2d57610b2d61165d565b9050602002016020810190610b42919061187d565b8e8e610b4e8d8d61183a565b818110610b5d57610b5d61165d565b9050602002016020810190610b72919061187d565b8a6040518763ffffffff1660e01b8152600401610b94969594939291906118a3565b60006040518083038186803b158015610bac57600080fd5b505af4158015610bc0573d6000803e3d6000fd5b50505050505050610bd18160010190565b9050610475565b50730EEA42c19b03A8A53EF46c8cD4D5a7CabD6a055763d580a21a898a600101600081548110610c0a57610c0a61165d565b600091825260209091206002909102016001015460405160e084901b6001600160e01b031916815260048101929092526b646973636f756e745261746560a01b602483015268010000000000000000900463ffffffff16604482015260640160006040518083038186803b158015610c8157600080fd5b505af4158015610c95573d6000803e3d6000fd5b505050507f588c608ffeac5768f6e9c5529db5f357eb651424ea78548b4481ecf813e3cf4988600101604051610ccb91906118ec565b60405180910390a15050505050505050565b82858114610d535760405162461bcd60e51b815260206004820152603760248201527f746f6b656e416464726573736573206c656e67746820616e6420746f6b656e4960448201527f6473206c656e67746820617265206e6f7420657175616c00000000000000000060648201526084016101a2565b858214610dc85760405162461bcd60e51b815260206004820152603960248201527f746f6b656e416464726573736573206c656e67746820616e642072656369706960448201527f656e7473206c656e67746820617265206e6f7420657175616c0000000000000060648201526084016101a2565b60005b81811015610e3457610e1089898984818110610de957610de961165d565b9050602002016020810190610dfe91906119b3565b88888581811061017a5761017a61165d565b610e2c5760405162461bcd60e51b81526004016101a290611673565b600101610dcb565b5060005b81811015610f2f57878782818110610e5257610e5261165d565b9050602002016020810190610e6791906119b3565b6001600160a01b03166342842e0e30868685818110610e8857610e8861165d565b9050602002016020810190610e9d91906119b3565b898986818110610eaf57610eaf61165d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b50505050610f288160010190565b9050610e38565b507f1bbbe50d65a9fe65cca22ba5288854f07891b76bead3ef908a99ea9cc9bc3289878787878787604051610ccb96959493929190611a15565b60008381805b8281101561103757730EEA42c19b03A8A53EF46c8cD4D5a7CabD6a055763a2cfdc9b8a8a8a85818110610fa457610fa461165d565b90506020020135898986818110610fbd57610fbd61165d565b905061010002016040518463ffffffff1660e01b8152600401610fe293929190611a5e565b602060405180830381865af4158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611023919061180b565b61102d908361183a565b9150600101610f6f565b50875461010090046001600160401b031660000361107757875468ffffffffffffffff001916610100426001600160401b031602178855611077886110e4565b600a88015464010000000090046001600160401b031660000361109e5761109e8842611270565b7fa61682c8af8d07fa57e991d4af5b406f1f5fb8bceb91a1bcc13c6616eab29ddb8787836040516110d193929190611a82565b60405180910390a1979650505050505050565b60038101546001600160a01b0316806110fb575050565b6000816001600160a01b0316639b52fe336040518163ffffffff1660e01b8152600401602060405180830381865afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f919061180b565b83549091506001600160401b0361010090910481169082161580159061118e57506000816001600160401b0316115b156111c657816001600160401b0316816001600160401b031611156111bc576111b78482611270565b6111c6565b6111c68483611270565b50505050565b8254600090815b8181101561126257846001600160a01b03168682815481106111f7576111f761165d565b60009182526020909120600290910201546001600160a01b031614801561124057508386828154811061122c5761122c61165d565b906000526020600020906002020160010154145b1561125a5761124f86826112d6565b600192505050611269565b6001016111d3565b5060009150505b9392505050565b600a820180546bffffffffffffffff0000000019166401000000006001600160401b038416908102919091179091556040519081527faa8cf603b3be24f79f673495c449aa3a2fcec1f484210e1662a1374c3e7f33509060200160405180910390a15050565b815482906112e69060019061186a565b815481106112f6576112f661165d565b90600052602060002090600202018282815481106113165761131661165d565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b03909216919091178155600191820154910155815482908061135f5761135f611aa6565b60008281526020812060026000199093019283020180546001600160a01b03191681556001015590555050565b508054600082556002029060005260206000209081019061015491905b808211156113d457600081556001810180546bffffffffffffffffffffffff191690556002016113a9565b5090565b6000602082840312156113ea57600080fd5b5035919050565b80356001600160a01b038116811461140857600080fd5b919050565b60008083601f84011261141f57600080fd5b5081356001600160401b0381111561143657600080fd5b6020830191508360208260051b850101111561145157600080fd5b9250929050565b60008060008060006080868803121561147057600080fd5b85359450611480602087016113f1565b935061148e604087016113f1565b925060608601356001600160401b038111156114a957600080fd5b6114b58882890161140d565b969995985093965092949392505050565b6000806000806000606086880312156114de57600080fd5b8535945060208601356001600160401b03808211156114fc57600080fd5b61150889838a0161140d565b9096509450604088013591508082111561152157600080fd5b818801915088601f83011261153557600080fd5b81358181111561154457600080fd5b8960208260081b850101111561155957600080fd5b9699959850939650602001949392505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156115ad57845183529383019391830191600101611591565b5090979650505050505050565b60008060008060008060006080888a0312156115d557600080fd5b8735965060208801356001600160401b03808211156115f357600080fd5b6115ff8b838c0161140d565b909850965060408a013591508082111561161857600080fd5b6116248b838c0161140d565b909650945060608a013591508082111561163d57600080fd5b5061164a8a828b0161140d565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fd5b60208082526028908201527f53656375726974697a6174696f6e506f6f6c3a20417373657420646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b81835260006001600160fb1b038311156116d457600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0385811682528416602082015260606040820181905260009061171a90830184866116bb565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b80356002811061140857600080fd5b6002811061176757634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038061177d836113f1565b1683528061178d602084016113f1565b1660208401525060408101356040830152606081013560608301526080810135608083015260a081013560a083015260c081013560ff811681146117d057600080fd5b60ff1660c08301526117e460e0820161173a565b6117f160e0840182611749565b505050565b8281526101208101611269602083018461176b565b60006020828403121561181d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561184d5761184d611824565b92915050565b808202811582820484141761184d5761184d611824565b8181038181111561184d5761184d611824565b60006020828403121561188f57600080fd5b813563ffffffff8116811461126957600080fd5b9586526c077726974654f666647726f757609c1b602087015263ffffffff94851660408701529284166060860152908316608085015290911660a083015260c082015260e00190565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156119a657815463ffffffff808216865281881c81168887015281871c811687870152606082811c821690870152608082811c82169087015260a082811c82169087015260c082811c82169087015260e091821c9186019190915260018084015480831661010088015280891c8316610120880152871c9091166101408601526101609094019360029092019101611910565b5091979650505050505050565b6000602082840312156119c557600080fd5b611269826113f1565b8183526000602080850194508260005b85811015611a0a576001600160a01b036119f7836113f1565b16875295820195908201906001016119de565b509495945050505050565b606081526000611a2960608301888a6119ce565b8281036020840152611a3c8187896116bb565b90508281036040840152611a518185876119ce565b9998505050505050505050565b838152602081018390526101408101611a7a604083018461176b565b949350505050565b604081526000611a966040830185876116bb565b9050826020830152949350505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ca499d03b5657f6229035cb3cf9c3b2c9a5fbfe37e2c5d045f2e99a90145abe964736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632fc94355146100715780639178a8a114610093578063aa12d15f146100b3578063c6b208a8146100dd578063d37cc713146100fd578063fe66f5c21461011d575b600080fd5b81801561007d57600080fd5b5061009161008c3660046113d8565b61014b565b005b81801561009f57600080fd5b506100916100ae366004611458565b610157565b6100c66100c13660046114c6565b6102a8565b6040516100d492919061156c565b60405180910390f35b8180156100e957600080fd5b506100916100f83660046115ba565b6103cf565b81801561010957600080fd5b506100916101183660046115ba565b610cdd565b81801561012957600080fd5b5061013d6101383660046114c6565b610f69565b6040519081526020016100d4565b610154816110e4565b50565b8060005b818110156101b357610186878786868581811061017a5761017a61165d565b905060200201356111cc565b6101ab5760405162461bcd60e51b81526004016101a290611673565b60405180910390fd5b60010161015b565b5060005b8181101561026257856001600160a01b03166342842e0e30878787868181106101e2576101e261165d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b5050505061025b8160010190565b90506101b7565b507fc70ceba6c66e22dfb9eb8b9e82dc09a08cbf7a0bb8c759367909cabbe10ac5948585858560405161029894939291906116ed565b60405180910390a1505050505050565b60006060846001600160401b038111156102c4576102c4611724565b6040519080825280602002602001820160405280156102ed578160200160208202803683370190505b50905060005b858110156103c457600073__$7f0f8de4978e89001c10ba53aee4a3ea4c$__63a9eed6958a88888681811061032a5761032a61165d565b905061010002016040518363ffffffff1660e01b815260040161034e9291906117f6565b602060405180830381865af415801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f919061180b565b905061039b818561183a565b9350808383815181106103b0576103b061165d565b6020908102919091010152506001016102f3565b509550959350505050565b84836103dc826006611853565b1480156103f25750816103f0826004611853565b145b6104645760405162461bcd60e51b815260206004820152603860248201527f53656375726974697a6174696f6e506f6f6c3a205269736b73636f726520706160448201527f72616d73206c656e677468206973206e6f7420657175616c000000000000000060648201526084016101a2565b61047260018901600061138c565b60005b81811015610bd8578015806104eb5750878761049260018461186a565b8181106104a1576104a161165d565b90506020020160208101906104b6919061187d565b63ffffffff168888838181106104ce576104ce61165d565b90506020020160208101906104e3919061187d565b63ffffffff16115b61054e5760405162461bcd60e51b815260206004820152602e60248201527f53656375726974697a6174696f6e506f6f6c3a205269736b2073636f7265732060448201526d1b5d5cdd081899481cdbdc9d195960921b60648201526084016101a2565b6000868661055d856002611853565b610567908561183a565b8181106105765761057661165d565b905060200201602081019061058b919061187d565b90506000858561059c866002611853565b6105a6908661183a565b8181106105b5576105b561165d565b90506020020160208101906105ca919061187d565b9050600086866105db876003611853565b6105e5908761183a565b8181106105f4576105f461165d565b9050602002016020810190610609919061187d565b90508b6001016040518061016001604052808d8d8881811061062d5761062d61165d565b9050602002016020810190610642919061187d565b63ffffffff1681526020018b8b8881811061065f5761065f61165d565b9050602002016020810190610674919061187d565b63ffffffff1681526020018b8b61068b8a8a61183a565b81811061069a5761069a61165d565b90506020020160208101906106af919061187d565b63ffffffff9081168252861660208201526040018b8b6106d08a6003611853565b6106da908a61183a565b8181106106e9576106e961165d565b90506020020160208101906106fe919061187d565b63ffffffff1681526020018b8b6107168a6004611853565b610720908a61183a565b81811061072f5761072f61165d565b9050602002016020810190610744919061187d565b63ffffffff1681526020018463ffffffff16815260200189898881811061076d5761076d61165d565b9050602002016020810190610782919061187d565b63ffffffff16815260200189896107998a8a61183a565b8181106107a8576107a861165d565b90506020020160208101906107bd919061187d565b63ffffffff16815260200189896107d58a6003611853565b6107df908a61183a565b8181106107ee576107ee61165d565b9050602002016020810190610803919061187d565b63ffffffff1681526020018b8b61081b8a6005611853565b610825908a61183a565b8181106108345761083461165d565b9050602002016020810190610849919061187d565b63ffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160186101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160010160006101000a81548163ffffffff021916908363ffffffff1602179055506101208201518160010160046101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160010160086101000a81548163ffffffff021916908363ffffffff160217905550505073__$7f0f8de4978e89001c10ba53aee4a3ea4c$__63b77604c58d85858b8b8a818110610a5c57610a5c61165d565b9050602002016020810190610a71919061187d565b8e8e610a7d8d8d61183a565b818110610a8c57610a8c61165d565b9050602002016020810190610aa1919061187d565b8a6040518763ffffffff1660e01b8152600401610ac3969594939291906118a3565b60006040518083038186803b158015610adb57600080fd5b505af4158015610aef573d6000803e3d6000fd5b5050505073__$7f0f8de4978e89001c10ba53aee4a3ea4c$__63b77604c58d85848b8b8b8b610b1e919061183a565b818110610b2d57610b2d61165d565b9050602002016020810190610b42919061187d565b8e8e610b4e8d8d61183a565b818110610b5d57610b5d61165d565b9050602002016020810190610b72919061187d565b8a6040518763ffffffff1660e01b8152600401610b94969594939291906118a3565b60006040518083038186803b158015610bac57600080fd5b505af4158015610bc0573d6000803e3d6000fd5b50505050505050610bd18160010190565b9050610475565b5073__$7f0f8de4978e89001c10ba53aee4a3ea4c$__63d580a21a898a600101600081548110610c0a57610c0a61165d565b600091825260209091206002909102016001015460405160e084901b6001600160e01b031916815260048101929092526b646973636f756e745261746560a01b602483015268010000000000000000900463ffffffff16604482015260640160006040518083038186803b158015610c8157600080fd5b505af4158015610c95573d6000803e3d6000fd5b505050507f588c608ffeac5768f6e9c5529db5f357eb651424ea78548b4481ecf813e3cf4988600101604051610ccb91906118ec565b60405180910390a15050505050505050565b82858114610d535760405162461bcd60e51b815260206004820152603760248201527f746f6b656e416464726573736573206c656e67746820616e6420746f6b656e4960448201527f6473206c656e67746820617265206e6f7420657175616c00000000000000000060648201526084016101a2565b858214610dc85760405162461bcd60e51b815260206004820152603960248201527f746f6b656e416464726573736573206c656e67746820616e642072656369706960448201527f656e7473206c656e67746820617265206e6f7420657175616c0000000000000060648201526084016101a2565b60005b81811015610e3457610e1089898984818110610de957610de961165d565b9050602002016020810190610dfe91906119b3565b88888581811061017a5761017a61165d565b610e2c5760405162461bcd60e51b81526004016101a290611673565b600101610dcb565b5060005b81811015610f2f57878782818110610e5257610e5261165d565b9050602002016020810190610e6791906119b3565b6001600160a01b03166342842e0e30868685818110610e8857610e8861165d565b9050602002016020810190610e9d91906119b3565b898986818110610eaf57610eaf61165d565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b50505050610f288160010190565b9050610e38565b507f1bbbe50d65a9fe65cca22ba5288854f07891b76bead3ef908a99ea9cc9bc3289878787878787604051610ccb96959493929190611a15565b60008381805b828110156110375773__$7f0f8de4978e89001c10ba53aee4a3ea4c$__63a2cfdc9b8a8a8a85818110610fa457610fa461165d565b90506020020135898986818110610fbd57610fbd61165d565b905061010002016040518463ffffffff1660e01b8152600401610fe293929190611a5e565b602060405180830381865af4158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611023919061180b565b61102d908361183a565b9150600101610f6f565b50875461010090046001600160401b031660000361107757875468ffffffffffffffff001916610100426001600160401b031602178855611077886110e4565b600a88015464010000000090046001600160401b031660000361109e5761109e8842611270565b7fa61682c8af8d07fa57e991d4af5b406f1f5fb8bceb91a1bcc13c6616eab29ddb8787836040516110d193929190611a82565b60405180910390a1979650505050505050565b60038101546001600160a01b0316806110fb575050565b6000816001600160a01b0316639b52fe336040518163ffffffff1660e01b8152600401602060405180830381865afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f919061180b565b83549091506001600160401b0361010090910481169082161580159061118e57506000816001600160401b0316115b156111c657816001600160401b0316816001600160401b031611156111bc576111b78482611270565b6111c6565b6111c68483611270565b50505050565b8254600090815b8181101561126257846001600160a01b03168682815481106111f7576111f761165d565b60009182526020909120600290910201546001600160a01b031614801561124057508386828154811061122c5761122c61165d565b906000526020600020906002020160010154145b1561125a5761124f86826112d6565b600192505050611269565b6001016111d3565b5060009150505b9392505050565b600a820180546bffffffffffffffff0000000019166401000000006001600160401b038416908102919091179091556040519081527faa8cf603b3be24f79f673495c449aa3a2fcec1f484210e1662a1374c3e7f33509060200160405180910390a15050565b815482906112e69060019061186a565b815481106112f6576112f661165d565b90600052602060002090600202018282815481106113165761131661165d565b60009182526020909120825460029092020180546001600160a01b0319166001600160a01b03909216919091178155600191820154910155815482908061135f5761135f611aa6565b60008281526020812060026000199093019283020180546001600160a01b03191681556001015590555050565b508054600082556002029060005260206000209081019061015491905b808211156113d457600081556001810180546bffffffffffffffffffffffff191690556002016113a9565b5090565b6000602082840312156113ea57600080fd5b5035919050565b80356001600160a01b038116811461140857600080fd5b919050565b60008083601f84011261141f57600080fd5b5081356001600160401b0381111561143657600080fd5b6020830191508360208260051b850101111561145157600080fd5b9250929050565b60008060008060006080868803121561147057600080fd5b85359450611480602087016113f1565b935061148e604087016113f1565b925060608601356001600160401b038111156114a957600080fd5b6114b58882890161140d565b969995985093965092949392505050565b6000806000806000606086880312156114de57600080fd5b8535945060208601356001600160401b03808211156114fc57600080fd5b61150889838a0161140d565b9096509450604088013591508082111561152157600080fd5b818801915088601f83011261153557600080fd5b81358181111561154457600080fd5b8960208260081b850101111561155957600080fd5b9699959850939650602001949392505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156115ad57845183529383019391830191600101611591565b5090979650505050505050565b60008060008060008060006080888a0312156115d557600080fd5b8735965060208801356001600160401b03808211156115f357600080fd5b6115ff8b838c0161140d565b909850965060408a013591508082111561161857600080fd5b6116248b838c0161140d565b909650945060608a013591508082111561163d57600080fd5b5061164a8a828b0161140d565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fd5b60208082526028908201527f53656375726974697a6174696f6e506f6f6c3a20417373657420646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b81835260006001600160fb1b038311156116d457600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0385811682528416602082015260606040820181905260009061171a90830184866116bb565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b80356002811061140857600080fd5b6002811061176757634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038061177d836113f1565b1683528061178d602084016113f1565b1660208401525060408101356040830152606081013560608301526080810135608083015260a081013560a083015260c081013560ff811681146117d057600080fd5b60ff1660c08301526117e460e0820161173a565b6117f160e0840182611749565b505050565b8281526101208101611269602083018461176b565b60006020828403121561181d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561184d5761184d611824565b92915050565b808202811582820484141761184d5761184d611824565b8181038181111561184d5761184d611824565b60006020828403121561188f57600080fd5b813563ffffffff8116811461126957600080fd5b9586526c077726974654f666647726f757609c1b602087015263ffffffff94851660408701529284166060860152908316608085015290911660a083015260c082015260e00190565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156119a657815463ffffffff808216865281881c81168887015281871c811687870152606082811c821690870152608082811c82169087015260a082811c82169087015260c082811c82169087015260e091821c9186019190915260018084015480831661010088015280891c8316610120880152871c9091166101408601526101609094019360029092019101611910565b5091979650505050505050565b6000602082840312156119c557600080fd5b611269826113f1565b8183526000602080850194508260005b85811015611a0a576001600160a01b036119f7836113f1565b16875295820195908201906001016119de565b509495945050505050565b606081526000611a2960608301888a6119ce565b8281036020840152611a3c8187896116bb565b90508281036040840152611a518185876119ce565b9998505050505050505050565b838152602081018390526101408101611a7a604083018461176b565b949350505050565b604081526000611a966040830185876116bb565b9050826020830152949350505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ca499d03b5657f6229035cb3cf9c3b2c9a5fbfe37e2c5d045f2e99a90145abe964736f6c63430008130033",
  "libraries": {
    "PoolNAVLogic": "0x0EEA42c19b03A8A53EF46c8cD4D5a7CabD6a0557"
  },
  "devdoc": {
    "author": "Untangled Team",
    "kind": "dev",
    "methods": {},
    "title": "Untangled's SecuritizationPoolAsset contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provides pool's asset related functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}