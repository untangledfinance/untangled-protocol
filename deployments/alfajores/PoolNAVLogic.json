{
  "address": "0x1eF145DFdB059e44aD082a4df1dF298456f9bceE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "futureValue",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "risk",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termStartUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termEndUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum UnpackLoanParamtersLib.AmortizationUnitType",
              "name": "amortizationUnitType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "termLengthInAmortizationUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.NFTDetails",
          "name": "nftdetails",
          "type": "tuple"
        }
      ],
      "name": "AddLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate_",
          "type": "uint256"
        }
      ],
      "name": "SetLoanMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "risk",
          "type": "uint256"
        }
      ],
      "name": "UpdateAssetRiskScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "writeOffGroupsIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "override_",
          "type": "bool"
        }
      ],
      "name": "WriteOff",
      "type": "event"
    }
  ],
  "transactionHash": "0x5635a728a5dd2fc261230abcdb39aa99a0232e064cb5544886fca3bac6ae7b83",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0x1eF145DFdB059e44aD082a4df1dF298456f9bceE",
    "transactionIndex": 0,
    "gasUsed": "3349926",
    "logsBloom": "0x
    "blockHash": "0x02321217e852fc5bfec8bc8d5f3b505f8620a1c68f493417e92e5ca72fb833eb",
    "transactionHash": "0x5635a728a5dd2fc261230abcdb39aa99a0232e064cb5544886fca3bac6ae7b83",
    "logs": [],
    "blockNumber": 24902401,
    "cumulativeGasUsed": "3349926",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d74ce3ac52532bb456b599bdc8ee57ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"futureValue\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"risk\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termStartUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum UnpackLoanParamtersLib.AmortizationUnitType\",\"name\":\"amortizationUnitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.NFTDetails\",\"name\":\"nftdetails\",\"type\":\"tuple\"}],\"name\":\"AddLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate_\",\"type\":\"uint256\"}],\"name\":\"SetLoanMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"name\":\"UpdateAssetRiskScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"writeOffGroupsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"override_\",\"type\":\"bool\"}],\"name\":\"WriteOff\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"kind\":\"dev\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"params\":{\"name\":\"name of the parameter\",\"value\":\"new value of the parameter\"}},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"name\":\"name of the parameter group\",\"overdueDays_\":\"the number of days after which a loan is considered overdue\",\"writeOffPercentage_\":\"the write off rate in percent\"}},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"params\":{\"amounts\":\"the amounts repaid\",\"loans\":\"the ids of the loan\"}},\"writeOff(DataTypes.Storage storage,uint256)\":{\"params\":{\"loan\":\"the id of the loan\"}}},\"title\":\"Untangled's SecuritizaionPoolNAV contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"getExpectedLoanvalue(DataTypes.Storage storage,DataTypes.LoanEntry)\":{\"notice\":\"UTILITY FUNCTION \"},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"notice\":\"repay updates the NAV for a new repaid loan\"},\"writeOff(DataTypes.Storage storage,uint256)\":{\"notice\":\"writeOff writes off a loan if it is overdue\"}},\"notice\":\"Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/PoolNAVLogic.sol\":\"PoolNAVLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        SENIOR_TOKEN_MANAGER,\\r\\n        JUNIOR_TOKEN_MANAGER,\\r\\n        EPOCH_EXECUTOR,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19d48a27b3b35d91fb4a5e19a2cfbd7ad5aea8bacc153fd615912892730799d2\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\n\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\n\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\n\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct NoteToken {\\r\\n        address poolAddress;\\r\\n        address noteTokenAddress;\\r\\n        uint256 balance;\\r\\n        uint256 apy;\\r\\n    }\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        uint256 debtCeiling;\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address[] tokenAssetAddresses;\\r\\n        mapping(address => bool) existsTokenAssetAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        address beneficiary;\\r\\n        uint256 protocolFee;\\r\\n        uint256 earlyExitFee;\\r\\n        uint256 exitTimestamp;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        // for base (sell-loan) operation\\r\\n        uint256 paidPrincipalAmountSOT;\\r\\n        uint256 interestRateSOT; // Annually, support 4 decimals num\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n\\r\\n        uint256 loanCount;\\r\\n        // loan => loan principal\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        // sum of loan principal\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf38431a3efe4b9f943c42927052044840498329e7eb06aa0a8bbbe0cbae9068\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport './Math.sol';\\r\\n\\r\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\r\\nlibrary Discounting{\\r\\n    /// @notice calculates the discount for a given loan\\r\\n    /// @param discountRate the discount rate\\r\\n    /// @param fv the future value of the loan\\r\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @return result discount for the loan\\r\\n    function calcDiscount(\\r\\n        uint256 discountRate,\\r\\n        uint256 fv,\\r\\n        uint256 normalizedBlockTimestamp,\\r\\n        uint256 maturityDate\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\r\\n    /// @param loanInterestRate the interest rate of the loan\\r\\n    /// @param amount of the loan (principal)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\r\\n    /// @return fv future value of the loan\\r\\n    function calcFutureValue(\\r\\n        uint256 loanInterestRate,\\r\\n        uint256 amount,\\r\\n        uint256 maturityDate,\\r\\n        uint256 recoveryRatePD\\r\\n    ) internal view returns (uint256 fv) {\\r\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\r\\n        uint256 timeRemaining = 0;\\r\\n        if (maturityDate > nnow) {\\r\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\r\\n        }\\r\\n\\r\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\r\\n    }\\r\\n\\r\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\r\\n    /// @param x the first value (minuend)\\r\\n    /// @param y the second value (subtrahend)\\r\\n    /// @return result result of the subtraction\\r\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (y > x) {\\r\\n            return 0;\\r\\n        }\\r\\n        return Math.safeSub(x, y);\\r\\n    }\\r\\n\\r\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\r\\n    /// @param timestamp the timestamp which should be normalized\\r\\n    /// @return nTimestamp normalized timestamp\\r\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\r\\n        return (1 days) * (timestamp / (1 days));\\r\\n    }\\r\\n\\r\\n    /// @notice rpow peforms a math pow operation with fixed point number\\r\\n    /// adopted from ds-math\\r\\n    /// @param x the base for the pow operation\\r\\n    /// @param n the exponent for the pow operation\\r\\n    /// @param base the base of the fixed point number\\r\\n    /// @return z the result of the pow operation\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd714875aff75d76f628985cd29220e1ec81f30807eb54fd1f1e72461d46e0f7e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// tinlake-math/math.sol -- Tinlake Math\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Math {\\r\\n    uint256 constant ONE = 10 ** 27;\\r\\n\\r\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'safe-add-failed');\\r\\n    }\\r\\n\\r\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'safe-sub-failed');\\r\\n    }\\r\\n\\r\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\r\\n    }\\r\\n\\r\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x / y;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = safeMul(x, y) / ONE;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        // always rounds up\\r\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5da55cb6423fc2810924e3ebea355caae8b5108c280fd3cba416e30083d8526f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97c5987f1d2bc096faf1fe6c185ce9efe919b46b47508dd500a0bd16a5d9d0e9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General internal License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General internal License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General internal License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary GenericLogic {\\r\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\r\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\r\\n    event IncreaseCapitalReserve(uint256 increasingAmount, uint256 newCapitalReserve);\\r\\n    event DecreaseCapitalReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseIncomeReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n\\r\\n    /** GETTER */\\r\\n    /// @notice getter function for the maturityDate\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return maturityDate_ the maturityDate of the nft\\r\\n    function maturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nft_\\r\\n    ) internal view returns (uint256 maturityDate_) {\\r\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the risk group\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return risk_ the risk group of the nft\\r\\n\\r\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\r\\n        return uint256(_poolStorage.details[nft_].risk);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the nft value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return nftValue_ the value of the nft\\r\\n\\r\\n    /// @notice getter function for the future value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return fv_ future value of the loan\\r\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\r\\n        return uint256(_poolStorage.details[nft_].futureValue);\\r\\n    }\\r\\n\\r\\n    // function discountRate() internal view  returns (uint256) {\\r\\n    //     return uint256(_getStorage().discountRate);\\r\\n    // }\\r\\n\\r\\n    /// @notice getter function for the recovery rate PD\\r\\n    /// @param riskID id of a risk group\\r\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\r\\n    function recoveryRatePD(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 riskID,\\r\\n        uint256 termLength\\r\\n    ) internal view returns (uint256 recoveryRatePD_) {\\r\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\r\\n        return\\r\\n            Math.ONE -\\r\\n            (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\r\\n            (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the borrowed amount\\r\\n    /// @param loan id of a loan\\r\\n    /// @return borrowed_ borrowed amount of the loan\\r\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\r\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\r\\n    }\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    // TODO have to use modifier in main contract\\r\\n    function getRiskScoreByIdx(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 idx\\r\\n    ) internal view returns (DataTypes.RiskScore memory) {\\r\\n        if (idx == 0 || riskScores.length == 0) {\\r\\n            // Default risk score\\r\\n            return\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: 0,\\r\\n                    advanceRate: 1000000,\\r\\n                    penaltyRate: 0,\\r\\n                    interestRate: 0,\\r\\n                    probabilityOfDefault: 0,\\r\\n                    lossGivenDefault: 0,\\r\\n                    writeOffAfterGracePeriod: 0,\\r\\n                    gracePeriod: 0,\\r\\n                    collectionPeriod: 0,\\r\\n                    writeOffAfterCollectionPeriod: 0,\\r\\n                    discountRate: 0\\r\\n                });\\r\\n        }\\r\\n        // Because risk score upload = risk score index onchain + 1\\r\\n        idx = idx - 1;\\r\\n        return riskScores[idx];\\r\\n    }\\r\\n\\r\\n    /// @notice converts a uint256 to uint128\\r\\n    /// @param value the value to be converted\\r\\n    /// @return converted value to uint128\\r\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\r\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n\\r\\n    /// @notice returns if a loan is written off\\r\\n    /// @param loan the id of the loan\\r\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\r\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV\\r\\n    /// @return nav_ current NAV\\r\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\r\\n    /// @return totalDiscount the present value of the loans\\r\\n    /// @return overdue the present value of the overdue loans\\r\\n    /// @return writeOffs the present value of the written off loans\\r\\n    function currentPVs(\\r\\n        DataTypes.Storage storage _poolStorage\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 latestDiscount;\\r\\n        uint256 overdueLoans;\\r\\n        uint256 discountRate;\\r\\n        uint256 lastNAVUpdate;\\r\\n        {\\r\\n            latestDiscount = _poolStorage.latestDiscount;\\r\\n            overdueLoans = _poolStorage.overdueLoans;\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n        }\\r\\n        if (latestDiscount == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // find all new overdue loans since the last update\\r\\n        // calculate the discount of the overdue loans which is needed\\r\\n        // for the total discount calculation\\r\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\r\\n            uint256 b = _poolStorage.buckets[i];\\r\\n            if (b != 0) {\\r\\n                errPV = Math.safeAdd(\\r\\n                    errPV,\\r\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\r\\n                );\\r\\n                overdue = Math.safeAdd(overdue, b);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\r\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\r\\n                errPV\\r\\n            ),\\r\\n            // current overdue loans not written off\\r\\n            Math.safeAdd(overdueLoans, overdue),\\r\\n            // current write-offs loans\\r\\n            currentWriteOffs(_poolStorage)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function currentAV(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 tokenId\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 _currentWriteOffs = 0;\\r\\n        uint256 discountRate;\\r\\n        uint256 latestDiscountOfNavAssetsID;\\r\\n        uint256 lastNAVUpdate;\\r\\n        uint256 overdueLoansOfNavAssetsID;\\r\\n        {\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\r\\n        }\\r\\n\\r\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\r\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\r\\n            _currentWriteOffs = Math.rmul(\\r\\n                debt(_poolStorage, uint256(tokenId)),\\r\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (latestDiscountOfNavAssetsID == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // loan is overdue since lastNAVUpdate\\r\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\r\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\r\\n            uint256 b = futureValue(_poolStorage, tokenId);\\r\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\r\\n            overdue = b;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(\\r\\n                    latestDiscountOfNavAssetsID,\\r\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\r\\n                ),\\r\\n                errPV\\r\\n            ),\\r\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\r\\n            _currentWriteOffs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the sum of all write off loans\\r\\n    /// @return sum of all write off loans\\r\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\r\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            // multiply writeOffGroupDebt with the writeOff rate\\r\\n\\r\\n            sum = Math.safeAdd(\\r\\n                sum,\\r\\n                Math.rmul(\\r\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\r\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV and updates the state\\r\\n    /// @return nav_ current NAV\\r\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n\\r\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\r\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\r\\n\\r\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\r\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\r\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\r\\n        }\\r\\n\\r\\n        _poolStorage.overdueLoans = overdue;\\r\\n        _poolStorage.latestDiscount = totalDiscount;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\r\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice re-calculates the nav in a non-optimized way\\r\\n    ///  the method is not updating the NAV to latest block.timestamp\\r\\n    /// @return nav_ current NAV\\r\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        // reCalcTotalDiscount\\r\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\r\\n        /// @return latestDiscount_ returns the total discount of the active loans\\r\\n        uint256 latestDiscount_ = 0;\\r\\n        for (uint256 loanID = 1; loanID < _poolStorage.loanCount; loanID++) {\\r\\n            bytes32 nftID_ = nftID(loanID);\\r\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\r\\n                _poolStorage.discountRate,\\r\\n                futureValue(_poolStorage, nftID_),\\r\\n                _poolStorage.lastNAVUpdate,\\r\\n                maturityDate_\\r\\n            );\\r\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\r\\n        }\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestDiscount_,\\r\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\r\\n        );\\r\\n        _poolStorage.latestDiscount = latestDiscount_;\\r\\n\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the nftID for the underlying collateral nft\\r\\n    /// @param loan the loan id\\r\\n    /// @return nftID_ the nftID of the loan\\r\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\r\\n        return bytes32(loan);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the current valid write off group of a loan\\r\\n    /// @param loan the loan id\\r\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\r\\n    function currentValidWriteOffGroup(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 writeOffGroup_) {\\r\\n        bytes32 nftID_ = nftID(loan);\\r\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\r\\n\\r\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\r\\n\\r\\n        uint128 lastValidWriteOff = type(uint128).max;\\r\\n        uint128 highestOverdueDays = 0;\\r\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\r\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\r\\n            if (\\r\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\r\\n                overdueDays >= highestOverdueDays &&\\r\\n                nnow >= maturityDate_ + overdueDays * 1 days\\r\\n            ) {\\r\\n                lastValidWriteOff = i;\\r\\n                highestOverdueDays = overdueDays;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // returns type(uint128).max if no write-off group is valid for this loan\\r\\n        return lastValidWriteOff;\\r\\n    }\\r\\n\\r\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\r\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].chi,\\r\\n                _poolStorage.rates[rate_].ratePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].penaltyChi,\\r\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function debtWithChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 chi,\\r\\n        uint256 penaltyChi\\r\\n    ) internal view returns (uint256 loanDebt) {\\r\\n        if (penaltyChi == 0) {\\r\\n            return toAmount(chi, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chiAndPenaltyChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        chi = _poolStorage.rates[rate_].chi;\\r\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\r\\n    }\\r\\n\\r\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\r\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\r\\n\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].penaltyChi,\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, pie_);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\r\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\r\\n        // rate category has to be initiated\\r\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\r\\n        _poolStorage.loanRates[loan] = rate;\\r\\n        emit SetRate(nftID(loan), rate);\\r\\n    }\\r\\n\\r\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\r\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\r\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\r\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\r\\n        }\\r\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\r\\n        drip(_poolStorage, currentRate);\\r\\n        drip(_poolStorage, newRate);\\r\\n        uint256 pie_ = _poolStorage.pie[loan];\\r\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\r\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\r\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\r\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\r\\n        _poolStorage.loanRates[loan] = newRate;\\r\\n        emit ChangeRate(nftID(loan), newRate);\\r\\n    }\\r\\n\\r\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\r\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\r\\n    }\\r\\n\\r\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            (uint256 chi, ) = compounding(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated,\\r\\n                _poolStorage.rates[rate].pie\\r\\n            );\\r\\n            _poolStorage.rates[rate].chi = chi;\\r\\n            if (\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\r\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\r\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\r\\n            ) {\\r\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\r\\n                    ? _poolStorage.rates[rate].lastUpdated\\r\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\r\\n                (uint256 penaltyChi, ) = compounding(\\r\\n                    _poolStorage.rates[rate].penaltyChi,\\r\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                    lastUpdated_,\\r\\n                    _poolStorage.rates[rate].pie\\r\\n                );\\r\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\r\\n            }\\r\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Interest functions\\r\\n    // @notice This function provides compounding in seconds\\r\\n    // @param chi Accumulated interest rate over time\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated When the interest rate was last updated\\r\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\r\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\r\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\r\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\r\\n        require(chi != 0);\\r\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\r\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\r\\n    }\\r\\n\\r\\n    // @notice This function charge interest on a interestBearingAmount\\r\\n    // @param interestBearingAmount is the interest bearing amount\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated last time the interest has been charged\\r\\n    // @return interestBearingAmount + interest\\r\\n    function chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated\\r\\n    ) internal view returns (uint) {\\r\\n        if (block.timestamp >= lastUpdated) {\\r\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        }\\r\\n        return interestBearingAmount;\\r\\n    }\\r\\n\\r\\n    function _chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated,\\r\\n        uint current\\r\\n    ) internal pure returns (uint) {\\r\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\r\\n    }\\r\\n\\r\\n    // convert pie to debt/savings amount\\r\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\r\\n        return Math.rmul(_pie, chi);\\r\\n    }\\r\\n\\r\\n    // convert debt/savings amount to pie\\r\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\r\\n        return Math.rdivup(amount, chi);\\r\\n    }\\r\\n\\r\\n    function getAsset(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 agreementId\\r\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\r\\n        return _poolStorage.details[agreementId];\\r\\n    }\\r\\n\\r\\n    function reserve(DataTypes.Storage storage _poolStorage) internal view returns (uint256) {\\r\\n        return Math.safeAdd(_poolStorage.capitalReserve, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    function increaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 amount) internal {\\r\\n        _poolStorage.capitalReserve = Math.safeAdd(_poolStorage.capitalReserve, amount);\\r\\n        emit IncreaseCapitalReserve(amount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    /// @param amortizationUnitType AmortizationUnitType enum\\r\\n    /// @return the corresponding length of the unit in seconds\\r\\n    function _getAmortizationUnitLengthInSeconds(\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\r\\n    ) private pure returns (uint256) {\\r\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\r\\n            return 1 minutes;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\r\\n            return 1 hours;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\r\\n            return 1 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\r\\n            return 7 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\r\\n            return 30 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\r\\n            return 365 days;\\r\\n        } else {\\r\\n            revert('Unknown amortization unit type.');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   Get parameters by Agreement ID (commitment hash)\\r\\n     */\\r\\n    function unpackParamsForAgreementID(\\r\\n        DataTypes.LoanEntry calldata loan\\r\\n    ) internal view returns (UnpackLoanParamtersLib.InterestParams memory params) {\\r\\n        // The principal amount denominated in the aforementioned token.\\r\\n        uint256 principalAmount;\\r\\n        // The interest rate accrued per amortization unit.\\r\\n        uint256 interestRate;\\r\\n        // The amortization unit in which the repayments installments schedule is defined.\\r\\n        uint256 rawAmortizationUnitType;\\r\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 gracePeriodInDays;\\r\\n\\r\\n        (\\r\\n            principalAmount,\\r\\n            interestRate,\\r\\n            rawAmortizationUnitType,\\r\\n            termLengthInAmortizationUnits,\\r\\n            gracePeriodInDays\\r\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\r\\n\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\r\\n            rawAmortizationUnitType\\r\\n        );\\r\\n\\r\\n        // Grant the real origination date\\r\\n        termLengthInAmortizationUnits =\\r\\n            (loan.expirationTimestamp - block.timestamp) /\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        // Calculate term length base on Amortization Unit and number\\r\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        return\\r\\n            UnpackLoanParamtersLib.InterestParams({\\r\\n                principalAmount: principalAmount,\\r\\n                interestRate: interestRate,\\r\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\r\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\r\\n                amortizationUnitType: amortizationUnitType,\\r\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\r\\n            });\\r\\n    }\\r\\n    function decreaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.capitalReserve >= currencyAmount, 'insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - currencyAmount;\\r\\n        emit DecreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.incomeReserve >= currencyAmount, 'insufficient balance of income reserve');\\r\\n        _poolStorage.incomeReserve = _poolStorage.incomeReserve - currencyAmount;\\r\\n        emit DecreaseIncomeReserve(currencyAmount, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    function setPot(DataTypes.Storage storage _poolStorage, address _pot) external {\\r\\n        require(_poolStorage.pot != _pot, 'SecuritizationPool: Same address with current pot');\\r\\n        _poolStorage.pot = _pot;\\r\\n\\r\\n        if (_pot == address(this)) {\\r\\n            require(\\r\\n                IERC20Upgradeable(_poolStorage.underlyingCurrency).approve(_pot, type(uint256).max),\\r\\n                'SecuritizationPool: Pot not approved'\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function disburse(DataTypes.Storage storage _poolStorage, address usr, uint256 currencyAmount) external {\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, usr, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function withdraw(DataTypes.Storage storage _poolStorage, address to, uint256 amount) public {\\r\\n        require(_poolStorage.capitalReserve >= amount, 'SecuritizationPool: insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - amount;\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, to, amount);\\r\\n        emit DecreaseCapitalReserve(amount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1027ea4569f38f0062682456e1d170eca5b9453a752100a832c4667c29ad5e18\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {GenericLogic} from './GenericLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolNAVLogic {\\r\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n\\r\\n    // events\\r\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\r\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\r\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\r\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n\\r\\n    function getExpectedLoanvalue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public view returns (uint256 principalAmount) {\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        principalAmount = (loanParam.principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n    }\\r\\n\\r\\n    function addLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public returns (uint256) {\\r\\n        bytes32 _tokenId = bytes32(loan);\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n\\r\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\r\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\r\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\r\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\r\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\r\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\r\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\r\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\r\\n\\r\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\r\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\r\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\r\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\r\\n\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        uint256 principalAmount = loanParam.principalAmount;\\r\\n        uint256 _convertedInterestRate;\\r\\n\\r\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n\\r\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\r\\n        _poolStorage.loanCount++;\\r\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\r\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n            // If interest rate is not set\\r\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n        }\\r\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\r\\n        GenericLogic.accrue(_poolStorage, loan);\\r\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\r\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\r\\n\\r\\n        // increase NAV\\r\\n        borrow(_poolStorage, loan, principalAmount);\\r\\n        _incDebt(_poolStorage, loan, principalAmount);\\r\\n\\r\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\r\\n\\r\\n        return principalAmount;\\r\\n    }\\r\\n\\r\\n    function setLoanMaturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\r\\n\\r\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\r\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\r\\n        );\\r\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter\\r\\n    /// @param value new value of the parameter\\r\\n\\r\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\r\\n        if (name == 'discountRate') {\\r\\n            uint256 oldDiscountRate = _poolStorage.discountRate;\\r\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            // the nav needs to be re-calculated based on the new discount rate\\r\\n            // no need to recalculate it if initialized the first time\\r\\n            if (oldDiscountRate != 0) {\\r\\n                GenericLogic.reCalcNAV(_poolStorage);\\r\\n            }\\r\\n        } else {\\r\\n            revert('unknown config parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter group\\r\\n    /// @param writeOffPercentage_ the write off rate in percent\\r\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\r\\n\\r\\n    function file(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 name,\\r\\n        uint256 rate_,\\r\\n        uint256 writeOffPercentage_,\\r\\n        uint256 overdueDays_,\\r\\n        uint256 penaltyRate_,\\r\\n        uint256 riskIndex\\r\\n    ) public {\\r\\n        if (name == 'writeOffGroup') {\\r\\n            uint256 index = _poolStorage.writeOffGroups.length;\\r\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\r\\n            uint256 _convertedPenaltyRate = Math.ONE +\\r\\n                (Math.ONE * penaltyRate_ * rate_) /\\r\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\r\\n            _poolStorage.writeOffGroups.push(\\r\\n                DataTypes.WriteOffGroup(\\r\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\r\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\r\\n                    GenericLogic.toUint128(riskIndex)\\r\\n                )\\r\\n            );\\r\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\r\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\r\\n        } else {\\r\\n            revert('unknown name');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file manages different state configs for the pile\\r\\n    /// only a ward can call this function\\r\\n    /// @param what what config to change\\r\\n    /// @param rate the interest rate group\\r\\n    /// @param value the value to change\\r\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\r\\n        if (what == 'rate') {\\r\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].chi == 0) {\\r\\n                _poolStorage.rates[rate].chi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n            _poolStorage.rates[rate].ratePerSecond = value;\\r\\n        } else if (what == 'penalty') {\\r\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\r\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n\\r\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\r\\n        } else {\\r\\n            revert('unknown parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice borrow updates the NAV for a new borrowed loan\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param amount the amount borrowed\\r\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\r\\n    function borrow(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 amount\\r\\n    ) private returns (uint256 navIncrease) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\r\\n\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // uint256 beforeNAV = latestNAV;\\r\\n\\r\\n        // calculate amount including fixed fee if applicatable\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n\\r\\n        // calculate future value FV\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            amount,\\r\\n            maturityDate_,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\r\\n        );\\r\\n\\r\\n        // add future value to the bucket of assets with the same maturity date\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n        // increase borrowed amount for future ceiling computations\\r\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\r\\n        );\\r\\n\\r\\n        // return increase NAV amount\\r\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n\\r\\n        return navIncrease;\\r\\n    }\\r\\n\\r\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\r\\n        _poolStorage.latestNAV = Discounting.secureSub(\\r\\n            _poolStorage.latestNAV,\\r\\n            Math.rmul(\\r\\n                amount,\\r\\n                GenericLogic.toUint128(\\r\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        decDebt(_poolStorage, loan, amount);\\r\\n    }\\r\\n\\r\\n    function _calcFutureValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 _debt,\\r\\n        uint256 _maturityDate\\r\\n    ) private view returns (uint256) {\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            _debt,\\r\\n            _maturityDate,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        return fv;\\r\\n    }\\r\\n\\r\\n    /// @notice repay updates the NAV for a new repaid loan\\r\\n    /// @param loans the ids of the loan\\r\\n    /// @param amounts the amounts repaid\\r\\n    function repayLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        uint256 numberOfLoans = loans.length;\\r\\n\\r\\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\\r\\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            uint256 loan = loans[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            // re-define: prevent stack too deep\\r\\n            DataTypes.Storage storage __poolStorage = _poolStorage;\\r\\n\\r\\n            GenericLogic.accrue(__poolStorage, loan);\\r\\n\\r\\n            if (nnow > __poolStorage.lastNAVUpdate) {\\r\\n                GenericLogic.calcUpdateNAV(__poolStorage);\\r\\n            }\\r\\n\\r\\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\\r\\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\\r\\n\\r\\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\\r\\n            if (amount > _currentDebt) {\\r\\n                amount = _currentDebt;\\r\\n            }\\r\\n\\r\\n            repayAmounts[i] = amount;\\r\\n            previousDebts[i] = _currentDebt;\\r\\n\\r\\n            // case 1: repayment of a written-off loan\\r\\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\\r\\n                // update nav with write-off decrease\\r\\n                _decreaseLoan(__poolStorage, loan, amount);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\\r\\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\r\\n            uint256 fvDecrease = preFV;\\r\\n\\r\\n            // prevent stack too deep\\r\\n            {\\r\\n                uint256 fv = 0;\\r\\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\r\\n                if (_debt != 0) {\\r\\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\\r\\n                    if (preFV >= fv) {\\r\\n                        fvDecrease = Math.safeSub(preFV, fv);\\r\\n                    } else {\\r\\n                        fvDecrease = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\\r\\n            }\\r\\n\\r\\n            // case 2: repayment of a loan before or on maturity date\\r\\n            if (maturityDate_ >= nnow) {\\r\\n                // remove future value decrease from bucket\\r\\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n                uint256 discountDecrease = Discounting.calcDiscount(\\r\\n                    __poolStorage.discountRate,\\r\\n                    fvDecrease,\\r\\n                    nnow,\\r\\n                    maturityDate_\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\\r\\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\\r\\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\\r\\n                    discountDecrease\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\\r\\n            } else {\\r\\n                // case 3: repayment of an overdue loan\\r\\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\\r\\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\\r\\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\\r\\n                    fvDecrease\\r\\n                );\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\\r\\n            }\\r\\n\\r\\n            decDebt(__poolStorage, loan, amount);\\r\\n            emit Repay(bytes32(loan), amount);\\r\\n        }\\r\\n        return (repayAmounts, previousDebts);\\r\\n    }\\r\\n\\r\\n    /// @notice writeOff writes off a loan if it is overdue\\r\\n    /// @param loan the id of the loan\\r\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\r\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\r\\n\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\r\\n\\r\\n        // can not write-off healthy loans\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\r\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\r\\n        // check the writeoff group based on the amount of days overdue\\r\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\r\\n\\r\\n        if (\\r\\n            writeOffGroupIndex_ < type(uint128).max &&\\r\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\r\\n        ) {\\r\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\r\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal function for the write off\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\r\\n    /// @param nftID_ the nftID of the loan\\r\\n    /// @param maturityDate_ the maturity date of the loan\\r\\n    function _writeOff(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 writeOffGroupIndex_,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        // Ensure we have an up to date NAV\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\r\\n\\r\\n        // first time written-off\\r\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\r\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\r\\n                // write off after the maturity date\\r\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\r\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\r\\n                    fv\\r\\n                );\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\r\\n            } else {\\r\\n                // write off before or on the maturity date\\r\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n                uint256 pv = Math.rmul(\\r\\n                    fv,\\r\\n                    Discounting.rpow(\\r\\n                        _poolStorage.discountRate,\\r\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\r\\n                        Math.ONE\\r\\n                    )\\r\\n                );\\r\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                    pv\\r\\n                );\\r\\n\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestNAV_,\\r\\n            Math.rmul(\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // no change in risk group\\r\\n        if (risk_ == GenericLogic.risk(_poolStorage, nftID_)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\r\\n\\r\\n        // update nav -> latestNAVUpdate = now\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\r\\n        // change to new rate interestRate immediately in pile if loan debt exists\\r\\n        uint256 loan = uint256(nftID_);\\r\\n        if (_poolStorage.pie[loan] != 0) {\\r\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\r\\n            uint256 _convertedInterestRate = Math.ONE +\\r\\n                (riskParam.interestRate * Math.ONE) /\\r\\n                (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n                // If interest rate is not set\\r\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n            }\\r\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\r\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\r\\n        }\\r\\n\\r\\n        // no currencyAmount borrowed yet\\r\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\r\\n        // New interest rate leads to a future value.\\r\\n        // recalculation required\\r\\n        {\\r\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n\\r\\n            uint256 navDecrease = Discounting.calcDiscount(_poolStorage.discountRate, fvDecrease, nnow, maturityDate_);\\r\\n\\r\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                navDecrease\\r\\n            );\\r\\n\\r\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\r\\n        }\\r\\n\\r\\n        // update latest NAV\\r\\n        // update latest Discount\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Discounting.calcFutureValue(\\r\\n                _rate.ratePerSecond,\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\r\\n                GenericLogic.recoveryRatePD(\\r\\n                    _poolStorage.riskScores,\\r\\n                    risk_,\\r\\n                    nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n        uint256 navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fvIncrease, nnow, maturityDate_);\\r\\n\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\r\\n\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\r\\n    }\\r\\n\\r\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n\\r\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        if (penaltyChi_ > 0) {\\r\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\r\\n        }\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e548101818b26d599f1295a1d10ee9ca612241ec3025a8d3a7f1f52a1c11e03\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x613ba261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063a4571bbc11610065578063a4571bbc14610113578063a9eed69514610133578063b77604c514610146578063d580a21a1461016657600080fd5b80632f3e0ce01461008c57806356a5a299146100c3578063a2cfdc9b146100e5575b600080fd5b81801561009857600080fd5b506100ac6100a73660046135cf565b610186565b6040516100ba929190613684565b60405180910390f35b8180156100cf57600080fd5b506100e36100de3660046136a9565b610503565b005b8180156100f157600080fd5b506101056101003660046136e8565b610919565b6040519081526020016100ba565b81801561011f57600080fd5b506100e361012e36600461371f565b610cb5565b610105610141366004613741565b610eb5565b81801561015257600080fd5b506100e361016136600461376f565b610f15565b81801561017257600080fd5b506100e36101813660046136a9565b6111a2565b606080600061019442611275565b90508560008167ffffffffffffffff8111156101b2576101b26137bb565b6040519080825280602002602001820160405280156101db578160200160208202803683370190505b50905060008267ffffffffffffffff8111156101f9576101f96137bb565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b50905060005b838110156104f25760008b8b83818110610244576102446137d1565b90506020020135905060008a8a84818110610261576102616137d1565b90506020020135905060008e90506102798184611297565b80602001548811156102905761028e816112b7565b505b600061029c8285611373565b905060006102aa838661139a565b9050808411156102b8578093505b838887815181106102cb576102cb6137d1565b602002602001018181525050808787815181106102ea576102ea6137d1565b602002602001018181525050610300838661149d565b1561031a576103108386866114cf565b50505050506104e0565b60006103268487611567565b9050806000806103368589611586565b905080156103695761034a878a83896115d6565b91508184106103645761035d8483611586565b9250610369565b600092505b6103728261169c565b60008a8152601989016020526040902080546001600160801b0319166001600160801b039290921691909117905550508b8410610444576000848152601b860160205260409020546103c49082611586565b6000858152601b87016020526040812091909155601d8601546103e990838f88611709565b90506103f986601f015482611733565b601f87015560008881526022870160205260409020546104199082611733565b6000898152602288016020526040902055601e8601546104399082611733565b601e87015550610498565b610452856021015482611586565b602186015560008781526023860160205260409020546104729082611586565b6000888152602387016020526040902055601e8501546104929082611733565b601e8601555b6104a3858888611756565b60405186815287907f59454c2c3385a95399182e59da91521ee5621f0211b9f016ff08b2e8e5fc98439060200160405180910390a2505050505050505b806104ea816137fd565b915050610228565b50909a909950975050505050505050565b600061050e42611275565b60008481526019860160205260409020600101549091506001600160801b0316820361053a5750505050565b6105438261169c565b6000848152601986016020908152604090912060010180546001600160801b0319166001600160801b03939093169290921790915584015481111561058d5761058b846112b7565b505b60008381526014850160205260409020548390156106715760006105b486600101856118a7565b905060006105c56127106064613816565b6105d3906301e13380613816565b676765c793fa10079d601b1b836060015163ffffffff166105f49190613816565b6105fe919061382d565b61061390676765c793fa10079d601b1b61384f565b6000818152601389016020526040812060020154919250036106425761064287637261746560e01b8384611a57565b61064d878483611c50565b50606001516000858152601987016020526040902063ffffffff909116600e909101555b61067b8585611567565b600003610689575050505050565b60006106958686611373565b905060006106a38787611567565b905060006106b788601d0154838786611709565b6000848152601b8a0160205260409020549091506106d59083611586565b6000848152601b8a016020526040902055601f8801546106f59082611733565b601f89015560008781526022890160205260409020546107159082611733565b600088815260228a016020526040902055601e8801546107359082611733565b601e890155505060008281526015870160209081526040808320548352601389018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906107bf8885611e1b565b905061080b61080683604001516107d68b8861139a565b6107e08c8c611373565b6108018d6001018c8860c001518960e001516107fc9190613862565b611f58565b611ff9565b61169c565b600088815260198a016020526040812080546001600160801b0319166001600160801b0393909316929092179091556108448989611567565b905060006108588a601d0154838988611709565b6000868152601b8c0160205260409020549091506108769083612051565b6000868152601b8c016020526040902055601f8a01546108969082612051565b601f8b0155600089815260228b016020526040812080548392906108bb90849061384f565b9091555050601e8a01546108cf9082612051565b601e8b0155604080518a8152602081018a90527ff51d891f73afa0326444ca250f11a78ec4ede8d4beaf8c2cfe9f29d5f9e5629c910160405180910390a150505050505050505050565b60008281610926846120a1565b905061093860e0850160c08601613875565b6000838152601988016020908152604090912060010180546001600160801b03191660ff939093169290921790915561097390850185613898565b60008381526019880160209081526040918290206002810180546001600160a01b0319166001600160a01b03959095169490941790935560a08701356006909301929092556109c791908601908601613898565b600083815260198801602052604090206003810180546001600160a01b0319166001600160a01b039390931692909217909155606085013560048201556080850135600590910155610a20610100850160e086016138c1565b60008381526019880160205260409020600701805460ff191660018381811115610a4c57610a4c6138e2565b021790555060008281526019870160209081526040918290208287013560088201558351600982015590830151600a82015590820151600b8201556060820151600c909101805460ff19166001836005811115610aab57610aab6138e2565b0217905550608081015160008381526019880160205260408120600d81019290925560a0830151600e90920191909155610afa60018801610af260e0880160c08901613875565b60ff166118a7565b82519091506000610b0e6127106064613816565b6020840151610b239063ffffffff1684613816565b610b2d919061382d565b9150610b3c6127106064613816565b610b4a906301e13380613816565b676765c793fa10079d601b1b846060015163ffffffff16610b6b9190613816565b610b75919061382d565b610b8a90676765c793fa10079d601b1b61384f565b60168a018054600090815260248c01602052604081208890558154929350610bb1836137fd565b9190505550610bc589868660400151612179565b600081815260138a0160205260408120600201549003610bf257610bf289637261746560e01b8384611a57565b610bfd89898361225e565b610c078989611297565b600088815260178a016020526040902054610c229083612051565b600089815260178b0160205260409020556018890154610c429083612051565b60188a0155610c52898984612347565b50610c5e8989846125c9565b600085815260198a01602052604090819020905186917f22998f2397a6b1e965f5fdc5684d29ab2c2ebff824295de89aab9465b66822cd91610ca191869161391c565b60405180910390a250979650505050505050565b6000818152601a83016020526040902054600160801b900460ff1615610d185760405162461bcd60e51b815260206004820152601360248201527237b7363c96b0baba3416bbb934ba3296b7b33360691b60448201526064015b60405180910390fd5b806000610d258483611373565b905060008111610d6d5760405162461bcd60e51b81526020600482015260136024820152721b1bd85b8b591bd95ccb5b9bdd0b595e1a5cdd606a1b6044820152606401610d0f565b6000610d7842611275565b90506000610d868686611e1b565b90506000610da48760010183604001516001600160801b03166118a7565b9050828160e0015163ffffffff1685610dbd919061384f565b1115610e0b5760405162461bcd60e51b815260206004820152601b60248201527f6d617475726974792d646174652d696e2d7468652d66757475726500000000006044820152606401610d0f565b6000610e1788886126f1565b90506001600160801b0381108015610e60575080610e42676765c793fa10079d601b1b6103e8613816565b610e4c919061384f565b600088815260158a01602052604090205414155b15610eab57610e72888883898961285e565b60405160008152819087907fa0d657cd77a4a207fbc8f50dcd70ea7d5bb4a07cbb549bf7ec75a5768a30e6f99060200160405180910390a35b5050505050505050565b600080610ec1836120a1565b90506000610edc60018601610af260e0870160c08801613875565b9050610eeb6127106064613816565b60208201518351610f029163ffffffff1690613816565b610f0c919061382d565b95945050505050565b856c077726974654f666647726f757609c1b0361116257601c8701546000610f406127106064613816565b610f4e906301e13380613816565b610f63676765c793fa10079d601b1b89613816565b610f6d919061382d565b610f8290676765c793fa10079d601b1b61384f565b90506000610f936127106064613816565b610fa8676765c793fa10079d601b1b89613816565b610fb2919061382d565b610fc790676765c793fa10079d601b1b613862565b90506000610fd86127106064613816565b610fe56127106064613816565b610fef9190613816565b610ffd906301e13380613816565b8961101388676765c793fa10079d601b1b613816565b61101d9190613816565b611027919061382d565b61103c90676765c793fa10079d601b1b61384f565b9050600061104d620151808961382d565b90508b601c0160405180606001604052806110678661169c565b6001600160801b0316815260200161107e8461169c565b6001600160801b031681526020016110958961169c565b6001600160801b0390811690915282546001818101855560009485526020948590208451958501518416600160801b02958416959095176002909202909401908155604090920151919092018054919092166001600160801b0319919091161790556111298c637261746560e01b61112361111d676765c793fa10079d601b1b6103e8613816565b89612051565b87611a57565b6111588c6670656e616c747960c81b61115261111d676765c793fa10079d601b1b6103e8613816565b85611a57565b5050505050611199565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e206e616d6560a01b6044820152606401610d0f565b50505050505050565b816b646973636f756e745261746560a01b0361122857601d8301546111ca6127106064613816565b6111d8906301e13380613816565b6111ed676765c793fa10079d601b1b84613816565b6111f7919061382d565b61120c90676765c793fa10079d601b1b61384f565b601d85015580156112225761122084612a34565b505b50505050565b60405162461bcd60e51b815260206004820152601860248201527f756e6b6e6f776e20636f6e66696720706172616d6574657200000000000000006044820152606401610d0f565b505050565b6000611284620151808361382d565b6112919062015180613816565b92915050565b60008181526015830160205260409020546112b3908390612ae3565b5050565b6000806000806112c685612ca8565b92509250925060005b856016015481101561133057600081815260248701602052604081205490806112f88984612d96565b50600094855260238b01602090815260408087209290925560228c01905290932092909255506113299050816137fd565b90506112cf565b5060218501829055601f850183905561135261134c8484612051565b82612051565b601e86015561136042611275565b6020860155505050601e90910154919050565b6000818152601983016020526040902054600160801b90046001600160801b031692915050565b60008181526015830160209081526040808320548084526013860190925282206001810154600482015460059092015490919065ffffffffffff16421061144757600083815260138701602052604090206001810154600282015460059092015461140d929065ffffffffffff16612ebe565b60008481526013880160205260409020600481015460038201546005909201549294506114449290919065ffffffffffff16612ebe565b90505b8060000361147557600085815260148701602052604090205461146b908390612ede565b9350505050611291565b61146b81611498848960140160008a815260200190815260200160002054612ede565b612ede565b60006114b6676765c793fa10079d601b1b6103e8613816565b6000928352601593909301602052506040902054101590565b601e8301546115579061155283611544601c88016114fa676765c793fa10079d601b1b6103e8613816565b600089815260158b0160205260409020546115159190613862565b81548110611525576115256137d1565b60009182526020909120600290910201546001600160801b031661169c565b6001600160801b0316612ee6565b611733565b601e840155611270838383611756565b600090815260199190910160205260409020546001600160801b031690565b6000826115938382613862565b91508111156112915760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610d0f565b60008381526015850160209081526040808320548352601387018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152816116598787611e1b565b90506000611690836040015187876108018c60010187604001516001600160801b03168860c001518960e001516107fc9190613862565b98975050505050505050565b60006001600160801b038211156117055760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610d0f565b5090565b6000610f0c8461172e8761171d8688611586565b676765c793fa10079d601b1b612f08565b612fc6565b60008282111561174557506000611291565b61174f8383611586565b9392505050565b6000828152601584016020908152604080832054808452601387019092529091206005015465ffffffffffff1642146117ca5760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610d0f565b600081815260138501602052604090206004015480156117f1576117ee818461302e565b92505b600082815260138601602052604081206001015461180f908561302e565b600086815260148801602052604090205490915061182d9082611586565b600086815260148801602090815260408083209390935585825260138901905220546118599082611586565b6000848152601388016020526040902055846040518581527f9d36b5b661e3fc41681961cd76e4b5de0b5f8c5af42446cf86f291efa1363fe6906020015b60405180910390a2505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915281158061190c57508254155b15611972575060408051610160810182526000808252620f42406020830152918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152611291565b61197d600183613862565b9150828281548110611991576119916137d1565b600091825260209182902060408051610160810182526002909302909101805463ffffffff808216855264010000000080830482169686019690965268010000000000000000808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e085015260019091015480821661010085015293840481166101208401529204909116610140820152905092915050565b82637261746560e01b03611b345780600003611ab55760405162461bcd60e51b815260206004820152601c60248201527f726174652d7065722d7365636f6e642d63616e2d6e6f742d62652d30000000006044820152606401610d0f565b60008281526013850160205260408120600101549003611b0f5760008281526013850160205260409020676765c793fa10079d601b1b6001820155600501805465ffffffffffff19164265ffffffffffff16179055611b19565b611b198483612ae3565b60008281526013850160205260409020600201819055611222565b826670656e616c747960c81b03611c145780600003611b955760405162461bcd60e51b815260206004820152601f60248201527f70656e616c74792d7065722d7365636f6e642d63616e2d6e6f742d62652d30006044820152606401610d0f565b60008281526013850160205260408120600401549003611bef5760008281526013850160205260409020676765c793fa10079d601b1b6004820155600501805465ffffffffffff19164265ffffffffffff16179055611bf9565b611bf98483612ae3565b60008281526013850160205260409020600301819055611222565b60405162461bcd60e51b81526020600482015260116024820152703ab735b737bbb7103830b930b6b2ba32b960791b6044820152606401610d0f565b60008181526013840160205260408120600101549003611ca75760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610d0f565b611cbe676765c793fa10079d601b1b6103e8613816565b8110611cfb576000818152601384016020526040902060050180546bffffffffffff0000000000001916600160301b4265ffffffffffff16021790555b6000828152601584016020526040902054611d168482612ae3565b611d208483612ae3565b600083815260148501602090815260408083205484845260138801909252822060010154909190611d519083612ede565b6000848152601388016020526040902054909150611d6f9083611586565b6000848152601388016020526040808220929092558581522060010154611d96908261302e565b6000868152601488016020818152604080842085905588845260138b0182528320549289905252611dc691612051565b600085815260138801602090815260408083209390935587825260158901905220849055846040518581527f8e2ce1fcb819c387686609f23cdd597abcdd18b0a3bcf284394b65c74101f8c490602001611897565b611e236134cc565b600082815260198401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff1690811115611ece57611ece6138e2565b6001811115611edf57611edf6138e2565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff166005811115611f2857611f286138e2565b6005811115611f3957611f396138e2565b8152600d8201546020820152600e909101546040909101529392505050565b600080611f6585856118a7565b9050611f746127106064613816565b611f816127106064613816565b611f8b9190613816565b611f99906301e13380613816565b838260a0015163ffffffff16836080015163ffffffff16676765c793fa10079d601b1b611fc69190613816565b611fd09190613816565b611fda9190613816565b611fe4919061382d565b610f0c90676765c793fa10079d601b1b613862565b60008061200542611275565b905060008185111561201e5761201b8583611586565b90505b61204661204061203a8984676765c793fa10079d601b1b612f08565b88612ee6565b85612ee6565b979650505050505050565b60008261205e838261384f565b91508110156112915760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610d0f565b6120a9613550565b60008060008060006120be876040013561303a565b93985091965094509250905060008360058111156120de576120de6138e2565b90506120e98161305d565b6120f74260a08b0135613862565b612101919061382d565b9250600061210e8261305d565b6121189085613816565b90506040518060c001604052808881526020018a6080013581526020018a6080013583612145919061384f565b815260200183600581111561215c5761215c6138e2565b815260200185815260200187815250975050505050505050919050565b6121838383611567565b156121e55760405162461bcd60e51b815260206004820152602c60248201527f63616e2d6e6f742d6368616e67652d6d61747572697479446174652d6f75747360448201526b1d185b991a5b99cb5919589d60a21b6064820152608401610d0f565b6121f161080682611275565b60008381526019850160205260409081902080546001600160801b03938416600160801b029316929092179091555182907fe4cc80f41f018b5290a16d068ce1312611f47f682daaa056e36456c59f853d5a906122519084815260200190565b60405180910390a2505050565b6000828152601484016020526040902054156122ac5760405162461bcd60e51b815260206004820152600d60248201526c1b9bdb8b5e995c9bcb5919589d609a1b6044820152606401610d0f565b600081815260138401602052604081206001015490036123035760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610d0f565b60008281526015840160205260409020819055816040518281527f502a7eca8a181ab7f1fac839ea906869797df68c21326b477c0da6e7f962fbc990602001612251565b60008061235342611275565b90508360006123628783611373565b90508281116123be5760405162461bcd60e51b815260206004820152602260248201527f6d617475726974792d646174652d69732d6e6f742d696e2d7468652d66757475604482015261726560f01b6064820152608401610d0f565b86602001548311156123d5576123d3876112b7565b505b6000868152601588016020908152604080832054835260138a018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906124588989611e1b565b9050600061248f836040015189866108018e60010187604001516001600160801b03168860c001518960e001516107fc9190613862565b90506124a76108066124a18c88611567565b83612051565b600086815260198c016020908152604080832080546001600160801b0319166001600160801b039590951694909417909355868252601b8d01905220546124ee9082612051565b6000858152601b8c01602052604090205561252f6108066125298c8c6000908152601a9190910160205260409020546001600160801b031690565b8a612051565b60008a8152601a8c016020526040902080546001600160801b0319166001600160801b0392909216919091179055601d8a015461256e90828887611709565b965061257e8a601f015488612051565b601f8b0155600085815260228b016020526040812080548992906125a390849061384f565b9091555050601e8a01546125b79088612051565b601e8b01555050505050509392505050565b6000828152601584016020908152604080832054808452601387019092529091206005015465ffffffffffff16421461263d5760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610d0f565b600081815260138501602052604081206001015461265b908461302e565b60008581526014870160205260409020549091506126799082612051565b600085815260148701602090815260408083209390935584825260138801905220546126a59082612051565b6000838152601387016020526040902055836040518481527f025cdc0b70e4d52ce267700d2925d12f1f4046b82d6eea316cb83391813f1c479060200160405180910390a25050505050565b600081816126ff8583611373565b9050600061270c42611275565b9050600061271a8785611e1b565b905060006001826040015161272f9190613a04565b90506001600160801b036000805b601c8b01546001600160801b03821610156128475760008b601c01826001600160801b031681548110612772576127726137d1565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c601c01836001600160801b0316815481106127c1576127c16137d1565b60009182526020909120600160029092020101546001600160801b03161480156127fd5750826001600160801b0316816001600160801b031610155b801561282857506128118162015180613a2b565b612824906001600160801b03168961384f565b8710155b15612834578193508092505b508061283f81613a56565b91505061273d565b50506001600160801b031698975050505050505050565b600061286942611275565b9050856020015481111561288257612880866112b7565b505b601e860154612891878761149d565b6129ad5760006128a18886611567565b9050836128b18960200154611275565b1115612907576128c5886021015482611733565b602189015560008581526023890160205260409020546128e59082611733565b600086815260238a0160205260409020556129008282611733565b91506129ab565b6000848152601b890160205260409020546129229082611586565b6000858152601b8a016020526040812091909155601d89015461295c9083906129579061171d6129518a611275565b89611586565b612ee6565b905061296c89601f015482611733565b601f8a0155600086815260228a01602052604090205461298c9082611733565b600087815260228b0160205260409020556129a78382611733565b9250505b505b6129d98787876129ca676765c793fa10079d601b1b6103e8613816565b6129d4919061384f565b611c50565b612a2381612a1e6129ea8a8a61139a565b8a601c0189815481106129ff576129ff6137d1565b60009182526020909120600290910201546001600160801b0316612ee6565b612051565b87601e018190555050505050505050565b60008060015b8360160154811015612abb57806000612a538683611373565b90508560200154811015612a68575050612aa9565b6000612a8787601d0154612a7c8986611567565b896020015485611709565b9050612a938582612051565b6000938452602288016020526040909320555091505b80612ab3816137fd565b915050612a3a565b50612ad281612a1e85601e015486601f0154611586565b601e8401819055601f909301555090565b600081815260138301602052604090206005015465ffffffffffff1642106112b357600081815260138301602052604081206001810154600282015460058301549254612b389365ffffffffffff1690613176565b5060008381526013850160205260409020600181018290556003015490915015801590612b8657506000828152601384016020526040902060050154600160301b900465ffffffffffff1615155b8015612bb457506000828152601384016020526040902060050154600160301b900465ffffffffffff164210155b15612c7957600082815260138401602052604081206005015465ffffffffffff600160301b82048116911611612c0c576000838152601385016020526040902060050154600160301b900465ffffffffffff16612c29565b600083815260138501602052604090206005015465ffffffffffff165b6000848152601386016020526040812060048101546003820154915465ffffffffffff9490941694509192612c619291908590613176565b50600085815260138701602052604090206004015550505b50600090815260139190910160205260409020600501805465ffffffffffff19164265ffffffffffff16179055565b601f8101546021820154601d8301546020840154600093849384939192909190838503612cea57600083612cdb8a613211565b96509650965050505050612d8f565b600080612cf642611275565b9050825b81811015612d53576000818152601b8c0160205260409020548015612d3e57612d2f84612a1e836129578a61171d8989611586565b9350612d3b8a82612051565b99505b50612d4c816201518061384f565b9050612cfa565b50612d6f612d69876129578761171d8689611586565b83611733565b612d79868a612051565b612d828c613211565b9850985098505050505050505b9193909250565b601d8201546000828152602284016020908152604080832054828701546023880190935290832054929384938493849391612dd18a8a61149d565b15612e0a576000612de28b8b6126f1565b9050612e06612df18c8c61139a565b8c601c0183815481106129ff576129ff6137d1565b9550505b82600003612e2457600097509550929350612eb792505050565b600080612e3042611275565b90506000612e46612e418e8e611373565b611275565b9050848110158015612e5757508181105b15612e82576000612e688e8e611567565b9050612e7c816129578a61171d8787611586565b909a5092505b612e9d612e97876129578a61171d878b611586565b84611733565b612ea7858c612051565b899a509a509a5050505050505050505b9250925092565b6000814210612ed657612ed384848442613282565b93505b509192915050565b600061174f82845b6000676765c793fa10079d601b1b612efe848461329b565b61174f919061382d565b6000838015612fa857600184168015612f2357859250612f27565b8392505b50600283046002850494505b8415612fa2578586028687820414612f4a57600080fd5b81810181811015612f5a57600080fd5b8590049650506001851615612f97578583028387820414158715151615612f8057600080fd5b81810181811015612f9057600080fd5b8590049350505b600285049450612f33565b50612fbe565b838015612fb85760009250612fbc565b8392505b505b509392505050565b600080821161300a5760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610d0f565b81612efe61302385676765c793fa10079d601b1b61329b565b612a1e60028661382d565b600061174f82846132fd565b600080600080600061304b86613365565b939a9299509097509550909350915050565b600080826005811115613072576130726138e2565b0361307f5750603c919050565b6001826005811115613093576130936138e2565b036130a15750610e10919050565b60028260058111156130b5576130b56138e2565b036130c4575062015180919050565b60038260058111156130d8576130d86138e2565b036130e7575062093a80919050565b60048260058111156130fb576130fb6138e2565b0361310a575062278d00919050565b600582600581111561311e5761311e6138e2565b0361312e57506301e13380919050565b60405162461bcd60e51b815260206004820152601f60248201527f556e6b6e6f776e20616d6f7274697a6174696f6e20756e697420747970652e006044820152606401610d0f565b600080834210156131c95760405162461bcd60e51b815260206004820152601e60248201527f74696e6c616b652d6d6174682f696e76616c69642d74696d657374616d7000006044820152606401610d0f565b856000036131d657600080fd5b60006131e487878742613282565b9050806132036131f48387612ee6565b6131fe8a88612ee6565b611586565b925092505094509492505050565b6000805b601c83015481101561327c5761326882612a1e6132538685613244676765c793fa10079d601b1b6103e8613816565b61324e919061384f565b6133f5565b86601c0185815481106129ff576129ff6137d1565b915080613274816137fd565b915050613215565b50919050565b6000610f0c6132958561171d8686613862565b86612ee6565b60008115806132bf575082826132b18183613816565b92506132bd908361382d565b145b6112915760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610d0f565b60008082116133415760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610d0f565b81612efe61335a85676765c793fa10079d601b1b61329b565b612a1e856001611586565b6000808080806bffffffffffffffffffffffff60981b861662ffffff60801b8716600f607c1b88166f0ffffffffffffffffffffffff00000008916630ff000008a166133b28560986134b5565b6133bd8560806134b5565b6133c885607c6134b5565b6133d385601c6134b5565b6133de8560146134b5565b939f929e50909c509a509098509650505050505050565b600081815260138301602052604081206001810154600482015482546005909301549192909165ffffffffffff16421061349557600085815260138701602052604090206001810154600282015460059092015461345b929065ffffffffffff16612ebe565b60008681526013880160205260409020600481015460038201546005909201549295506134929290919065ffffffffffff16612ebe565b91505b816000036134a75761146b8382612ede565b61146b826114988584612ede565b60006134c2826002613b60565b61174f908461382d565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a08201905b815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000600581111561353c5761353c6138e2565b60008083601f84011261359557600080fd5b50813567ffffffffffffffff8111156135ad57600080fd5b6020830191508360208260051b85010111156135c857600080fd5b9250929050565b6000806000806000606086880312156135e757600080fd5b85359450602086013567ffffffffffffffff8082111561360657600080fd5b61361289838a01613583565b9096509450604088013591508082111561362b57600080fd5b5061363888828901613583565b969995985093965092949392505050565b600081518084526020808501945080840160005b838110156136795781518752958201959082019060010161365d565b509495945050505050565b6040815260006136976040830185613649565b8281036020840152610f0c8185613649565b6000806000606084860312156136be57600080fd5b505081359360208301359350604090920135919050565b6000610100828403121561327c57600080fd5b600080600061014084860312156136fe57600080fd5b833592506020840135915061371685604086016136d5565b90509250925092565b6000806040838503121561373257600080fd5b50508035926020909101359150565b600080610120838503121561375557600080fd5b8235915061376684602085016136d5565b90509250929050565b600080600080600080600060e0888a03121561378a57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161380f5761380f6137e7565b5060010190565b8082028115828204841417611291576112916137e7565b60008261384a57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611291576112916137e7565b81810381811115611291576112916137e7565b60006020828403121561388757600080fd5b813560ff8116811461174f57600080fd5b6000602082840312156138aa57600080fd5b81356001600160a01b038116811461174f57600080fd5b6000602082840312156138d357600080fd5b81356002811061174f57600080fd5b634e487b7160e01b600052602160045260246000fd5b60028110613908576139086138e2565b9052565b60068110613908576139086138e2565b82815281546001600160801b038082166020840152608091821c6040840152600184015416606083015260028301546001600160a01b039081169183019190915260038301541660a0820152600482015460c0820152600582015460e08201526006820154610100820152600782015461022082019060ff166139a36101208401826138f8565b5060088301546101408301526009830154610160830152600a830154610180830152600b8301546101a0830152600c83015460ff166139e66101c084018261390c565b50600d8301546101e0830152600e8301546102008301529392505050565b6001600160801b03828116828216039080821115613a2457613a246137e7565b5092915050565b6001600160801b03818116838216028082169190828114613a4e57613a4e6137e7565b505092915050565b60006001600160801b03808316818103613a7257613a726137e7565b6001019392505050565b600181815b80851115613ab7578160001904821115613a9d57613a9d6137e7565b80851615613aaa57918102915b93841c9390800290613a81565b509250929050565b600082613ace57506001611291565b81613adb57506000611291565b8160018114613af15760028114613afb57613b17565b6001915050611291565b60ff841115613b0c57613b0c6137e7565b50506001821b611291565b5060208310610133831016604e8410600b8410161715613b3a575081810a611291565b613b448383613a7c565b8060001904821115613b5857613b586137e7565b029392505050565b600061174f8383613abf56fea2646970667358221220f01ebb24b9ac71e7ef72159e4fb11e709ffe14cc7aaffc2444bba4d7aec8e20b64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Untangled Team",
    "kind": "dev",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "params": {
          "name": "name of the parameter",
          "value": "new value of the parameter"
        }
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "name": "name of the parameter group",
          "overdueDays_": "the number of days after which a loan is considered overdue",
          "writeOffPercentage_": "the write off rate in percent"
        }
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "params": {
          "amounts": "the amounts repaid",
          "loans": "the ids of the loan"
        }
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "params": {
          "loan": "the id of the loan"
        }
      }
    },
    "title": "Untangled's SecuritizaionPoolNAV contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "getExpectedLoanvalue(DataTypes.Storage storage,DataTypes.LoanEntry)": {
        "notice": "UTILITY FUNCTION "
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "notice": "repay updates the NAV for a new repaid loan"
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "notice": "writeOff writes off a loan if it is overdue"
      }
    },
    "notice": "Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}