{
  "address": "0xb61216c10cBdcf27b0d9482f28F46B8152DEB02E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipientWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ClaimCashRemain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "interestRateSOT",
          "type": "uint32"
        }
      ],
      "name": "StartCycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "UpdateDebtCeiling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_mintFirstLoss",
          "type": "uint32"
        }
      ],
      "name": "UpdateMintFirstLoss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdateOpeningBlockTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatePaidPrincipalAmountSOTByInvestor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "UpdateRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Configuration.NOTE_TOKEN_TYPE",
          "name": "noteType",
          "type": "uint8"
        }
      ],
      "name": "UpdateTGEAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "originatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "checkMinFirstLost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipientWallet",
          "type": "address"
        }
      ],
      "name": "claimCashRemain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "disburse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunctionSignatures",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasFinishedRedemption",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalAssetRepaidCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tgeAddress",
          "type": "address"
        },
        {
          "internalType": "enum Configuration.NOTE_TOKEN_TYPE",
          "name": "_noteType",
          "type": "uint8"
        }
      ],
      "name": "injectTGEAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "installExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateSOT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClosedState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDebtCeilingValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jotToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFirstLossCushion",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paidPrincipalAmountSOT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "paidPrincipalAmountSOTByInvestor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveUpdateTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondTGEAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minFirstLossCushion",
          "type": "uint32"
        }
      ],
      "name": "setMinFirstLossCushion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pot",
          "type": "address"
        }
      ],
      "name": "setPot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sotToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum ISecuritizationPoolStorage.CycleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssetRepaidCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03a5d4c5b543826cd81a716c47e167e345857fde147b1e8134ee5e067bcea337",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xb61216c10cBdcf27b0d9482f28F46B8152DEB02E",
    "transactionIndex": 0,
    "gasUsed": "3084161",
    "logsBloom": "0x
    "blockHash": "0x455876e1acedb2ecaa5f263aadc00eaf9cbc50f6dcdd092dfeb3434f18ee8f59",
    "transactionHash": "0x03a5d4c5b543826cd81a716c47e167e345857fde147b1e8134ee5e067bcea337",
    "logs": [],
    "blockNumber": 22370485,
    "cumulativeGasUsed": "3084161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "b18ef12ff8d032250515433cb8db68d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimCashRemain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"interestRateSOT\",\"type\":\"uint32\"}],\"name\":\"StartCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"UpdateDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_mintFirstLoss\",\"type\":\"uint32\"}],\"name\":\"UpdateMintFirstLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateOpeningBlockTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatePaidPrincipalAmountSOTByInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"UpdateRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Configuration.NOTE_TOKEN_TYPE\",\"name\":\"noteType\",\"type\":\"uint8\"}],\"name\":\"UpdateTGEAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkMinFirstLost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientWallet\",\"type\":\"address\"}],\"name\":\"claimCashRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunctionSignatures\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasFinishedRedemption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"increaseReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalAssetRepaidCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tgeAddress\",\"type\":\"address\"},{\"internalType\":\"enum Configuration.NOTE_TOKEN_TYPE\",\"name\":\"_noteType\",\"type\":\"uint8\"}],\"name\":\"injectTGEAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"installExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateSOT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClosedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebtCeilingValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFirstLossCushion\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidPrincipalAmountSOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"paidPrincipalAmountSOTByInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveUpdateTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondTGEAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minFirstLossCushion\",\"type\":\"uint32\"}],\"name\":\"setMinFirstLossCushion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pot\",\"type\":\"address\"}],\"name\":\"setPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ISecuritizationPoolStorage.CycleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetRepaidCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"decreaseReserve(uint256)\":{\"details\":\"trigger update reserve\"},\"disburse(address,uint256)\":{\"details\":\"Disburses a specified amount of currency to the given user.\",\"params\":{\"currencyAmount\":\"The amount of currency to disburse.\",\"usr\":\"The address of the user to receive the currency.\"}},\"increaseReserve(uint256)\":{\"details\":\"trigger update reserve when buy note token action happens\"},\"increaseTotalAssetRepaidCurrency(uint256)\":{\"details\":\"trigger update asset value repaid\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasFinishedRedemption()\":{\"notice\":\"checks if the redemption process has finished\"},\"injectTGEAddress(address,uint8)\":{\"notice\":\"injects the address of the Token Generation Event (TGE) and the associated token address\"},\"isClosedState()\":{\"notice\":\"checks if the contract is in a closed state\"},\"isDebtCeilingValid()\":{\"notice\":\"check current debt ceiling is valid\"},\"setDebtCeiling(uint256)\":{\"notice\":\"sets debt ceiling value\"},\"setMinFirstLossCushion(uint32)\":{\"notice\":\"sets mint first loss value\"},\"setPot(address)\":{\"notice\":\"sets the pot address for the contract\"},\"withdraw(address,uint256)\":{\"notice\":\"allows the originator to withdraw from reserve\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pool/SecuritizationTGE.sol\":\"SecuritizationTGE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb66b2285eab5f7766c538c326c1a0e86013487b1636177d595d1ce543fec43a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\\n    Initializable, ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721PausableUpgradeable\\n{\\n    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    function __ERC721PresetMinterPauserAutoId_init(string memory name, string memory symbol, string memory baseTokenURI) internal onlyInitializing {\\n        __ERC721_init_unchained(name, symbol);\\n        __Pausable_init_unchained();\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory, string memory, string memory baseTokenURI) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xa0045ea98f9c5c3b1656be3f78ce3e1adf2c046bf1ce6a8ae9062b411f117536\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/base/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\ninterface IPauseable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb9fa9e10983c48f77c29a5f0c61cbc6a8a75fcc1f8d9b0ee865e0c198553be13\",\"license\":\"AGPL-3.0-only\"},\"contracts/base/PauseableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is ContextUpgradeable {\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation =\\n        0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), 'Pausable: paused');\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), 'Pausable: not paused');\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xf0fc514900e6d0abdc9a5b9cce9efce0bc982ff7fe07f5d6d7797ab9009c136e\",\"license\":\"AGPL-3.0-only\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport '../libraries/Configuration.sol';\\n\\n/**\\n * @title Untangled's SecuritizationPool contract\\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\\n *  It provides functionalities for contract initialization, pausing, and access control.\\n * @author Untangled Team\\n */\\nabstract contract UntangledBase is\\n    Initializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n\\n    function isAdmin() public view virtual returns (bool) {\\n        return hasRole(OWNER_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\\n        _;\\n    }\\n\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __UntangledBase__init_unchained(owner);\\n    }\\n\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\n        if (owner == address(0)) owner = _msgSender();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(OWNER_ROLE, owner);\\n\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function getInitializedVersion() public view virtual returns (uint256) {\\n        return _getInitializedVersion();\\n    }\\n\\n    function pause() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8a0d19f00afb9a0fc723634a2e3cdbc12f406a007311e3eaf8b827fe86d74770\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ICrowdSale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ICrowdSale} from '../protocol/note-sale/crowdsale/ICrowdSale.sol';\\n\",\"keccak256\":\"0x84e899910d5e371fc025a6ee46a42c8a421ed85e067dcc2fddc1a054fa0b5aed\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IDistributionAssessor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IDistributionAssessor} from '../protocol/pool/IDistributionAssessor.sol';\\n\",\"keccak256\":\"0xa722bed810b431cf2b406ffb5de31e8e5498cea9513fd0ffb382aacf4df73321\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport {IGo} from '../protocol/IGo.sol';\\n\",\"keccak256\":\"0x8c23e75f638c2b09de7cfbac8be5e5382d2c0929fb0a0328b92b923eecc3a07e\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ILoanAssetToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ILoanAssetToken} from '../tokens/ERC721/ILoanAssetToken.sol';\\n\",\"keccak256\":\"0x2d5c4b26d7e408c0b93e17af891dc4ac78e6146097a56c434d5237eaac858393\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ILoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ILoanKernel} from '../protocol/loan/ILoanKernel.sol';\\n\",\"keccak256\":\"0x7163c60629348551c0f145835d83434d174f6ea3d7db0a24f81fd5c7482f0ac7\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ILoanRepaymentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../protocol/loan/ILoanRepaymentRouter.sol';\\n\",\"keccak256\":\"0x2c01530edc8a5307f79a051e28ae1c62c794a6ac4b71f65a6e96deaa7a61f053\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {INoteToken} from '../tokens/ERC20/INoteToken.sol';\\n\",\"keccak256\":\"0x9bd2c2f97fce8964a8ab21fa795d63dc868c88b38d4313e2f3862ff8e30ce0cf\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {INoteTokenFactory} from './../protocol/note-sale/fab/INoteTokenFactory.sol';\\n\",\"keccak256\":\"0xcea29731eec94c4315e7ca82a1d71a16062a3f811175a020c8ebaaba1430a1e9\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ISecuritizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ISecuritizationManager} from '../protocol/pool/ISecuritizationManager.sol';\\n\",\"keccak256\":\"0x916a3697edf0cdf1bef504d020261b9966273571a9cb8b20233d956da500d605\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ISecuritizationPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\nimport {ISecuritizationPool} from '../protocol/pool/ISecuritizationPool.sol';\\n\",\"keccak256\":\"0x7b82ed633df9a928a565cc0d9ca046ed582f40b95114afbc9011e9b35b5559e6\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ISecuritizationPoolValueService.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ISecuritizationPoolValueService} from '../protocol/pool/ISecuritizationPoolValueService.sol';\\n\",\"keccak256\":\"0x8a9c7c64ebb62f81c73b19cdc56a20c0ff2d57604550a5e05eb76c24c1c2f6a3\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ITokenGenerationEventFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ITokenGenerationEventFactory} from '../protocol/note-sale/fab/ITokenGenerationEventFactory.sol';\\n\",\"keccak256\":\"0xa3d74b77341aa870f1ad787ee104bc99c2f1508f6fc9acb2667426c29e7f7ca2\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IUntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IUntangledERC721} from '../tokens/ERC721/IUntangledERC721.sol';\\n\",\"keccak256\":\"0x6664ec5f1bcd4bd22d03d576378f6b7fe6e18b88f10bcef887154477c7e1bcd9\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport {Registry} from '../storage/Registry.sol';\\nimport {Configuration} from './Configuration.sol';\\n\\nimport {ISecuritizationManager} from '../interfaces/ISecuritizationManager.sol';\\nimport {ISecuritizationPool} from '../interfaces/ISecuritizationPool.sol';\\nimport {INoteTokenFactory} from '../interfaces/INoteTokenFactory.sol';\\nimport {INoteToken} from '../interfaces/INoteToken.sol';\\nimport {ITokenGenerationEventFactory} from '../interfaces/ITokenGenerationEventFactory.sol';\\nimport {IUntangledERC721} from '../interfaces/IUntangledERC721.sol';\\nimport {ILoanRepaymentRouter} from '../interfaces/ILoanRepaymentRouter.sol';\\nimport {ILoanKernel} from '../interfaces/ILoanKernel.sol';\\nimport {ILoanAssetToken} from '../interfaces/ILoanAssetToken.sol';\\nimport {IDistributionAssessor} from '../interfaces/IDistributionAssessor.sol';\\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\\n\\nimport {MintedIncreasingInterestTGE} from '../protocol/note-sale/MintedIncreasingInterestTGE.sol';\\nimport {MintedNormalTGE} from '../protocol/note-sale/MintedNormalTGE.sol';\\nimport {IGo} from '../interfaces/IGo.sol';\\n\\nimport {POOL_ADMIN, OWNER_ROLE} from './types.sol';\\nimport {INoteTokenVault} from '../protocol/pool/INoteTokenVault.sol';\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the Registry contract\\n * @author Untangled Team\\n */\\nlibrary ConfigHelper {\\n    function getAddress(Registry registry, Configuration.CONTRACT_TYPE contractType) internal view returns (address) {\\n        return registry.getAddress(uint8(contractType));\\n    }\\n\\n    function getSecuritizationManager(Registry registry) internal view returns (ISecuritizationManager) {\\n        return ISecuritizationManager(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER));\\n    }\\n\\n    function getSecuritizationPool(Registry registry) internal view returns (ISecuritizationPool) {\\n        return ISecuritizationPool(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL));\\n    }\\n\\n    function getNoteTokenFactory(Registry registry) internal view returns (INoteTokenFactory) {\\n        return INoteTokenFactory(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY));\\n    }\\n\\n    // function getNoteToken(Registry registry) internal view returns (INoteToken) {\\n    //     return INoteToken(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN));\\n    // }\\n\\n    function getTokenGenerationEventFactory(Registry registry) internal view returns (ITokenGenerationEventFactory) {\\n        return\\n            ITokenGenerationEventFactory(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY)\\n            );\\n    }\\n\\n    function getLoanAssetToken(Registry registry) internal view returns (ILoanAssetToken) {\\n        return ILoanAssetToken(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN));\\n    }\\n\\n    function getLoanRepaymentRouter(Registry registry) internal view returns (ILoanRepaymentRouter) {\\n        return ILoanRepaymentRouter(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_REPAYMENT_ROUTER));\\n    }\\n\\n    function getLoanKernel(Registry registry) internal view returns (ILoanKernel) {\\n        return ILoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_KERNEL));\\n    }\\n\\n    function getSecuritizationPoolValueService(\\n        Registry registry\\n    ) internal view returns (ISecuritizationPoolValueService) {\\n        return\\n            ISecuritizationPoolValueService(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE)\\n            );\\n    }\\n\\n    function getDistributionAssessor(Registry registry) internal view returns (IDistributionAssessor) {\\n        return IDistributionAssessor(getAddress(registry, Configuration.CONTRACT_TYPE.DISTRIBUTION_ASSESSOR));\\n    }\\n\\n    function getGo(Registry registry) internal view returns (IGo) {\\n        return IGo(getAddress(registry, Configuration.CONTRACT_TYPE.GO));\\n    }\\n\\n    function getNoteTokenVault(Registry registry) internal view returns (INoteTokenVault) {\\n        return INoteTokenVault(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\\n    }\\n\\n    function requirePoolAdmin(Registry registry, address account) internal view {\\n        require(\\n            IAccessControlUpgradeable(address(getSecuritizationManager(registry))).hasRole(POOL_ADMIN, account),\\n            'Registry: Not an pool admin'\\n        );\\n    }\\n\\n    function requirePoolAdminOrOwner(Registry registry, address pool, address account) internal view {\\n        require(\\n            IAccessControlUpgradeable(address(getSecuritizationManager(registry))).hasRole(POOL_ADMIN, account) ||\\n                IAccessControlUpgradeable(pool).hasRole(OWNER_ROLE, account),\\n            'Registry: Not an pool admin or pool owner'\\n        );\\n    }\\n\\n    function requireSecuritizationManager(Registry registry, address account) internal view {\\n        require(account == address(getSecuritizationManager(registry)), 'Registry: Only SecuritizationManager');\\n    }\\n\\n    function requireLoanRepaymentRouter(Registry registry, address account) internal view {\\n        require(account == address(getLoanRepaymentRouter(registry)), 'Registry: Only LoanRepaymentRouter');\\n    }\\n\\n    function requireLoanKernel(Registry registry, address account) internal view {\\n        require(account == address(getLoanKernel(registry)), 'Registry: Only LoanKernel');\\n    }\\n}\\n\",\"keccak256\":\"0x010aa863ef7b02b910e74197093fc37c34362b6772e821830a5ec0080fee7d40\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title Configuration\\n/// @author Untangled Team\\nlibrary Configuration {\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\n    // You can rename or append. But NEVER change the order.\\n    enum CONTRACT_TYPE {\\n        SECURITIZATION_MANAGER,\\n        SECURITIZATION_POOL,\\n        NOTE_TOKEN_FACTORY,\\n        TOKEN_GENERATION_EVENT_FACTORY,\\n        DISTRIBUTION_ASSESSOR,\\n        LOAN_ASSET_TOKEN,\\n        LOAN_REPAYMENT_ROUTER,\\n        LOAN_KERNEL,\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\n        GO,\\n        NOTE_TOKEN_VAULT\\n    }\\n\\n    enum NOTE_TOKEN_TYPE {\\n        SENIOR,\\n        JUNIOR\\n    }\\n\\n    enum ASSET_PURPOSE {\\n        LOAN,\\n        INVOICE\\n    }\\n}\\n\",\"keccak256\":\"0xfa9f83063d37a9e8740caa3f7e4e9f3bfaf12db603bda857fefb78b3f340811d\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.10;\\n\\nlibrary UnpackLoanParamtersLib {\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    /**\\n     *\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\n     */\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\n        return uint256(value) / 2 ** amount;\\n    }\\n\\n    /**\\n     * Unpack parameters from packed bytes32 data\\n     */\\n    function _unpackLoanTermsParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters &\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters &\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters &\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n            _bitShiftRight(principalAmountShifted, 152),\\n            _bitShiftRight(interestRateShifted, 128),\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\n        );\\n    }\\n\\n    /**\\n     * Unpack data from hex string which including informations about Loan\\n     */\\n    function unpackParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\n    }\\n}\\n\",\"keccak256\":\"0x2a8c8c03b60f1e569f20ef15c5439074ac43b6824bb143526f08a332447d0f54\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UntangledMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title UntangledMath\\n/// @author Untangled Team\\nlibrary UntangledMath {\\n    uint256 public constant ONE = 10 ** 27;\\n\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(base, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function uncheckedInc(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x471c35004ce52850c41f6835199a7661e19123b7f8509629fa1ed20ab5283d61\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nbytes32 constant POOL_ADMIN = keccak256('POOL_CREATOR');\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n\",\"keccak256\":\"0x730576b66e89c0d699aa21b547a7d14b0b94d1b0e2757e0c20fee94b67f1f4f7\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport {IUniqueIdentity} from '../uid/IUniqueIdentity.sol';\\n\\nabstract contract IGo {\\n    uint256 public constant ID_TYPE_0 = 0; // non-US individual\\n    uint256 public constant ID_TYPE_1 = 1; // US accredited individual\\n    uint256 public constant ID_TYPE_2 = 2; // US non accredited individual\\n    uint256 public constant ID_TYPE_3 = 3; // US entity\\n    uint256 public constant ID_TYPE_4 = 4; // non-US entity\\n    uint256 public constant ID_TYPE_5 = 5;\\n    uint256 public constant ID_TYPE_6 = 6;\\n    uint256 public constant ID_TYPE_7 = 7;\\n    uint256 public constant ID_TYPE_8 = 8;\\n    uint256 public constant ID_TYPE_9 = 9;\\n    uint256 public constant ID_TYPE_10 = 10;\\n\\n    /// @notice Returns the address of the UniqueIdentity contract.\\n    function uniqueIdentity() external virtual returns (IUniqueIdentity);\\n\\n    function go(address account) public view virtual returns (bool);\\n\\n    function goOnlyIdTypes(address account, uint256[] memory onlyIdTypes) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x89eec21096b11b7b88ac84391488e541a414a2a9c7a3e8ad4069bc27e4fc4091\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/loan/ILoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {Registry} from '../../storage/Registry.sol';\\nimport '../../tokens/ERC721/types.sol';\\n\\nabstract contract ILoanKernel {\\n    Registry public registry;\\n\\n    /****************** */\\n    // CONSTANTS\\n    /****************** */\\n\\n    enum FillingAddressesIndex {\\n        SECURITIZATION_POOL,\\n        PRINCIPAL_TOKEN_ADDRESS,\\n        REPAYMENT_ROUTER\\n    }\\n\\n    enum FillingNumbersIndex {\\n        CREDITOR_FEE,\\n        ASSET_PURPOSE\\n    }\\n\\n    //********************************************************* */\\n\\n    //****** */\\n    // EVENTS\\n    //****** */\\n\\n    //********************************************************* */\\n\\n    /*********** */\\n    // STRUCTURES\\n    /*********** */\\n\\n    struct LoanIssuance {\\n        address version;\\n        address[] debtors;\\n        bytes32[] termsContractParameters; // for different loans\\n        bytes32[] agreementIds;\\n        uint256[] salts;\\n    }\\n\\n    struct LoanOrder {\\n        LoanIssuance issuance;\\n        address principalTokenAddress;\\n        uint256[] principalAmounts;\\n        uint256 creditorFee;\\n        uint256[] expirationTimestampInSecs;\\n        bytes32[] debtOrderHashes;\\n        uint8[] riskScores;\\n        uint8 assetPurpose;\\n    }\\n\\n    struct FillDebtOrderParam {\\n        address[] orderAddresses; // 0-pool, 1-principal token address, 2-repayment router,...\\n        uint256[] orderValues; //  0-creditorFee, 1-asset purpose,..., [x] principalAmounts, [x] expirationTimestampInSecs, [x] - salts, [x] - riskScores\\n        bytes32[] termsContractParameters; // Term contract parameters from different farmers, encoded as hash strings\\n        LoanAssetInfo[] latInfo;\\n    }\\n\\n    /*********** */\\n    // VARIABLES\\n    /*********** */\\n\\n    /// @notice conclude a loan by stopping lending/loan terms or allowing the loan loss. It takes the creditor, agreement ID, and term contract as input\\n    function concludeLoan(address creditor, bytes32 agreementId) public virtual;\\n}\\n\",\"keccak256\":\"0xf82364ed22921ba0a320997390617b5a660e1b5ba6ff2c861c106999f02dad36\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/loan/ILoanRepaymentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {UntangledBase} from '../../base/UntangledBase.sol';\\nimport {Registry} from '../../storage/Registry.sol';\\n\\nabstract contract ILoanRepaymentRouter is UntangledBase {\\n    Registry public registry;\\n\\n    function initialize(Registry _registry) public virtual;\\n\\n    event AssetRepay(\\n        bytes32 indexed agreementId,\\n        address indexed payer,\\n        address indexed pool,\\n        uint256 amount,\\n        uint256 outstandingAmount,\\n        address token\\n    );\\n\\n    /// @notice allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts\\n    /// @dev calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment\\n    function repayInBatch(\\n        bytes32[] calldata agreementIds,\\n        uint256[] calldata amounts,\\n        address tokenAddress\\n    ) external virtual returns (bool);\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x69a7afc5578964098027027a10385c8f9549ddb1f07f7d775b1129ad36c95174\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/IInterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface IInterestRate {\\n    function pickedInterest() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xee3ccd8cb1b9c657dfdc7724fdc2cfd5043f2410c62096dfa88304d737ed196e\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/IMintedTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {Registry} from '../../storage/Registry.sol';\\nimport {IInterestRate} from './IInterestRate.sol';\\n\\ninterface IMintedTGE is IInterestRate {\\n    event UpdateInitialAmount(uint256 initialAmount);\\n\\n    enum SaleType {\\n        MINTED_INCREASING_INTEREST,\\n        NORMAL_SALE\\n    }\\n\\n    function initialize(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency,\\n        bool _isLongSale\\n    ) external;\\n\\n    ///@notice investor bids for SOT/JOT token. Paid by pool's currency\\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\\n\\n    function startNewRoundSale(uint256 openingTime_, uint256 closingTime_, uint256 rate_, uint256 cap_) external;\\n\\n    function setTotalCap(uint256 cap_) external;\\n\\n    function getInterest() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe379c3c403b0d3143eb987d5969f97ba8a191a47be0e68d8e4da599f904d7e02\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/MintedIncreasingInterestTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../base/UntangledBase.sol';\\nimport './crowdsale/IncreasingInterestCrowdsale.sol';\\nimport './IMintedTGE.sol';\\nimport './base/LongSaleInterest.sol';\\nimport './IInterestRate.sol';\\nimport '../../interfaces/INoteToken.sol';\\n\\n/// @title MintedIncreasingInterestTGE\\n/// @author Untangled Team\\n/// @dev Note sale for SOT - auction\\ncontract MintedIncreasingInterestTGE is IMintedTGE, UntangledBase, IncreasingInterestCrowdsale, LongSaleInterest {\\n    using ConfigHelper for Registry;\\n\\n    bool public longSale;\\n    uint256 public interestRate;\\n\\n    uint8 saleType;\\n\\n    function initialize(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency,\\n        bool _longSale\\n    ) public initializer {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        longSale = _longSale;\\n        saleType = uint8(SaleType.MINTED_INCREASING_INTEREST);\\n    }\\n\\n    /// @inheritdoc Crowdsale\\n    function isLongSale() public view override returns (bool) {\\n        return longSale;\\n    }\\n\\n    /// @notice Calculate token price\\n    /// @dev This sale is for SOT. So the function return SOT token price\\n    function getTokenPrice() public view returns (uint256) {\\n        return registry.getDistributionAssessor().calcTokenPrice(pool, token);\\n    }\\n\\n    /// @notice Get amount of token can receive from an amount of currency\\n    function getTokenAmount(uint256 currencyAmount) public view override returns (uint256) {\\n        uint256 tokenPrice = getTokenPrice();\\n\\n        if (tokenPrice == 0) {\\n            return 0;\\n        }\\n        return (currencyAmount * 10 ** INoteToken(token).decimals()) / tokenPrice;\\n    }\\n\\n    function getInterest() public view override returns (uint256) {\\n        return getCurrentInterest();\\n    }\\n\\n    /// @notice Setup a new round sale for note token\\n    /// @param openingTime_ Define when the sale should start\\n    /// @param closingTime_ Define when the sale should end\\n    /// @param cap_ Target amount of raised currency\\n    function startNewRoundSale(\\n        uint256 openingTime_,\\n        uint256 closingTime_,\\n        uint256 rate_,\\n        uint256 cap_\\n    ) external override whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedIncreasingInterestTGE: Caller must be owner or manager'\\n        );\\n        _preValidateNewSaleRound();\\n\\n        // call inner function for each extension\\n        _newSaleRound(rate_);\\n        newSaleRoundTime(openingTime_, closingTime_);\\n        _setTotalCap(cap_);\\n    }\\n\\n    function setTotalCap(uint256 cap_) external whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedIncreasingInterestTGE: Caller must be owner or manager'\\n        );\\n        _setTotalCap(cap_);\\n    }\\n\\n    /// @dev Validates that the previous sale round is closed and the time interval for increasing interest is greater than zero\\n    function _preValidateNewSaleRound() internal view {\\n        require(hasClosed() || totalCapReached(), 'MintedIncreasingInterestTGE: Previous round not closed');\\n        require(timeInterval > 0, 'MintedIncreasingInterestTGE: Time interval increasing interest is 0');\\n    }\\n\\n    function buyTokens(\\n        address payee,\\n        address beneficiary,\\n        uint256 currencyAmount\\n    ) public override(IMintedTGE, Crowdsale) returns (uint256 tokenAmount) {\\n        tokenAmount = Crowdsale.buyTokens(payee, beneficiary, currencyAmount);\\n        if (_currencyRaised >= totalCap) {\\n            if (!this.finalized()) {\\n                this.finalize(false, pool);\\n            }\\n        }\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xcd955befbc66da9ae80aee8ee6affb1b9dc17cbab77b1a5426fb2443d3c2326a\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/MintedNormalTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {Registry} from '../../storage/Registry.sol';\\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\\nimport {Crowdsale} from './crowdsale/Crowdsale.sol';\\nimport {FinalizableCrowdsale} from './crowdsale/FinalizableCrowdsale.sol';\\nimport {ISecuritizationPool} from '../pool/ISecuritizationPool.sol';\\nimport {IMintedTGE} from './IMintedTGE.sol';\\nimport {LongSaleInterest} from './base/LongSaleInterest.sol';\\nimport '../../interfaces/INoteToken.sol';\\n\\n/// @title MintedNormalTGE\\n/// @author Untangled Team\\n/// @dev Note sale for JOT\\ncontract MintedNormalTGE is IMintedTGE, FinalizableCrowdsale, LongSaleInterest {\\n    using ConfigHelper for Registry;\\n\\n    bool public longSale;\\n    uint256 public interestRate;\\n    uint256 public initialAmount;\\n\\n    uint32 public pickedInterest;\\n    uint8 saleType;\\n\\n    function initialize(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency,\\n        bool _longSale\\n    ) public initializer {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        longSale = _longSale;\\n        saleType = uint8(SaleType.NORMAL_SALE);\\n    }\\n\\n    /// @inheritdoc Crowdsale\\n    function isLongSale() public view override returns (bool) {\\n        return longSale;\\n    }\\n\\n    function getTokenPrice() public view returns (uint256) {\\n        return registry.getDistributionAssessor().calcTokenPrice(pool, token);\\n    }\\n\\n    function getTokenAmount(uint256 currencyAmount) public view override returns (uint256) {\\n        uint256 tokenPrice = getTokenPrice();\\n\\n        if (tokenPrice == 0) {\\n            return 0;\\n        }\\n        return (currencyAmount * 10 ** INoteToken(token).decimals()) / tokenPrice;\\n    }\\n\\n    function getInterest() public view override returns (uint256) {\\n        return interestRate;\\n    }\\n\\n    /// @notice Setup a new round sale for note token\\n    /// @param openingTime_ Define when the sale should start\\n    /// @param closingTime_ Define when the sale should end\\n    /// @param cap_ Target amount of raised currency\\n    function startNewRoundSale(\\n        uint256 openingTime_,\\n        uint256 closingTime_,\\n        uint256 rate_,\\n        uint256 cap_\\n    ) external override whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedNormalTGE: Caller must be owner or manager'\\n        );\\n        _preValidateNewSaleRound();\\n\\n        // call inner function for each extension\\n        _newSaleRound(rate_);\\n        newSaleRoundTime(openingTime_, closingTime_);\\n        _setTotalCap(cap_);\\n    }\\n\\n    function setInterestRate(uint256 _interestRate) external whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedNormalTGE: Caller must be owner or manager'\\n        );\\n        interestRate = _interestRate;\\n    }\\n\\n    function setTotalCap(uint256 cap_) external whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedNormalTGE: Caller must be owner or manager'\\n        );\\n        _setTotalCap(cap_);\\n    }\\n\\n    /// @notice Setup initial amount currency raised for JOT condition\\n    /// @param _initialAmount Expected minimum amount of JOT before SOT start\\n    function setInitialAmount(uint256 _initialAmount) external whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'MintedNormalTGE: Caller must be owner or manager'\\n        );\\n        require(initialAmount < totalCap, 'MintedNormalTGE: Initial JOT amount must be less than total cap');\\n        initialAmount = _initialAmount;\\n        emit UpdateInitialAmount(_initialAmount);\\n    }\\n\\n    /// @dev Validates that the previous sale round is closed and the time interval for increasing interest is greater than zero\\n    function _preValidateNewSaleRound() internal view {\\n        require(hasClosed() || totalCapReached(), 'MintedIncreasingInterestTGE: Previous round not closed');\\n    }\\n\\n    function _finalization() internal override {\\n        super._finalization();\\n\\n        pickedInterest = uint32(interestRate);\\n    }\\n\\n    function buyTokens(\\n        address payee,\\n        address beneficiary,\\n        uint256 currencyAmount\\n    ) public override(IMintedTGE, Crowdsale) returns (uint256) {\\n        return Crowdsale.buyTokens(payee, beneficiary, currencyAmount);\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x8928fab10aa83eb60be455fcc2d4b3ccbf9a3f3f7b14c2a82b56800df0079aa6\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/base/LongSaleInterest.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../../libraries/UntangledMath.sol';\\n\\n/// @title LongSaleInterest\\n/// @author Untangled Team\\n/// @dev Define some constant for interest calculation\\ncontract LongSaleInterest {\\n    /// @dev represents the number of days in a year\\n    uint256 public constant YEAR_LENGTH_IN_DAYS = 365;\\n    // All time units in seconds\\n    /// @dev represents the number of seconds in a minute\\n    uint256 public constant MINUTE_LENGTH_IN_SECONDS = 60;\\n    /// @dev represents the number of seconds in an hour\\n    uint256 public constant HOUR_LENGTH_IN_SECONDS = MINUTE_LENGTH_IN_SECONDS * 60;\\n    /// @dev represents the number of seconds in a day\\n    uint256 public constant DAY_LENGTH_IN_SECONDS = HOUR_LENGTH_IN_SECONDS * 24;\\n    /// @dev represents the number of seconds in a year\\n    uint256 public constant YEAR_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * YEAR_LENGTH_IN_DAYS;\\n\\n    // To convert an encoded interest rate into its equivalent in percents,\\n    // divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 1% interest rate\\n    /// @dev A constant used to convert an encoded interest rate into its equivalent in percentage.\\n    /// To convert an encoded interest rate to a percentage, divide it by this scaling factor\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n    /// @dev represents the scaling factor for the purchase price calculation\\n    uint256 public constant PURCHASE_PRICE_SCALING_FACTOR = 10 ** 4;\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1ecc1b243acc2d0a54c3806d4cfff626c47e6bc163ba020de49919658f09d346\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/Crowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\nimport '../../../base/UntangledBase.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '../../pool/ISecuritizationPool.sol';\\nimport {ISecuritizationTGE} from '../../pool/ISecuritizationTGE.sol';\\n\\nimport {ConfigHelper} from '../../../libraries/ConfigHelper.sol';\\nimport '../../../interfaces/INoteToken.sol';\\nimport '../../../interfaces/ICrowdSale.sol';\\nimport {ISecuritizationPoolStorage} from '../../pool/ISecuritizationPoolStorage.sol';\\n\\nabstract contract Crowdsale is UntangledBase, ICrowdSale {\\n    using ConfigHelper for Registry;\\n\\n    event UpdateTotalCap(uint256 totalCap);\\n    event UpdateMinBidAmount(uint256 minBidAmount);\\n\\n    Registry public registry;\\n\\n    // decimal calculating for rate\\n    uint256 public constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\n    /// @dev Pool address which this sale belongs to\\n    address public override pool;\\n\\n    /// @dev The token being sold\\n    address public override token;\\n\\n    /// @dev The token being sold\\n    address public currency;\\n\\n    // How many token units a buyer gets per currency.\\n    uint256 public rate; // support by RATE_SCALING_FACTOR decimal numbers\\n    bool public hasStarted;\\n    uint64 public firstNoteTokenMintedTimestamp; // Timestamp at which the first asset is collected to pool\\n\\n    /// @dev Amount of currency raised\\n    uint256 internal _currencyRaised;\\n\\n    /// @dev Amount of token raised\\n    uint256 public tokenRaised;\\n\\n    /// @dev Target raised currency amount\\n    uint256 public totalCap;\\n\\n    /// @dev Minimum currency bid amount for note token\\n    uint256 public minBidAmount;\\n\\n    mapping(address => uint256) public _currencyRaisedByInvestor;\\n\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    function __Crowdsale__init(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency\\n    ) internal onlyInitializing {\\n        __UntangledBase__init_unchained(_msgSender());\\n        registry = _registry;\\n        pool = _pool;\\n        token = _token;\\n        currency = _currency;\\n    }\\n\\n    modifier securitizationPoolRestricted() {\\n        require(_msgSender() == pool, 'Crowdsale: Caller must be pool');\\n        _;\\n    }\\n\\n    modifier smpRestricted() {\\n        require(\\n            _msgSender() == address(registry.getSecuritizationManager()),\\n            'Crowdsale: Caller must be securitization manager'\\n        );\\n        _;\\n    }\\n\\n    function currencyRaisedByInvestor(address investor) public view returns (uint256) {\\n        return _currencyRaisedByInvestor[investor];\\n    }\\n\\n    /// @notice add funding amount to be added to the total cap\\n    function addFunding(uint256 additionalCap) public nonReentrant whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'Crowdsale: caller must be owner or manager'\\n        );\\n        require(additionalCap > 0, 'Crowdsale: total cap is 0');\\n\\n        totalCap = additionalCap + totalCap;\\n\\n        emit UpdateTotalCap(totalCap);\\n    }\\n\\n    /// @notice Setup minimum bid amount in currency for note token\\n    /// @param _minBidAmount Expected minimum amount\\n    function setMinBidAmount(uint256 _minBidAmount) external override whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'Crowdsale: caller must be owner or manager'\\n        );\\n        minBidAmount = _minBidAmount;\\n        emit UpdateMinBidAmount(_minBidAmount);\\n    }\\n\\n    /// @notice Set hasStarted variable\\n    function setHasStarted(bool _hasStarted) public {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'Crowdsale: caller must be owner or manager'\\n        );\\n        hasStarted = _hasStarted;\\n\\n        emit SetHasStarted(hasStarted);\\n    }\\n\\n    /// @notice Sets the rate variable to the new rate\\n    function _newSaleRound(uint256 newRate) internal {\\n        require(!hasStarted, 'Crowdsale: Sale round overflow');\\n\\n        rate = newRate;\\n    }\\n\\n    /// @notice  Allows users to buy note token\\n    /// @param payee pay for purchase\\n    /// @param beneficiary wallet receives note token\\n    /// @param currencyAmount amount of currency used for purchase\\n    function buyTokens(\\n        address payee,\\n        address beneficiary,\\n        uint256 currencyAmount\\n    ) public virtual whenNotPaused nonReentrant smpRestricted returns (uint256) {\\n        require(currencyAmount >= minBidAmount, 'Crowdsale: Less than minBidAmount');\\n        uint256 tokenAmount = getTokenAmount(currencyAmount);\\n\\n        _preValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n\\n        // update state\\n        _currencyRaised += currencyAmount;\\n        _currencyRaisedByInvestor[beneficiary] += currencyAmount;\\n\\n        ISecuritizationTGE securitizationPool = ISecuritizationTGE(pool);\\n        require(securitizationPool.isDebtCeilingValid(), 'Crowdsale: Exceeds Debt Ceiling');\\n        tokenRaised += tokenAmount;\\n\\n        _claimPayment(payee, currencyAmount);\\n        _processPurchase(beneficiary, tokenAmount);\\n        emit TokensPurchased(_msgSender(), beneficiary, currencyAmount, tokenAmount);\\n\\n        _forwardFunds(ISecuritizationPoolStorage(pool).pot(), currencyAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    /// @notice Check if the total amount of currency raised is equal to the total cap\\n    function isDistributedFully() public view returns (bool) {\\n        return _currencyRaised == totalCap;\\n    }\\n\\n    /// @notice Catch event redeem token\\n    /// @param currencyAmount amount of currency investor want to redeem\\n    function onRedeem(uint256 currencyAmount) public virtual override {\\n        require(_msgSender() == address(registry.getNoteTokenVault()), 'Crowdsale: Caller must be Note token vault');\\n        _currencyRaised -= currencyAmount;\\n    }\\n\\n    /// @notice Retrieves the remaining token balance held by the crowdsale contract\\n    function getTokenRemainAmount() public view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    /// @notice Calculates the remaining amount of currency available for purchase\\n    function getCurrencyRemainAmount() public view virtual returns (uint256) {\\n        return totalCap - _currencyRaised;\\n    }\\n\\n    /// @notice Determines whether the current sale round is a long sale\\n    /// @dev This is an abstract function that needs to be implemented in derived contracts\\n    function isLongSale() public view virtual returns (bool);\\n\\n    /// @notice Calculates the corresponding token amount based on the currency amount and the current rate\\n    /// @dev This is an abstract function that needs to be implemented in derived contracts\\n    function getTokenAmount(uint256 currencyAmount) public view virtual returns (uint256);\\n\\n    /// @notice Requires that the currency amount does not exceed the total cap\\n    function _defaultPreValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view {\\n        require(beneficiary != address(0), 'Crowdsale: beneficiary is zero address');\\n        //        require(currencyAmount != 0, \\\"currency amount is 0\\\");\\n        require(tokenAmount != 0, 'Crowdsale: token amount is 0');\\n        require(hasStarted, 'Crowdsale: sale not started');\\n        require(isUnderTotalCap(currencyAmount), 'Crowdsale: cap exceeded');\\n    }\\n\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view virtual {\\n        _defaultPreValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n    }\\n\\n    /// @dev Mints and delivers tokens to the beneficiary\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        INoteToken noteToken = INoteToken(token);\\n        if (noteToken.noteTokenType() == uint8(Configuration.NOTE_TOKEN_TYPE.SENIOR) && noteToken.totalSupply() == 0) {\\n            firstNoteTokenMintedTimestamp = uint64(block.timestamp);\\n            ISecuritizationPool(pool).setUpOpeningBlockTimestamp();\\n        }\\n        noteToken.mint(beneficiary, tokenAmount);\\n    }\\n\\n    /// @dev Burns and delivers tokens to the beneficiary\\n    function _ejectTokens(uint256 tokenAmount) internal {\\n        INoteToken(token).burn(tokenAmount);\\n    }\\n\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /// @dev Transfers the currency from the payer to the crowdsale contract\\n    function _claimPayment(address payee, uint256 currencyAmount) internal {\\n        require(\\n            IERC20(currency).transferFrom(payee, address(this), currencyAmount),\\n            'Fail to transfer currency from payee to contract'\\n        );\\n    }\\n\\n    // function getTokenAmount(uint256 currencyAmount) public view returns (uint256) {\\n    //     require(rate > 0, 'Crowdsale: rate is 0');\\n    //     uint256 TEN = 10;\\n    //     return\\n    //         (currencyAmount * rate * TEN**ERC20(token).decimals()) /\\n    //         (RATE_SCALING_FACTOR * TEN**ERC20(currency).decimals());\\n    // }\\n\\n    /// @dev Transfers the currency funds from the crowdsale contract to the specified beneficiary\\n    function _forwardFunds(address beneficiary, uint256 currencyAmount) internal {\\n        require(IERC20(currency).transfer(beneficiary, currencyAmount), 'Fail to transfer currency to Beneficiary');\\n    }\\n\\n    /// @dev Sets the total cap to the specified amount\\n    function _setTotalCap(uint256 cap) internal {\\n        require(cap > 0, 'Crowdsale: cap is 0');\\n        require(cap >= _currencyRaised, 'Crowdsale: cap is bellow currency raised');\\n\\n        totalCap = cap;\\n\\n        emit UpdateTotalCap(totalCap);\\n    }\\n\\n    /// @notice Checks if the total amount of currency raised is greater than or equal to the total cap\\n    function totalCapReached() public view returns (bool) {\\n        return _currencyRaised >= totalCap;\\n    }\\n\\n    /// @notice Checks if the sum of the current currency raised and the specified currency amount is less than or equal to the total cap\\n    function isUnderTotalCap(uint256 currencyAmount) public view returns (bool) {\\n        return _currencyRaised + currencyAmount <= totalCap;\\n    }\\n\\n    function currencyRaised() public view virtual override returns (uint256) {\\n        return _currencyRaised;\\n    }\\n\\n    uint256[40] private __gap;\\n}\\n\",\"keccak256\":\"0x848750d56d5bc0016e939743c6f67997c338c1f48682f9d9e79e7c8be77452ad\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/FinalizableCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport './IFinalizableCrowdsale.sol';\\nimport './TimedCrowdsale.sol';\\n\\n/// @title FinalizableCrowdsale\\n/// @author Untangled Team\\n/// @dev An abstract contract define finalize function for sale\\nabstract contract FinalizableCrowdsale is IFinalizableCrowdsale, TimedCrowdsale {\\n    bool internal _finalized;\\n\\n    function finalized() public view virtual override returns (bool) {\\n        return _finalized;\\n    }\\n\\n    /// @dev Validates that the crowdsale has not already been finalized and that it has either closed or reached the total cap\\n    /// @param claimRemainToken claim remaining token or not\\n    /// @param remainTokenRecipient Wallet will receive remaining token\\n    function finalize(bool claimRemainToken, address remainTokenRecipient) public whenNotPaused {\\n        require(_msgSender() == pool || _msgSender() == address(this), 'FinalizableCrowdsale: Only pool contract can finalize');\\n        require(!finalized(), 'FinalizableCrowdsale: already finalized');\\n        require(hasClosed() || totalCapReached(), 'FinalizableCrowdsale: not closed');\\n        _finalized = true;\\n\\n        if (!isDistributedFully() && !isLongSale()) {\\n            uint256 tokenRemain = 0;\\n            tokenRemain = getTokenAmount(getCurrencyRemainAmount());\\n\\n            if (claimRemainToken) {\\n                _processPurchase(remainTokenRecipient, tokenRemain);\\n            } else {\\n                _ejectTokens(tokenRemain);\\n            }\\n        }\\n\\n        _finalization();\\n        emit CrowdsaleFinalized();\\n    }\\n\\n    /// @dev This function is meant to be overridden in derived contracts to implement specific finalization logic\\n    function _finalization() internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x489357120c1b804796d8a2f81d16a2b437ea86668d024e751ae4f62f20ea1b35\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/ICrowdSale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface ICrowdSale {\\n    event SetHasStarted(bool hasStarted);\\n\\n    function pool() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function currencyRaisedByInvestor(address investor) external view returns (uint256);\\n\\n    function currencyRaised() external view returns (uint256);\\n\\n    function firstNoteTokenMintedTimestamp() external view returns (uint64);\\n\\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\\n\\n    function setHasStarted(bool _hasStarted) external;\\n\\n    function setMinBidAmount(uint256 _minBidAmount) external;\\n\\n    function onRedeem(uint256 currencyAmount) external;\\n}\\n\",\"keccak256\":\"0xd8167c0170bac1f001cd69e3b2ab9ba78b54e19187fd9a37a7a1d722d722e96c\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/IFinalizableCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface IFinalizableCrowdsale {\\n    event CrowdsaleFinalized();\\n\\n    function finalized() external view returns (bool);\\n\\n    function finalize(bool claimRemainToken, address remainTokenRecipient) external;\\n}\\n\",\"keccak256\":\"0x743a6502927650429bf135773e8482682451e554255330564f59fa23fc4deaa4\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/IncreasingInterestCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport './FinalizableCrowdsale.sol';\\nimport '../IInterestRate.sol';\\n\\n/// @title IncreasingInterestCrowdsale\\n/// @author Untangled Team\\nabstract contract IncreasingInterestCrowdsale is IInterestRate, FinalizableCrowdsale {\\n    using ConfigHelper for Registry;\\n\\n    event UpdateInterestRange(\\n        uint32 initialInterest,\\n        uint32 finalInterest,\\n        uint32 timeInterval,\\n        uint32 amountChangeEachInterval\\n    );\\n\\n    uint32 public initialInterest;\\n    uint32 public finalInterest;\\n    uint32 public timeInterval;\\n    uint32 public amountChangeEachInterval;\\n    uint32 public override pickedInterest;\\n\\n    function setInterestRange(\\n        uint32 _initialInterest,\\n        uint32 _finalInterest,\\n        uint32 _timeInterval,\\n        uint32 _amountChangeEachInterval\\n    ) public whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'IncreasingInterestCrowdsale: Caller must be owner or pool'\\n        );\\n        require(!hasStarted, 'IncreasingInterestCrowdsale: sale already started');\\n        require(\\n            _initialInterest <= _finalInterest,\\n            'IncreasingInterestCrowdsale: initial interest is not less than final interest'\\n        );\\n        require(_timeInterval > 0, 'IncreasingInterestCrowdsale: time interval is 0');\\n\\n        initialInterest = _initialInterest;\\n        finalInterest = _finalInterest;\\n        timeInterval = _timeInterval;\\n        amountChangeEachInterval = _amountChangeEachInterval;\\n\\n        emit UpdateInterestRange(initialInterest, finalInterest, timeInterval, amountChangeEachInterval);\\n    }\\n\\n    function getCurrentInterest() public view returns (uint32) {\\n        if (block.timestamp < openingTime) {\\n            return 0;\\n        }\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 elapsedTime = block.timestamp - openingTime;\\n        // uint256 numberInterval = elapsedTime / timeInterval;\\n        // uint32 currentInterest = uint32(amountChangeEachInterval * numberInterval + initialInterest);\\n        uint32 currentInterest = uint32((amountChangeEachInterval * elapsedTime) / timeInterval + initialInterest);\\n\\n        if (currentInterest > finalInterest) {\\n            return finalInterest;\\n        } else {\\n            return currentInterest;\\n        }\\n    }\\n\\n    /// @dev Override _finalization function. In Auction note sale, interest of token determined when the auction ends\\n    function _finalization() internal override {\\n        super._finalization();\\n\\n        pickedInterest = getCurrentInterest();\\n    }\\n\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view override {\\n        super._preValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n        require(timeInterval > 0, 'IncreasingInterestCrowdsale: time interval not set');\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xe9a24ffb8d90702ee761653d8db5da667851eb919a3b280bb2a286d269492fd3\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/crowdsale/TimedCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport './Crowdsale.sol';\\n\\n/// @title TimedCrowdsale\\n/// @author Untangled Team\\n/// @dev Note sale that has open time and close time\\nabstract contract TimedCrowdsale is Crowdsale {\\n    using ConfigHelper for Registry;\\n    uint256 public openingTime;\\n    uint256 public closingTime;\\n\\n    bool public isEnableTimeLimit;\\n\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n    event UpdateUsingTimeLimit(bool isEnableTimeLimit);\\n    event UpdateSaleRoundTime(uint256 newOpeningTime, uint256 newClosingTime);\\n\\n    function __TimedCrowdsale__init(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency\\n    ) internal onlyInitializing {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        isEnableTimeLimit = true;\\n    }\\n\\n    modifier onlyWhileOpen() {\\n        require(isOpen() || isLongSale(), 'TimedCrowdsale: not open');\\n        _;\\n    }\\n\\n    function isOpen() public view returns (bool) {\\n        if (!isEnableTimeLimit) {\\n            return true;\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n    }\\n\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > closingTime;\\n    }\\n\\n    /// @notice Updates the closing time with the new closing time\\n    function extendTime(uint256 newClosingTime) external whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        require(newClosingTime > closingTime, 'TimedCrowdsale: new closing time is before current closing time');\\n\\n        emit TimedCrowdsaleExtended(closingTime, newClosingTime);\\n        closingTime = newClosingTime;\\n    }\\n\\n    /// @notice Updates the opening time and closing time accordingly\\n    function newSaleRoundTime(uint256 newOpeningTime, uint256 newClosingTime) public whenNotPaused {\\n        require(\\n            hasRole(OWNER_ROLE, _msgSender()) || _msgSender() == address(registry.getSecuritizationManager()),\\n            'Crowdsale: Caller must be owner or pool'\\n        );\\n        require(newClosingTime >= newOpeningTime, 'TimedCrowdsale: opening time is not before closing time');\\n        // not accept opening time in the past\\n        if (newOpeningTime < block.timestamp) {\\n            newOpeningTime = block.timestamp;\\n        }\\n\\n        if (newClosingTime <= newOpeningTime) {\\n            newClosingTime = newOpeningTime + 1;\\n        }\\n\\n        openingTime = newOpeningTime;\\n        closingTime = newClosingTime;\\n\\n        emit UpdateSaleRoundTime(newOpeningTime, newClosingTime);\\n    }\\n\\n    /// @dev Sets the isEnableTimeLimit variable to the specified value\\n    function setUsingTimeLimit(bool usingTimeLimit) public whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        isEnableTimeLimit = usingTimeLimit;\\n        emit UpdateUsingTimeLimit(usingTimeLimit);\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x87e33a441f27224b176f65c1162b5426ccffa335664e45abee598a57be8226ff\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/fab/INoteTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../../storage/Registry.sol';\\nimport '../../../interfaces/INoteToken.sol';\\n\\ninterface INoteTokenFactory {\\n    event TokenCreated(\\n        address indexed token,\\n        address indexed poolAddress,\\n        Configuration.NOTE_TOKEN_TYPE indexed tokenType,\\n        uint8 decimals,\\n        string ticker\\n    );\\n\\n    event UpdateNoteTokenImplementation(address indexed newAddress);\\n\\n    function tokens(uint256 idx) external view returns (INoteToken);\\n\\n    function isExistingTokens(address tokenAddress) external view returns (bool);\\n\\n    function changeMinterRole(address token, address newController) external;\\n\\n    function setNoteTokenImplementation(address newAddress) external;\\n\\n    function noteTokenImplementation() external view returns (address);\\n\\n    /// @notice Creates a new NoteToken contract instance with the specified parameters\\n    /// Initializes the token with the provided parameters, including the pool address and note token type\\n    function createToken(\\n        address poolAddress,\\n        Configuration.NOTE_TOKEN_TYPE noteTokenType,\\n        uint8 _nDecimals,\\n        string calldata ticker\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xc237871bfafcb3072c1a9fc0941140ad70628a9350f941cd965e0a17fb569349\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/note-sale/fab/ITokenGenerationEventFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../../storage/Registry.sol';\\nimport '../../../interfaces/INoteToken.sol';\\n\\nabstract contract ITokenGenerationEventFactory {\\n    enum SaleType {\\n        MINTED_INCREASING_INTEREST_SOT,\\n        NORMAL_SALE_JOT,\\n        NORMAL_SALE_SOT\\n    }\\n\\n    event UpdateTGEImplAddress(SaleType indexed tgeType, address newImpl);\\n    event TokenGenerationEventCreated(address indexed tgeInstance);\\n\\n    Registry public registry;\\n    address[] public tgeAddresses;\\n    mapping(address => bool) public isExistingTge;\\n    mapping(SaleType => address) public TGEImplAddress;\\n\\n    /// @notice creates a new TGE instance based on the provided parameters and the sale type\\n    function createNewSaleInstance(\\n        address issuerTokenController,\\n        // address pool,\\n        address token,\\n        address currency,\\n        uint8 saleType,\\n        bool longSale\\n    ) external virtual returns (address);\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xac1b20b6e77819a1ed6871a5a080568d782692bd3e95fa880ab63721705cf788\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/IDistributionAssessor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\nimport './ISecuritizationPool.sol';\\n\\ninterface IDistributionAssessor {\\n    struct NoteToken {\\n        address poolAddress;\\n        address noteTokenAddress;\\n        uint256 balance;\\n        uint256 apy;\\n    }\\n\\n    /// @notice current individual asset price for the \\\"SOT\\\" tranche at the current timestamp\\n    function getSOTTokenPrice(address securitizationPool) external view returns (uint256);\\n\\n    /// @notice calculates the token price for the \\\"JOT\\\" tranche at the current timestamp\\n    function getJOTTokenPrice(address securitizationPool) external view returns (uint256);\\n\\n    /// @notice calculates the token price for a specific token address in the securitization pool\\n    function calcTokenPrice(address pool, address tokenAddress) external view returns (uint256);\\n\\n    function getTokenValues(\\n        address[] calldata tokenAddresses,\\n        address[] calldata investors\\n    ) external view returns (uint256[] memory);\\n\\n    function getTokenPrices(\\n        address[] calldata pools,\\n        address[] calldata tokenAddresses\\n    ) external view returns (uint256[] memory);\\n\\n    function getExternalTokenInfos(address poolAddress) external view returns (NoteToken[] memory);\\n\\n    /// @notice the available cash balance in the securitization pool\\n    function getCashBalance(address pool) external view returns (uint256);\\n\\n    /// @notice calculates the corresponding total asset value for a specific token address, investor, and end time\\n    function calcCorrespondingTotalAssetValue(address tokenAddress, address investor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x76f99c63be5edb9c4b9bb2938b0f22e6b5cb43596abee9463b50511cc5d95708\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/INoteTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface INoteTokenVault {\\n    event RedeemOrder(\\n        address pool,\\n        address noteTokenAddress,\\n        address usr,\\n        uint256 noteTokenRedeemAmount,\\n        uint256 noteTokenPrice\\n    );\\n    event CancelOrder(address pool, address noteTokenAddress, address usr, uint256 noteTokenRedeemAmount);\\n    event PreDistribute(\\n        address pool,\\n        uint256 totalCurrencyAmount,\\n        address[] noteTokenAddresses,\\n        uint256[] totalRedeemedNoteAmounts\\n    );\\n    event DisburseOrder(\\n        address pool,\\n        address noteTokenAddress,\\n        address[] toAddresses,\\n        uint256[] amounts,\\n        uint256[] redeemedAmount\\n    );\\n    event SetRedeemDisabled(address pool, bool _redeemDisabled);\\n\\n    /// @title UserOrder\\n    /// @dev Represents a user's order containing the amount of SOT and JOT to redeem.\\n    struct UserOrder {\\n        uint256 redeemSOTAmount;\\n        uint256 redeemJOTAmount;\\n    }\\n\\n    struct RedeemOrderParam {\\n        address pool;\\n        address noteTokenAddress;\\n        uint256 noteTokenRedeemAmount;\\n    }\\n\\n    struct CancelOrderParam {\\n        address pool;\\n        address noteTokenAddress;\\n        uint256 maxTimestamp;\\n    }\\n\\n    /// @notice redeemJOTOrder function can be used to place or revoke a redeem\\n    function redeemOrder(RedeemOrderParam calldata redeemParam, bytes calldata signature) external;\\n\\n    /// @dev Disburses funds and handles JOT redemptions for a pool.\\n    /// @param pool The address of the pool contract.\\n    /// @param toAddresses An array of recipient addresses.\\n    /// @param currencyAmounts An array of amounts to disburse to each recipient.\\n    /// @param redeemedNoteAmounts An array of JOT amounts redeemed by each recipient.\\n    /// @notice Only accessible by BACKEND_ADMIN role.\\n    function disburseAll(\\n        address pool,\\n        address noteTokenAddress,\\n        address[] memory toAddresses,\\n        uint256[] memory currencyAmounts,\\n        uint256[] memory redeemedNoteAmounts\\n    ) external;\\n\\n    function cancelOrder(CancelOrderParam memory cancelParam, bytes calldata signature) external;\\n\\n    /// @notice Pause redeem request\\n    function setRedeemDisabled(address pool, bool _redeemDisabled) external;\\n\\n    /// @notice Total amount of SOT redeem order\\n    function totalSOTRedeem(address pool) external view returns (uint256);\\n\\n    /// @notice Get redeem disabled\\n    function redeemDisabled(address pool) external view returns (bool);\\n\\n    /// @notice Total amount of JOT redeem order\\n    function totalJOTRedeem(address pool) external view returns (uint256);\\n\\n    /// @dev Retrieves the amount of JOT tokens that can be redeemed for the specified user.\\n    /// @param usr The address of the user for which to retrieve the redeemable JOT amount.\\n    /// @return The amount of JOT tokens that can be redeemed by the user.\\n    function userRedeemJOTOrder(address pool, address usr) external view returns (uint256);\\n\\n    function userRedeemSOTOrder(address pool, address usr) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x879f4ebdf15bd7637b37fbf2d52266f95a3d6ac98caedc517a4fa6b82af812b5\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {RegistryInjection} from './RegistryInjection.sol';\\n\\nimport {OWNER_ROLE, ORIGINATOR_ROLE} from './types.sol';\\n\\ninterface ISecuritizationAccessControl {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function isOwner(address account) external view returns (bool);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x9960239e6ce5e2833a8170d942b00301f952bf83eb73da091203a05d1ea638f3\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../storage/Registry.sol';\\nimport './ISecuritizationPool.sol';\\nimport {ISecuritizationPoolStorage} from './ISecuritizationPoolStorage.sol';\\n\\ninterface ISecuritizationManager {\\n    event NewTGECreated(address indexed instanceAddress);\\n    event NewNotesTokenCreated(address indexed instanceAddress);\\n    event NewPoolCreated(address indexed instanceAddress);\\n    event NewPoolDeployed(\\n        address indexed instanceAddress,\\n        address poolOwner,\\n        ISecuritizationPoolStorage.NewPoolParams newPoolParams\\n    );\\n    event UpdatePotToPool(address indexed pot, address indexed pool);\\n    event SotDeployed(address indexed sotAddress, address tgeAddress, address poolAddress);\\n    event JotDeployed(address indexed jotAddress, address tgeAddress, address poolAddress);\\n\\n    event SetupSot(\\n        address indexed sotAddress,\\n        address tgeAddress,\\n        address poolAddress,\\n        TGEParam tgeParam,\\n        NewRoundSaleParam saleParam,\\n        IncreasingInterestParam increasingInterestParam\\n    );\\n    event SetupJot(\\n        address indexed jotAddress,\\n        address tgeAddress,\\n        address poolAddress,\\n        TGEParam tgeParam,\\n        NewRoundSaleParam saleParam,\\n        uint256 initialJOTAmount\\n    );\\n\\n    event UpdateAllowedUIDTypes(uint256[] uids);\\n    event TokensPurchased(address indexed investor, address indexed tgeAddress, uint256 amount, uint256 tokenAmount);\\n    event NoteTokenPurchased(\\n        address indexed investor,\\n        address indexed tgeAddress,\\n        address poolAddress,\\n        uint256 amount,\\n        uint256 tokenAmount\\n    );\\n\\n    event UpdateTGEInfo(TGEInfoParam[] tgeInfos);\\n\\n    event ValidatorRegistered(address validator);\\n    event ValidatorUnRegistered(address validator);\\n\\n    struct NewRoundSaleParam {\\n        uint256 openingTime;\\n        uint256 closingTime;\\n        uint256 rate;\\n        uint256 cap;\\n    }\\n    struct TGEParam {\\n        address issuerTokenController;\\n        address pool;\\n        uint256 minBidAmount;\\n        bool longSale;\\n        string ticker;\\n        uint8 saleType;\\n    }\\n\\n    struct IncreasingInterestParam {\\n        uint32 initialInterest;\\n        uint32 finalInterest;\\n        uint32 timeInterval;\\n        uint32 amountChangeEachInterval;\\n    }\\n\\n    struct TGEInfoParam {\\n        address tgeAddress;\\n        uint256 totalCap;\\n        uint256 minBidAmount;\\n    }\\n\\n    function registry() external view returns (Registry);\\n\\n    function isExistingPools(address pool) external view returns (bool);\\n\\n    function pools(uint256 idx) external view returns (address);\\n\\n    function potToPool(address pot) external view returns (address);\\n\\n    function isExistingTGEs(address tge) external view returns (bool);\\n\\n    function hasAllowedUID(address sender) external view returns (bool);\\n\\n    /// @dev Register pot to pool instance\\n    /// @param pot Pool linked wallet\\n    function registerPot(address pot) external;\\n}\\n\",\"keccak256\":\"0x1acad0c191e05af380037b4ec70fc12ba4ed0b90c43b99ecc22ec131fe99cd3d\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../storage/Registry.sol';\\nimport '../../base/UntangledBase.sol';\\nimport '../../libraries/Configuration.sol';\\n\\nimport {RiskScore, LoanEntry} from './base/types.sol';\\n\\nimport {ISecuritizationPoolStorage} from './ISecuritizationPoolStorage.sol';\\n\\ninterface ISecuritizationPool {\\n    event CollectNFTAsset(uint256[] tokenIds, uint256 expectedAssetsValue);\\n    // event UpdateOpeningBlockTimestamp(uint256 newTimestamp);\\n    event SecuritizationPoolWithdraw(address originatorAddress, uint256 amount);\\n    event CollectERC20Asset(address token, uint256 amount);\\n    event WithdrawERC20Asset(address[] tokenAddresses, address[] recipients, uint256[] amounts);\\n    event InsertNFTAsset(address token, uint256 tokenId);\\n    event ExportNFTAsset(address tokenAddress, address toPoolAddress, uint256[] tokenIds);\\n    event WithdrawNFTAsset(address[] tokenAddresses, uint256[] tokenIds, address[] recipients);\\n    event SetRiskScore(RiskScore[] riskscores);\\n    event UpdateTGEAddress(address tge, address token, Configuration.NOTE_TOKEN_TYPE noteType);\\n    event UpdateLockedDistributeBalance(\\n        address indexed tokenAddress,\\n        address indexed investor,\\n        uint256 lockedDistributeBalance,\\n        uint256 lockedRedeemBalances,\\n        uint256 totalLockedRedeemBalances,\\n        uint256 totalLockedDistributeBalance\\n    );\\n    event UpdateReserve(uint256 currencyAmount);\\n    event UpdatePaidPrincipalAmountSOTByInvestor(address indexed user, uint256 currencyAmount);\\n\\n    /// @notice A view function that returns the length of the NFT (non-fungible token) assets array\\n    function getNFTAssetsLength() external view returns (uint256);\\n\\n    /// @notice A view function that returns an array of token asset addresses\\n    function getTokenAssetAddresses() external view returns (address[] memory);\\n\\n    /// @notice A view function that returns the length of the token asset addresses array\\n    function getTokenAssetAddressesLength() external view returns (uint256);\\n\\n    /// @notice Riks scores length\\n    /// @return the length of the risk scores array\\n    function getRiskScoresLength() external view returns (uint256);\\n\\n    function riskScores(uint256 index) external view returns (RiskScore memory);\\n\\n    /// @notice sets up the risk scores for the contract for pool\\n    function setupRiskScores(\\n        uint32[] calldata _daysPastDues,\\n        uint32[] calldata _ratesAndDefaults,\\n        uint32[] calldata _periodsAndWriteOffs\\n    ) external;\\n\\n    /// @notice exports NFT assets to another pool address\\n    function exportAssets(address tokenAddress, address toPoolAddress, uint256[] calldata tokenIds) external;\\n\\n    /// @notice withdraws NFT assets from the contract and transfers them to recipients\\n    function withdrawAssets(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds,\\n        address[] calldata recipients\\n    ) external;\\n\\n    /// @notice collects NFT assets from a specified address\\n    function collectAssets(uint256[] calldata tokenIds, LoanEntry[] calldata loanEntries) external returns (uint256);\\n\\n    /// @notice collects ERC20 assets from specified senders\\n    function collectERC20Asset(address tokenAddresss) external;\\n\\n    /// @notice withdraws ERC20 assets from the contract and transfers them to recipients\\\\\\n    function withdrawERC20Assets(\\n        address[] calldata tokenAddresses,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function nftAssets(uint256 idx) external view returns (ISecuritizationPoolStorage.NFTAsset memory);\\n\\n    function tokenAssetAddresses(uint256 idx) external view returns (address);\\n\\n    /// @dev Trigger set up opening block timestamp\\n    function setUpOpeningBlockTimestamp() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xa5abe910b772a2ad669384f2a2012d29b65609708d87c42cea4a545657e2fb93\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../storage/Registry.sol';\\n\\nimport {RiskScore} from './base/types.sol';\\nimport 'contracts/libraries/UnpackLoanParamtersLib.sol';\\n\\ninterface ISecuritizationPoolStorage {\\n    event UpdateOpeningBlockTimestamp(uint256 newTimestamp);\\n\\n    struct NFTAsset {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    enum CycleState {\\n        INITIATED,\\n        CROWDSALE,\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    struct NewPoolParams {\\n        address currency;\\n        uint32 minFirstLossCushion;\\n        bool validatorRequired;\\n        uint256 debtCeiling;\\n    }\\n\\n    /// @notice details of the underlying collateral\\n    struct NFTDetails {\\n        uint128 futureValue;\\n        uint128 maturityDate;\\n        uint128 risk;\\n        address debtor;\\n        address principalTokenAddress;\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n        bytes32 termsParam;\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 interestRate;\\n    }\\n\\n    /// @notice stores all needed information of an interest rate group\\n    struct Rate {\\n        // total debt of all loans with this rate\\n        uint256 pie;\\n        // accumlated rate index over time\\n        uint256 chi;\\n        // interest rate per second\\n        uint256 ratePerSecond;\\n        // penalty rate per second\\n        uint256 penaltyRatePerSecond;\\n        // accumlated penalty rate index over time\\n        uint256 penaltyChi;\\n        // last time the rate was accumulated\\n        uint48 lastUpdated;\\n        // time start to penalty\\n        uint48 timeStartPenalty;\\n    }\\n\\n    /// @notice details of the loan\\n    struct LoanDetails {\\n        uint128 borrowed;\\n        // only auth calls can move loan into different writeOff group\\n        bool authWriteOff;\\n    }\\n\\n    /// @notice details of the write off group\\n    struct WriteOffGroup {\\n        // denominated in (10^27)\\n        uint128 percentage;\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\n        uint128 overdueDays;\\n        uint128 riskIndex;\\n    }\\n\\n    struct Storage {\\n        bool validatorRequired;\\n        uint64 firstAssetTimestamp;\\n        RiskScore[] riskScores;\\n        NFTAsset[] nftAssets;\\n        address[] tokenAssetAddresses;\\n        mapping(address => bool) existsTokenAssetAddress;\\n        // TGE\\n        address tgeAddress;\\n        address secondTGEAddress;\\n        address sotToken;\\n        address jotToken;\\n        address underlyingCurrency;\\n        uint256 reserve; // Money in pool\\n        uint32 minFirstLossCushion;\\n        uint64 openingBlockTimestamp;\\n        // by default it is address(this)\\n        address pot;\\n        // for base (sell-loan) operation\\n        uint256 paidPrincipalAmountSOT;\\n        uint32 interestRateSOT; // Annually, support 4 decimals num\\n        uint256 totalAssetRepaidCurrency;\\n        uint64 reserveUpdateTime;\\n        mapping(address => uint256) paidPrincipalAmountSOTByInvestor;\\n        uint256 debtCeiling;\\n        CycleState state;\\n        // lock distribution\\n        mapping(address => mapping(address => uint256)) lockedDistributeBalances;\\n        uint256 totalLockedDistributeBalance;\\n        mapping(address => mapping(address => uint256)) lockedRedeemBalances;\\n        // token address -> total locked\\n        mapping(address => uint256) totalLockedRedeemBalances;\\n        uint256 totalRedeemedCurrency; // Total $ (cUSD) has been redeemed\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\n        mapping(uint256 => Rate) rates;\\n        mapping(uint256 => uint256) pie;\\n        /// @notice mapping from loan => rate\\n        mapping(uint256 => uint256) loanRates;\\n        /// @notice mapping from loan => grace time\\n\\n        uint256 loanCount;\\n        mapping(uint256 => uint256) balances;\\n        uint256 balance;\\n        // nft => details\\n        mapping(bytes32 => NFTDetails) details;\\n        // loan => details\\n        mapping(uint256 => LoanDetails) loanDetails;\\n        // timestamp => bucket\\n        mapping(uint256 => uint256) buckets;\\n        WriteOffGroup[] writeOffGroups;\\n        // Write-off groups will be added as rate groups to the pile with their index\\n        // in the writeOffGroups array + this number\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\n        // The discount decreases with the maturityDate approaching.\\n        // denominated in (10^27)\\n        uint256 discountRate;\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\n        uint256 latestNAV;\\n        uint256 latestDiscount;\\n        uint256 lastNAVUpdate;\\n        // overdue loans are loans which passed the maturity date but are not written-off\\n        uint256 overdueLoans;\\n        // tokenId => latestDiscount\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\n        mapping(uint256 => bytes32) loanToNFT;\\n    }\\n\\n    function tgeAddress() external view returns (address);\\n\\n    function secondTGEAddress() external view returns (address);\\n\\n    function state() external view returns (CycleState);\\n\\n    /// @notice checks if the contract is in a closed state\\n    function isClosedState() external view returns (bool);\\n\\n    function pot() external view returns (address);\\n\\n    function validatorRequired() external view returns (bool);\\n\\n    function openingBlockTimestamp() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x339fb69883d83097feaa9a9f905a3e8b90898ad11545ad352764665c4847c35e\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationPoolValueService.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface ISecuritizationPoolValueService {\\n    /// @notice calculates the total expected value of all assets in the securitization pool at a given timestamp\\n    /// @dev iterates over the NFT assets and token assets in the pool, calling getExpectedAssetValue\\n    /// or getExpectedERC20AssetValue for each asset and summing up the values\\n    function getExpectedAssetsValue(address poolAddress) external view returns (uint256 expectedAssetsValue);\\n\\n    /// @notice the amount which belongs to the senior investor (SOT) in a pool\\n    /// @dev  calculates  the amount which accrues interest for the senior tranche in the securitization pool at a given timestamp\\n    function getSeniorAsset(address poolAddress) external view returns (uint256);\\n\\n    /// @notice calculates  the amount of Junior Debt at the current time\\n    function getJuniorAsset(address poolAddress) external view returns (uint256);\\n\\n    /// @notice returns the rate that belongs to Junior investors at the current time\\n    function getJuniorRatio(address poolAddress) external view returns (uint256);\\n\\n    function getPoolValue(address poolAddress) external view returns (uint256);\\n\\n    function getSeniorDebt(address poolAddress) external view returns (uint256);\\n\\n    function getBeginningSeniorDebt(address poolAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19cf5347e1180c49cdd00088ac91e465ce59d910e6810aff7beeeee13a0e2c81\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/ISecuritizationTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {Configuration} from '../../libraries/Configuration.sol';\\n\\ninterface ISecuritizationTGE {\\n    event UpdateTGEAddress(address tge, Configuration.NOTE_TOKEN_TYPE noteType);\\n    event UpdatePaidPrincipalAmountSOTByInvestor(address indexed user, uint256 currencyAmount);\\n    event IncreaseReserve(uint256 increasingAmount, uint256 currencyAmount);\\n    event DecreaseReserve(uint256 decreasingAmount, uint256 currencyAmount);\\n    event UpdateDebtCeiling(uint256 _debtCeiling);\\n    event UpdateMintFirstLoss(uint32 _mintFirstLoss);\\n    event Withdraw(address originatorAddress, uint256 amount);\\n    event ClaimCashRemain(address pot, address recipientWallet, uint256 balance);\\n    event StartCycle(uint32 interestRateSOT);\\n\\n    /// @notice sets the pot address for the contract\\n    function setPot(address _pot) external;\\n\\n    /// @notice sets debt ceiling value\\n    function setDebtCeiling(uint256 _debtCeiling) external;\\n\\n    /// @notice sets mint first loss value\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external;\\n\\n    // function pot() external view returns (address);\\n\\n    /// @dev trigger update reserve when buy note token action happens\\n    function increaseReserve(uint256 currencyAmount) external;\\n\\n    /// @dev trigger update reserve\\n    function decreaseReserve(uint256 currencyAmount) external;\\n\\n    // function tgeAddress() external view returns (address);\\n\\n    // function secondTGEAddress() external view returns (address);\\n\\n    function sotToken() external view returns (address);\\n\\n    function jotToken() external view returns (address);\\n\\n    function underlyingCurrency() external view returns (address);\\n\\n    function paidPrincipalAmountSOT() external view returns (uint256);\\n\\n    function paidPrincipalAmountSOTByInvestor(address user) external view returns (uint256);\\n\\n    function reserve() external view returns (uint256);\\n\\n    function debtCeiling() external view returns (uint256);\\n\\n    function interestRateSOT() external view returns (uint32); // Annually, support 4 decimals num\\n\\n    function minFirstLossCushion() external view returns (uint32);\\n\\n    function reserveUpdateTime() external view returns (uint64);\\n\\n    function totalAssetRepaidCurrency() external view returns (uint256); // Total $ (cUSD) paid for Asset repayment - repayInBatch\\n\\n    /// @notice injects the address of the Token Generation Event (TGE) and the associated token address\\n    function injectTGEAddress(\\n        address _tgeAddress,\\n        // address _tokenAddress,\\n        Configuration.NOTE_TOKEN_TYPE _noteToken\\n    ) external;\\n\\n    /// @dev trigger update asset value repaid\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external;\\n\\n    /// @dev Disburses a specified amount of currency to the given user.\\n    /// @param usr The address of the user to receive the currency.\\n    /// @param currencyAmount The amount of currency to disburse.\\n    function disburse(address usr, uint256 currencyAmount) external;\\n\\n    /// @notice checks if the redemption process has finished\\n    function hasFinishedRedemption() external view returns (bool);\\n\\n    ///@notice check current debt ceiling is valid\\n    function isDebtCeilingValid() external view returns (bool);\\n\\n    function claimCashRemain(address recipientWallet) external;\\n\\n    // function openingBlockTimestamp() external view returns (uint64);\\n\\n    function startCycle() external;\\n\\n    /// @notice allows the originator to withdraw from reserve\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd1b6c3010542e8c51a5433f29c9cc8c5db7bbdf57783e1724b388f777beca265\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/RegistryInjection.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport {Registry} from '../../storage/Registry.sol';\\n\\ncontract RegistryInjection {\\n    // keccak256(abi.encode(uint256(keccak256(\\\"untangled.storage.RegistryInjection\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant RegistryInjectionStorageLocation =\\n        0x5f6bd0daaaf246715f06ec0ea7e99af4468b70381a38e1f10cb19776ed17ce00;\\n\\n    event UpdateRegistry(address registry);\\n\\n    /// @custom:storage-location erc7201:untangled.storage.RegistryInjection\\n    struct RegistryInjectionStorage {\\n        Registry registry;\\n    }\\n\\n    function _getRegistryInjection() private pure returns (RegistryInjectionStorage storage $) {\\n        assembly {\\n            $.slot := RegistryInjectionStorageLocation\\n        }\\n    }\\n\\n    function _setRegistry(Registry _registry) internal {\\n        RegistryInjectionStorage storage $ = _getRegistryInjection();\\n        $.registry = _registry;\\n        emit UpdateRegistry(address(_registry));\\n    }\\n\\n    function registry() public view returns (Registry) {\\n        return _getRegistryInjection().registry;\\n    }\\n}\\n\",\"keccak256\":\"0x524c3ebcec30b924610993a491175f6a6f3452b2e6ed3c6b83af87f77461c81e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/protocol/pool/SecuritizationAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {RegistryInjection} from './RegistryInjection.sol';\\n\\nimport {OWNER_ROLE, ORIGINATOR_ROLE} from './types.sol';\\n\\nimport {ISecuritizationAccessControl} from './ISecuritizationAccessControl.sol';\\nimport {ISecuritizationPoolStorage} from './ISecuritizationPoolStorage.sol';\\nimport {ISecuritizationPoolExtension, SecuritizationPoolExtension} from './SecuritizationPoolExtension.sol';\\n\\ncontract SecuritizationAccessControl is\\n    ERC165Upgradeable,\\n    RegistryInjection,\\n    ContextUpgradeable,\\n    ISecuritizationAccessControl,\\n    SecuritizationPoolExtension\\n{\\n    // keccak256(abi.encode(uint256(keccak256(\\\"untangled.storage.SecuritizationAccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant SecuritizationAccessControlStorageLocation =\\n        0xb38e00afe21f8bf8961a30ad85d453b5f474f19414b8973dee80c89fb0d97b00;\\n\\n    /// @custom:storage-location erc7201:untangled.storage.SecuritizationAccessControl\\n    struct SecuritizationAccessControlStorage {\\n        mapping(address => mapping(bytes32 => bool)) roles;\\n    }\\n\\n    function _getSecuritizationAccessControl() private pure returns (SecuritizationAccessControlStorage storage $) {\\n        assembly {\\n            $.slot := SecuritizationAccessControlStorageLocation\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        address account = _msgSender();\\n\\n        require(isOwner(account), 'AccessControl: caller is not an owner');\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, _msgSender()), 'AccessControl: caller is not an originator');\\n        _;\\n    }\\n\\n    function installExtension(bytes memory params) public virtual override onlyCallInTargetPool {\\n        __SecuritizationAccessControl_init_unchained(_msgSender());\\n    }\\n\\n    function __SecuritizationAccessControl_init_unchained(address _owner) internal {\\n        _setRole(OWNER_ROLE, _owner);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        SecuritizationAccessControlStorage storage $ = _getSecuritizationAccessControl();\\n        return $.roles[account][role];\\n    }\\n\\n    function isOwner(address account) public view override returns (bool) {\\n        return hasRole(OWNER_ROLE, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public virtual override onlyOwner {\\n        SecuritizationAccessControlStorage storage $ = _getSecuritizationAccessControl();\\n        $.roles[account][role] = true;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public virtual override onlyOwner {\\n        SecuritizationAccessControlStorage storage $ = _getSecuritizationAccessControl();\\n        $.roles[account][role] = false;\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    function _setRole(bytes32 role, address account) internal virtual {\\n        SecuritizationAccessControlStorage storage $ = _getSecuritizationAccessControl();\\n        $.roles[account][role] = true;\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        SecuritizationAccessControlStorage storage $ = _getSecuritizationAccessControl();\\n        $.roles[account][role] = false;\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), 'AccessControl: can only renounce roles for self');\\n        _revokeRole(role, account);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            super.supportsInterface(interfaceId) ||\\n            type(ISecuritizationAccessControl).interfaceId == interfaceId ||\\n            type(ISecuritizationPoolExtension).interfaceId == interfaceId;\\n    }\\n\\n    function getFunctionSignatures() public view virtual override returns (bytes4[] memory) {\\n        bytes4[] memory _functionSignatures = new bytes4[](6);\\n\\n        _functionSignatures[0] = this.hasRole.selector;\\n        _functionSignatures[1] = this.isOwner.selector;\\n        _functionSignatures[2] = this.renounceRole.selector;\\n        _functionSignatures[3] = this.grantRole.selector;\\n        _functionSignatures[4] = this.revokeRole.selector;\\n        _functionSignatures[5] = this.supportsInterface.selector;\\n\\n        return _functionSignatures;\\n    }\\n}\\n\",\"keccak256\":\"0x58e7fa9d9e2422220067ff3ccbd9b195a81e75667116c0af4f1195ef93c258ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/SecuritizationPoolExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface ISecuritizationPoolLike {\\n    function original() external view returns (address);\\n}\\n\\n/**\\n * @title Untangled's SecuritizationPool contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Untangled Team\\n */\\ninterface ISecuritizationPoolExtension {\\n    function installExtension(bytes memory params) external;\\n\\n    function getFunctionSignatures() external view returns (bytes4[] memory);\\n}\\n\\nabstract contract SecuritizationPoolExtension is ISecuritizationPoolExtension {\\n    modifier onlyCallInTargetPool() {\\n        ISecuritizationPoolLike current = ISecuritizationPoolLike(address(this));\\n        // current contract is not poolImpl, => delegate call\\n        require(current.original() != address(this), 'Only call in target pool');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xedca1afef4c58b0e56d52bb1622c5075c66363e6d45e8630cd8ddc3192886074\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/SecuritizationPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {ISecuritizationPoolStorage} from './ISecuritizationPoolStorage.sol';\\nimport {RiskScore} from './base/types.sol';\\nimport {RegistryInjection} from './RegistryInjection.sol';\\nimport {ISecuritizationPoolExtension, SecuritizationPoolExtension} from './SecuritizationPoolExtension.sol';\\n\\ncontract SecuritizationPoolStorage is\\n    ERC165Upgradeable,\\n    RegistryInjection,\\n    SecuritizationPoolExtension,\\n    ISecuritizationPoolStorage\\n{\\n    // keccak256(abi.encode(uint256(keccak256(\\\"untangled.storage.SecuritizationPoolStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant StorageLocation = 0x42988f810f621c79bb2e8db2f913a015fc39ef8eac016043863c6a0d12adbf00;\\n\\n    modifier onlyIssuingTokenStage() {\\n        CycleState _state = state();\\n        require(_state != CycleState.OPEN && _state != CycleState.CLOSED, 'Not in issuing token stage');\\n        _;\\n    }\\n\\n    modifier notClosingStage() {\\n        require(!isClosedState(), 'SecuritizationPool: Pool in closed state');\\n        _;\\n    }\\n\\n    function _getStorage() internal pure returns (Storage storage $) {\\n        assembly {\\n            $.slot := StorageLocation\\n        }\\n    }\\n\\n    function installExtension(bytes memory params) public virtual override onlyCallInTargetPool {\\n        __SecuritizationPoolStorage_init_unchained(abi.decode(params, (NewPoolParams)));\\n    }\\n\\n    function __SecuritizationPoolStorage_init_unchained(NewPoolParams memory _newPoolParams) internal {}\\n\\n    function tgeAddress() public view virtual override returns (address) {\\n        Storage storage $ = _getStorage();\\n        return $.tgeAddress;\\n    }\\n\\n    function pot() public view returns (address) {\\n        return _getStorage().pot;\\n    }\\n\\n    function openingBlockTimestamp() public view override returns (uint64) {\\n        Storage storage $ = _getStorage();\\n        return $.openingBlockTimestamp;\\n    }\\n\\n    function state() public view override returns (CycleState) {\\n        return _getStorage().state;\\n    }\\n\\n    /// @notice checks if the contract is in a closed state\\n    function isClosedState() public view override returns (bool) {\\n        return state() == CycleState.CLOSED;\\n    }\\n\\n    function secondTGEAddress() public view virtual override returns (address) {\\n        return _getStorage().secondTGEAddress;\\n    }\\n\\n    function validatorRequired() public view virtual override returns (bool) {\\n        return _getStorage().validatorRequired;\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            super.supportsInterface(_interfaceId) ||\\n            type(ISecuritizationPoolStorage).interfaceId == _interfaceId ||\\n            type(ISecuritizationPoolExtension).interfaceId == _interfaceId;\\n    }\\n\\n    function getFunctionSignatures() public view virtual override returns (bytes4[] memory) {\\n        bytes4[] memory _functionSignatures = new bytes4[](8);\\n\\n        _functionSignatures[0] = this.tgeAddress.selector;\\n        _functionSignatures[1] = this.secondTGEAddress.selector;\\n        _functionSignatures[2] = this.state.selector;\\n        _functionSignatures[3] = this.isClosedState.selector;\\n        _functionSignatures[4] = this.pot.selector;\\n        _functionSignatures[5] = this.validatorRequired.selector;\\n        _functionSignatures[6] = this.openingBlockTimestamp.selector;\\n        _functionSignatures[7] = this.supportsInterface.selector;\\n\\n        return _functionSignatures;\\n    }\\n}\\n\",\"keccak256\":\"0x83a3d12da6cc3219de64f57bf0790084344e2161b6e2f3423f14829c59ce20ae\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/SecuritizationTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {ERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport {PausableUpgradeable} from '../../base/PauseableUpgradeable.sol';\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport {Registry} from '../../storage/Registry.sol';\\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\\nimport {ISecuritizationTGE} from './ISecuritizationTGE.sol';\\nimport {Configuration} from '../../libraries/Configuration.sol';\\nimport {ISecuritizationPoolValueService} from './ISecuritizationPoolValueService.sol';\\nimport {RegistryInjection} from './RegistryInjection.sol';\\nimport {SecuritizationAccessControl} from './SecuritizationAccessControl.sol';\\nimport {IMintedTGE} from '../note-sale/IMintedTGE.sol';\\nimport {IFinalizableCrowdsale} from '../note-sale/crowdsale/IFinalizableCrowdsale.sol';\\nimport {SecuritizationPoolStorage} from './SecuritizationPoolStorage.sol';\\nimport {ICrowdSale} from '../note-sale/crowdsale/ICrowdSale.sol';\\n\\nimport {ORIGINATOR_ROLE, RATE_SCALING_FACTOR} from './types.sol';\\n\\ninterface ICrowdSaleLike {\\n    function token() external view returns (address);\\n}\\n\\ncontract SecuritizationTGE is\\n    ERC165Upgradeable,\\n    RegistryInjection,\\n    ContextUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    SecuritizationAccessControl,\\n    SecuritizationPoolStorage,\\n    ISecuritizationTGE\\n{\\n    using ConfigHelper for Registry;\\n\\n    function installExtension(\\n        bytes memory params\\n    ) public virtual override(SecuritizationAccessControl, SecuritizationPoolStorage) onlyCallInTargetPool {\\n        __SecuritizationTGE_init_unchained(abi.decode(params, (NewPoolParams)));\\n    }\\n\\n    function __SecuritizationTGE_init_unchained(NewPoolParams memory params) internal {\\n        Storage storage $ = _getStorage();\\n        $.pot = address(this);\\n        $.state = CycleState.INITIATED;\\n\\n        require(params.currency != address(0), 'SecuritizationPool: Invalid currency');\\n        $.underlyingCurrency = params.currency;\\n\\n        _setMinFirstLossCushion(params.minFirstLossCushion);\\n        _setDebtCeiling(params.debtCeiling);\\n    }\\n\\n    // alias\\n    function sotToken() public view override returns (address) {\\n        address tge = tgeAddress();\\n        if (tge == address(0)) return address(0);\\n        return ICrowdSaleLike(tge).token();\\n    }\\n\\n    // alias\\n    function jotToken() public view override returns (address) {\\n        address tge = secondTGEAddress();\\n        if (tge == address(0)) return address(0);\\n        return ICrowdSaleLike(tge).token();\\n    }\\n\\n    function underlyingCurrency() public view override returns (address) {\\n        return _getStorage().underlyingCurrency;\\n    }\\n\\n    function reserve() public view override returns (uint256) {\\n        return _getStorage().reserve;\\n    }\\n\\n    function minFirstLossCushion() public view override returns (uint32) {\\n        return _getStorage().minFirstLossCushion;\\n    }\\n\\n    function paidPrincipalAmountSOT() public view override returns (uint256) {\\n        return _getStorage().paidPrincipalAmountSOT;\\n    }\\n\\n    function debtCeiling() public view override returns (uint256) {\\n        return _getStorage().debtCeiling;\\n    }\\n\\n    function interestRateSOT() public view override returns (uint32) {\\n        return _getStorage().interestRateSOT;\\n    }\\n\\n    function paidPrincipalAmountSOTByInvestor(address user) public view override returns (uint256) {\\n        return _getStorage().paidPrincipalAmountSOTByInvestor[user];\\n    }\\n\\n    function totalAssetRepaidCurrency() public view override returns (uint256) {\\n        return _getStorage().totalAssetRepaidCurrency;\\n    }\\n\\n    function reserveUpdateTime() public view override returns (uint64) {\\n        return _getStorage().reserveUpdateTime;\\n    }\\n\\n    modifier finishRedemptionValidator() {\\n        require(hasFinishedRedemption(), 'SecuritizationPool: Redemption has not finished');\\n        _;\\n    }\\n\\n    /// @inheritdoc ISecuritizationTGE\\n    function injectTGEAddress(\\n        address _tgeAddress,\\n        Configuration.NOTE_TOKEN_TYPE _noteType\\n    ) external override whenNotPaused onlyIssuingTokenStage {\\n        registry().requireSecuritizationManager(_msgSender());\\n\\n        require(_tgeAddress != address(0), 'SecuritizationPool: Address zero');\\n        address _tokenAddress = ICrowdSaleLike(_tgeAddress).token();\\n        require(_tokenAddress != address(0), 'SecuritizationPool: Address zero');\\n\\n        Storage storage $ = _getStorage();\\n\\n        if (_noteType == Configuration.NOTE_TOKEN_TYPE.SENIOR) {\\n            $.tgeAddress = _tgeAddress;\\n            $.sotToken = _tokenAddress;\\n        } else {\\n            $.secondTGEAddress = _tgeAddress;\\n            $.jotToken = _tokenAddress;\\n        }\\n\\n        $.state = CycleState.CROWDSALE;\\n\\n        emit UpdateTGEAddress(_tgeAddress, _noteType);\\n    }\\n\\n    /// @inheritdoc ISecuritizationTGE\\n    function disburse(address usr, uint256 currencyAmount) external virtual override {\\n        Storage storage $ = _getStorage();\\n        require(\\n            _msgSender() == address(registry().getNoteTokenVault()),\\n            'SecuritizationPool: Caller must be NoteTokenVault'\\n        );\\n        require(\\n            IERC20Upgradeable($.underlyingCurrency).transferFrom($.pot, usr, currencyAmount),\\n            'SecuritizationPool: currency-transfer-failed'\\n        );\\n    }\\n\\n    function checkMinFirstLost() public view virtual returns (bool) {\\n        ISecuritizationPoolValueService poolService = registry().getSecuritizationPoolValueService();\\n        return _getStorage().minFirstLossCushion <= poolService.getJuniorRatio(address(this));\\n    }\\n\\n    function isDebtCeilingValid() public view virtual override returns (bool) {\\n        Storage storage $ = _getStorage();\\n        uint256 totalDebt = 0;\\n        if ($.tgeAddress != address(0)) {\\n            totalDebt += ICrowdSale($.tgeAddress).currencyRaised();\\n        }\\n        if ($.secondTGEAddress != address(0)) {\\n            totalDebt += ICrowdSale($.secondTGEAddress).currencyRaised();\\n        }\\n        return $.debtCeiling >= totalDebt;\\n    }\\n\\n    function hasFinishedRedemption() public view override returns (bool) {\\n        address stoken = sotToken();\\n        if (stoken != address(0)) {\\n            require(IERC20Upgradeable(stoken).totalSupply() == 0, 'SecuritizationPool: SOT still remain');\\n        }\\n\\n        address jtoken = jotToken();\\n        if (jtoken != address(0)) {\\n            require(IERC20Upgradeable(jtoken).totalSupply() == 0, 'SecuritizationPool: JOT still remain');\\n        }\\n\\n        return true;\\n    }\\n\\n    function setPot(address _pot) external override whenNotPaused nonReentrant notClosingStage {\\n        registry().requirePoolAdminOrOwner(address(this), _msgSender());\\n\\n        Storage storage $ = _getStorage();\\n\\n        require($.pot != _pot, 'SecuritizationPool: Same address with current pot');\\n        $.pot = _pot;\\n\\n        if (_pot == address(this)) {\\n            require(\\n                IERC20Upgradeable($.underlyingCurrency).approve(_pot, type(uint256).max),\\n                'SecuritizationPool: Pot not approved'\\n            );\\n        }\\n        registry().getSecuritizationManager().registerPot(_pot);\\n    }\\n\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external override whenNotPaused notClosingStage {\\n        registry().requirePoolAdminOrOwner(address(this), _msgSender());\\n        _setMinFirstLossCushion(_minFirstLossCushion);\\n    }\\n\\n    function _setMinFirstLossCushion(uint32 _minFirstLossCushion) internal {\\n        require(\\n            _minFirstLossCushion <= 100 * RATE_SCALING_FACTOR,\\n            'SecuritizationPool: minFirstLossCushion is greater than 100'\\n        );\\n\\n        Storage storage $ = _getStorage();\\n        $.minFirstLossCushion = _minFirstLossCushion;\\n        emit UpdateMintFirstLoss(_minFirstLossCushion);\\n    }\\n\\n    function setDebtCeiling(uint256 _debtCeiling) external override whenNotPaused notClosingStage {\\n        registry().requirePoolAdminOrOwner(address(this), _msgSender());\\n\\n        _setDebtCeiling(_debtCeiling);\\n    }\\n\\n    function _setDebtCeiling(uint256 _debtCeiling) internal {\\n        Storage storage $ = _getStorage();\\n        $.debtCeiling = _debtCeiling;\\n        emit UpdateDebtCeiling(_debtCeiling);\\n    }\\n\\n    function _setReserveUpdateTime() private {\\n        ISecuritizationPoolValueService poolService = registry().getSecuritizationPoolValueService();\\n        Storage storage $ = _getStorage();\\n\\n        uint256 expectedAssetsValue = poolService.getExpectedAssetsValue(address(this));\\n\\n        if (expectedAssetsValue > 0) {\\n            $.reserveUpdateTime = uint64(block.timestamp);\\n        }\\n    }\\n\\n    function _increaseReserve(uint256 currencyAmount, bool checkMFS) private {\\n        Storage storage $ = _getStorage();\\n        $.reserve = $.reserve + currencyAmount;\\n\\n        if (checkMFS) {\\n            require(checkMinFirstLost(), 'MinFirstLoss is not satisfied');\\n        }\\n\\n        emit IncreaseReserve(currencyAmount, $.reserve);\\n    }\\n\\n    // Increase by value\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external virtual override whenNotPaused {\\n        registry().requireLoanRepaymentRouter(_msgSender());\\n\\n        _increaseReserve(amount, false);\\n        Storage storage $ = _getStorage();\\n        $.totalAssetRepaidCurrency = $.totalAssetRepaidCurrency + amount;\\n        _setReserveUpdateTime();\\n    }\\n\\n    function increaseReserve(uint256 currencyAmount) external override whenNotPaused {\\n        require(\\n            _msgSender() == address(registry().getSecuritizationManager()) ||\\n                _msgSender() == address(registry().getNoteTokenVault()),\\n            'SecuritizationPool: Caller must be SecuritizationManager or NoteTokenVault'\\n        );\\n\\n        _increaseReserve(currencyAmount, true);\\n        _setReserveUpdateTime();\\n    }\\n\\n    function decreaseReserve(uint256 currencyAmount) external override whenNotPaused {\\n        require(\\n            _msgSender() == address(registry().getSecuritizationManager()) ||\\n                _msgSender() == address(registry().getNoteTokenVault()),\\n            'SecuritizationPool: Caller must be SecuritizationManager or DistributionOperator'\\n        );\\n\\n        _decreaseReserve(currencyAmount);\\n        _setReserveUpdateTime();\\n    }\\n\\n    function _decreaseReserve(uint256 currencyAmount) private {\\n        Storage storage $ = _getStorage();\\n        $.reserve = $.reserve - currencyAmount;\\n        require(checkMinFirstLost(), 'MinFirstLoss is not satisfied');\\n\\n        emit DecreaseReserve(currencyAmount, $.reserve);\\n    }\\n\\n    // After closed pool and redeem all not -> get remain cash to recipient wallet\\n    function claimCashRemain(\\n        address recipientWallet\\n    ) external override whenNotPaused onlyOwner finishRedemptionValidator {\\n        Storage storage $ = _getStorage();\\n\\n        IERC20Upgradeable currency = IERC20Upgradeable($.underlyingCurrency);\\n        uint256 balance = currency.balanceOf($.pot);\\n        require(currency.transferFrom($.pot, recipientWallet, balance), 'SecuritizationPool: Transfer failed');\\n\\n        emit ClaimCashRemain($.pot, recipientWallet, balance);\\n    }\\n\\n    function startCycle() external override whenNotPaused nonReentrant onlyIssuingTokenStage {\\n        Storage storage $ = _getStorage();\\n\\n        $.state = CycleState.OPEN;\\n\\n        if ($.tgeAddress != address(0)) {\\n            IMintedTGE mintedTokenGenerationEvent = IMintedTGE($.tgeAddress);\\n            if (!IFinalizableCrowdsale($.tgeAddress).finalized()) {\\n                IFinalizableCrowdsale($.tgeAddress).finalize(false, $.pot);\\n            }\\n            $.interestRateSOT = mintedTokenGenerationEvent.pickedInterest();\\n        }\\n        if ($.secondTGEAddress != address(0)) {\\n            IFinalizableCrowdsale($.secondTGEAddress).finalize(false, $.pot);\\n            require(\\n                IFinalizableCrowdsale($.secondTGEAddress).finalized(),\\n                'SecuritizationPool: second sale is still on going'\\n            );\\n        }\\n\\n        emit StartCycle($.interestRateSOT);\\n    }\\n\\n    function withdraw(address to, uint256 amount) public override whenNotPaused {\\n        registry().requireLoanKernel(_msgSender());\\n        require(hasRole(ORIGINATOR_ROLE, to), 'SecuritizationPool: Only Originator can drawdown');\\n        require(!registry().getNoteTokenVault().redeemDisabled(address(this)), 'SecuritizationPool: withdraw paused');\\n        Storage storage $ = _getStorage();\\n        require($.reserve >= amount, 'SecuritizationPool: not enough reserve');\\n\\n        _decreaseReserve(amount);\\n        require(\\n            IERC20Upgradeable(underlyingCurrency()).transferFrom(pot(), to, amount),\\n            'SecuritizationPool: Transfer failed'\\n        );\\n        _setReserveUpdateTime();\\n        emit Withdraw(to, amount);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, SecuritizationAccessControl, SecuritizationPoolStorage)\\n        returns (bool)\\n    {\\n        return interfaceId == type(ISecuritizationTGE).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function pause() public virtual {\\n        registry().requirePoolAdminOrOwner(address(this), _msgSender());\\n        _pause();\\n    }\\n\\n    function unpause() public virtual {\\n        registry().requirePoolAdminOrOwner(address(this), _msgSender());\\n        _unpause();\\n    }\\n\\n    function getFunctionSignatures()\\n        public\\n        view\\n        virtual\\n        override(SecuritizationAccessControl, SecuritizationPoolStorage)\\n        returns (bytes4[] memory)\\n    {\\n        bytes4[] memory _functionSignatures = new bytes4[](30);\\n\\n        _functionSignatures[1] = this.setPot.selector;\\n        _functionSignatures[2] = this.increaseReserve.selector;\\n        _functionSignatures[3] = this.decreaseReserve.selector;\\n        _functionSignatures[4] = this.sotToken.selector;\\n        _functionSignatures[5] = this.jotToken.selector;\\n        _functionSignatures[6] = this.underlyingCurrency.selector;\\n        _functionSignatures[7] = this.paidPrincipalAmountSOT.selector;\\n        _functionSignatures[8] = this.paidPrincipalAmountSOTByInvestor.selector;\\n        _functionSignatures[9] = this.reserve.selector;\\n        _functionSignatures[11] = this.interestRateSOT.selector;\\n        _functionSignatures[12] = this.minFirstLossCushion.selector;\\n        _functionSignatures[13] = this.totalAssetRepaidCurrency.selector;\\n        _functionSignatures[14] = this.injectTGEAddress.selector;\\n        _functionSignatures[15] = this.increaseTotalAssetRepaidCurrency.selector;\\n        _functionSignatures[16] = this.hasFinishedRedemption.selector;\\n        _functionSignatures[17] = this.claimCashRemain.selector;\\n        _functionSignatures[18] = this.startCycle.selector;\\n        _functionSignatures[19] = this.withdraw.selector;\\n        _functionSignatures[20] = this.supportsInterface.selector;\\n        _functionSignatures[21] = this.paused.selector;\\n        _functionSignatures[22] = this.pause.selector;\\n        _functionSignatures[23] = this.unpause.selector;\\n        _functionSignatures[24] = this.isDebtCeilingValid.selector;\\n        _functionSignatures[25] = this.setDebtCeiling.selector;\\n        _functionSignatures[26] = this.debtCeiling.selector;\\n        _functionSignatures[27] = this.disburse.selector;\\n        _functionSignatures[28] = this.setMinFirstLossCushion.selector;\\n        _functionSignatures[29] = this.reserveUpdateTime.selector;\\n\\n        return _functionSignatures;\\n    }\\n}\\n\",\"keccak256\":\"0x6390c101a5c86ca39eb2384c520aa3085ab478b0a300c810d79172ad2eb08e21\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/base/types.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.19;\\n\\nimport '../../../libraries/Configuration.sol';\\n\\nstruct RiskScore {\\n    uint32 daysPastDue;\\n    uint32 advanceRate;\\n    uint32 penaltyRate;\\n    uint32 interestRate;\\n    uint32 probabilityOfDefault;\\n    uint32 lossGivenDefault;\\n    uint32 writeOffAfterGracePeriod;\\n    uint32 gracePeriod;\\n    uint32 collectionPeriod;\\n    uint32 writeOffAfterCollectionPeriod;\\n    uint32 discountRate;\\n}\\n\\nstruct LoanEntry {\\n    address debtor;\\n    address principalTokenAddress;\\n    bytes32 termsParam; // actually inside this param was already included P token address\\n    uint256 salt;\\n    uint256 issuanceBlockTimestamp;\\n    uint256 expirationTimestamp;\\n    uint8 riskScore;\\n    Configuration.ASSET_PURPOSE assetPurpose;\\n}\\n\",\"keccak256\":\"0xbe0c72ccee7c94ade289ac3fc0a002f02f211795de040b8d5cdba718dd159bae\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/protocol/pool/types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\nbytes32 constant POOL_ADMIN = keccak256('POOL_CREATOR');\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\n\\nbytes32 constant BACKEND_ADMIN = keccak256('BACKEND_ADMIN');\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\n\\n// In PoolNAV we use this\\nbytes32 constant POOL = keccak256('POOL');\\n\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\nuint256 constant ONE = 10 ** 27;\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\",\"keccak256\":\"0xbd4766a17a149c86755896e27c37682bfc13ab49e81c16b5f870147e1dcbdc1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {UntangledBase} from '../base/UntangledBase.sol';\\nimport {Configuration} from '../libraries/Configuration.sol';\\n\\n/**\\n * @title Registry\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. These config vars\\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\\n * @author Untangled Team\\n */\\ncontract Registry is UntangledBase {\\n    mapping(uint8 => address) public contractAddresses;\\n\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\n\\n    function initialize() public initializer {\\n        __UntangledBase__init(_msgSender());\\n    }\\n\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\n        contractAddresses[addressIndex] = newAddress;\\n    }\\n\\n    function getAddress(uint8 index) public view returns (address) {\\n        return contractAddresses[index];\\n    }\\n\\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\n    }\\n\\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\n    }\\n\\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\n    }\\n\\n    function setTokenGenerationEventFactory(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\\n    }\\n\\n    function setDistributionAssessor(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.DISTRIBUTION_ASSESSOR), newAddress);\\n    }\\n\\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\n    }\\n\\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\n    }\\n\\n    function setLoanRepaymentRouter(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_REPAYMENT_ROUTER), newAddress);\\n    }\\n\\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\n    }\\n\\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\\n    }\\n\\n    function setNoteTokenVault(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT), newAddress);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x13156625c665db7f4d5232bb97ffe30a14ae844d7f29c40bdbdc9833dc6b6138\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC20/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\nimport {IPauseable} from '../../base/IPauseable.sol';\\n\\ninterface INoteToken is IERC20Upgradeable, IERC20MetadataUpgradeable, IPauseable {\\n    // address public poolAddress;\\n    // uint8 public noteTokenType;\\n\\n    // uint8 internal immutable _d;\\n    function poolAddress() external view returns (address);\\n\\n    function noteTokenType() external view returns (uint8);\\n\\n    function mint(address receiver, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xad308eb188ddcdd7ad806199a1e62c3b171d74cad250d00e1768b36606778baf\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/ILoanAssetToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../../interfaces/IUntangledERC721.sol';\\nimport './types.sol';\\nimport '../../libraries/Configuration.sol';\\n\\nabstract contract ILoanAssetToken is IUntangledERC721 {\\n\\n    function safeMint(address creditor, LoanAssetInfo calldata latInfo) external virtual;\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x204d227a18d6869990de9865ee52c61aacbaccc7af0459a504c8bb96f4c0d828\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/IUntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport '../../storage/Registry.sol';\\n\\nabstract contract IUntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\\n    Registry public registry;\\n\\n    string private _baseTokenURI;\\n\\n    function __UntangledERC721__init(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __UntangledERC721__init_unchained(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function setBaseURI(string memory baseTokenURI) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        Strings.toHexString(tokenId),\\n                        '?chain_id=',\\n                        Strings.toString(block.chainid)\\n                    )\\n                )\\n                : '';\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x66f52d150eff5369cedf789501bcd3899b1192c405945a6421d932748c365b58\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nstruct LoanAssetInfo {\\n    uint256[] tokenIds;\\n    uint256[] nonces;\\n    address validator;\\n    bytes validateSignature;\\n}\\n\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\nbytes32 constant VALIDATOR_ADMIN_ROLE = keccak256('VALIDATOR_ADMIN_ROLE');\\n\",\"keccak256\":\"0x9d4dc1ae969eb87b18f7c62544dbd5a1584e2f16a336e25e79e6a9690357ecda\",\"license\":\"AGPL-3.0-only\"},\"contracts/uid/IUniqueIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\n\\ninterface IUniqueIdentity is IERC1155Upgradeable {\\n    /// @notice Mint a new UniqueIdentity token to the msgSender\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding mint params:\\n    ///                  account, id, expiresAt, address(this), nonces[account], block.chainid\\n    ///                  from an address with the SIGNER_ROLE.\\n    function mint(uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\n\\n    /// @notice Mint a new UniqueIdentity token to the `recipient`\\n    /// @param recipient The recipient address to be minted to.\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding mintTo params:\\n    ///                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)\\n    ///                  from an address with the SIGNER_ROLE.\\n    function mintTo(address recipient, uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\n\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account`\\n    /// @param account The account which currently owns the UID\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding burn params:\\n    ///                  (account, id, expiresAt, address(this), nonces[account], block.chainid)\\n    ///                  from an address with the SIGNER_ROLE.\\n    function burn(address account, uint256 id, uint256 expiresAt, bytes calldata signature) external;\\n\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\\n    /// @param account The account which currently owns the UID\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    function burnFrom(address account, uint256 id) external;\\n\\n}\\n\",\"keccak256\":\"0xc3f5ab5411d7fa944e2e2c77d66b75ea79f33c5fd878df6ddcf2e0684959fdf3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806378d29d5511610151578063bff8a36d116100c3578063dd688b0e11610087578063dd688b0e146104ee578063e1c84ea4146104f6578063ed348895146104fe578063ee17911414610511578063f3fef3a314610519578063febd60181461052c57600080fd5b8063bff8a36d146104a3578063c19d93fb146104b6578063cd3293de146104cb578063cee7b6a1146104d3578063d547741f146104db57600080fd5b806390071cf31161011557806390071cf31461043a578063901617051461044d57806391d1485414610460578063ade0ea6d14610473578063b09df36a1461047b578063b1511cc91461049057600080fd5b806378d29d55146104075780637b1039991461040f5780637f3bd56e146104175780638456cb591461042a5780638fd6b71e1461043257600080fd5b80633b2f880c116101ea5780634ba2363a116101ae5780634ba2363a146103bc578063562cad23146103c45780635c975abb146103cc5780636456a3ee146103e457806373ffe3c7146103ec57806375b1bce7146103ff57600080fd5b80633b2f880c146103575780633f4ba83a1461036a5780633ffebce4146103725780634020c8d114610393578063477035d11461039b57600080fd5b80632b71b4501161023c5780632b71b450146102e65780632bb14ff0146102ee5780632f2ff15d1461030b5780632f54bf6e1461031e578063326cd9701461033157806336568abe1461034457600080fd5b806301ffc9a7146102795780630bc6bffc146102a15780631fbf7c3e146102c1578063206c1765146102d6578063221dc593146102de575b600080fd5b61028c610287366004613158565b610534565b60405190151581526020015b60405180910390f35b6102a961055f565b6040516001600160a01b039091168152602001610298565b6102d46102cf366004613182565b61057b565b005b61028c610684565b6102a9610725565b6102a9610741565b6102f66107cc565b60405163ffffffff9091168152602001610298565b6102d46103193660046131b0565b6107e5565b61028c61032c3660046131e0565b610879565b6102d461033f366004613213565b6108a5565b6102d46103523660046131b0565b61098c565b6102d46103653660046132c4565b610a06565b6102d4610caa565b6103856103803660046131e0565b610cd2565b604051908152602001610298565b61028c610cfe565b6103a3610d11565b60405167ffffffffffffffff9091168152602001610298565b6102a9610d38565b6102d4610d5b565b60008051602061365a8339815191525460ff1661028c565b6102a9611135565b6102d46103fa366004613308565b611153565b61028c611193565b61028c611349565b6102a961136c565b6102d4610425366004613325565b61139a565b6102d4611519565b6102f661152b565b6102d46104483660046131e0565b611544565b6102d461045b366004613182565b611754565b61028c61046e3660046131b0565b6117ab565b6103856117e0565b6104836117f3565b6040516102989190613351565b6102d461049e366004613182565b611e22565b6102d46104b1366004613182565b611e62565b6104be611f43565b60405161029891906133b5565b610385611f59565b610385611f6c565b6102d46104e93660046131b0565b611f7f565b61028c612010565b610385612160565b6102d461050c3660046131e0565b612173565b6103a36123b8565b6102d4610527366004613325565b6123d5565b6102a96126ba565b60006001600160e01b031982166322aaa82960e01b14806105595750610559826126c5565b92915050565b6000610569612708565b600901546001600160a01b0316919050565b61058361272c565b61059c61058e61136c565b6001600160a01b031661277f565b6001600160a01b0316336001600160a01b031614806105e457506105cf6105c161136c565b6001600160a01b031661278c565b6001600160a01b0316336001600160a01b0316145b61066e5760405162461bcd60e51b815260206004820152604a60248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d7573742060448201527f62652053656375726974697a6174696f6e4d616e61676572206f72204e6f7465606482015269151bdad95b95985d5b1d60b21b608482015260a4015b60405180910390fd5b610679816001612799565b610681612850565b50565b6000806106a061069261136c565b6001600160a01b0316612901565b604051630129ecc560e61b81523060048201529091506001600160a01b03821690634a7b314090602401602060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b91906133cf565b610713612708565b600b015463ffffffff16111592915050565b600061072f612708565b600601546001600160a01b0316919050565b60008061074c610725565b90506001600160a01b03811661076457600091505090565b806001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c691906133e8565b91505090565b60006107d6612708565b600d015463ffffffff16919050565b336107ef81610879565b61080b5760405162461bcd60e51b815260040161066590613405565b6001600160a01b038216600081815260008051602061367a83398151915260208181526040808420888552909152808320805460ff191660011790555190923392909187917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d91a450505050565b60006105597fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e836117ab565b6000309050306001600160a01b0316816001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091691906133e8565b6001600160a01b03160361096c5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c20696e2074617267657420706f6f6c00000000000000006044820152606401610665565b61098882806020019051810190610983919061345f565b61290e565b5050565b6001600160a01b03811633146109fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610665565b61098882826129e6565b610a0e61272c565b6000610a18611f43565b90506002816003811115610a2e57610a2e61339f565b14158015610a4e57506003816003811115610a4b57610a4b61339f565b14155b610a9a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e2069737375696e6720746f6b656e2073746167650000000000006044820152606401610665565b610ab533610aa661136c565b6001600160a01b031690612a50565b6001600160a01b038316610b0b5760405162461bcd60e51b815260206004820181905260248201527f53656375726974697a6174696f6e506f6f6c3a2041646472657373207a65726f6044820152606401610665565b6000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f91906133e8565b90506001600160a01b038116610bc75760405162461bcd60e51b815260206004820181905260248201527f53656375726974697a6174696f6e506f6f6c3a2041646472657373207a65726f6044820152606401610665565b6000610bd1612708565b90506000846001811115610be757610be761339f565b03610c25576005810180546001600160a01b038088166001600160a01b03199283161790925560078301805492851692909116919091179055610c5a565b6006810180546001600160a01b038088166001600160a01b031992831617909255600883018054928516929091169190911790555b60128101805460ff191660011790556040517fd7700ad439dd15338e0f5a60b6f9f3b5faa94c4302741db1afcdb7fa00041a5990610c9b90879087906134dc565b60405180910390a15050505050565b610cc830335b610cb861136c565b6001600160a01b03169190612ac5565b610cd0612c54565b565b6000610cdc612708565b6001600160a01b03909216600090815260109290920160205250604090205490565b6000610d08612708565b5460ff16919050565b600080610d1c612708565b600b0154640100000000900467ffffffffffffffff1692915050565b6000610d42612708565b600b0154600160601b90046001600160a01b0316919050565b610d6361272c565b610d6b612cb4565b6000610d75611f43565b90506002816003811115610d8b57610d8b61339f565b14158015610dab57506003816003811115610da857610da861339f565b14155b610df75760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e2069737375696e6720746f6b656e2073746167650000000000006044820152606401610665565b6000610e01612708565b60128101805460ff1916600217905560058101549091506001600160a01b031615610f8f5760058101546040805163b3f05b9760e01b815290516001600160a01b0390921691829163b3f05b979160048083019260209291908290030181865afa158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e979190613509565b610f0f576005820154600b830154604051632b8093bd60e01b8152600060048201526001600160a01b03600160601b90920482166024820152911690632b8093bd90604401600060405180830381600087803b158015610ef657600080fd5b505af1158015610f0a573d6000803e3d6000fd5b505050505b806001600160a01b0316631f0b10c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190613524565b600d8301805463ffffffff191663ffffffff92909216919091179055505b60068101546001600160a01b0316156110ea576006810154600b820154604051632b8093bd60e01b8152600060048201526001600160a01b03600160601b90920482166024820152911690632b8093bd90604401600060405180830381600087803b158015610ffd57600080fd5b505af1158015611011573d6000803e3d6000fd5b50505060068201546040805163b3f05b9760e01b815290516001600160a01b03909216925063b3f05b979160048083019260209291908290030181865afa158015611060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110849190613509565b6110ea5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a207365636f6e642073616c65206044820152706973207374696c6c206f6e20676f696e6760781b6064820152608401610665565b600d81015460405163ffffffff90911681527f45126999ba7b0d50f77b17497148ac79d0089e3c1518c3de74047c93bbb81aea9060200160405180910390a15050610cd06001606555565b600080611140612708565b600501546001600160a01b031692915050565b61115b61272c565b611163611349565b156111805760405162461bcd60e51b815260040161066590613541565b61118a3033610cb0565b61068181612d0d565b60008061119e6126ba565b90506001600160a01b0381161561126a57806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121191906133cf565b1561126a5760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20534f54207374696c6c20726560448201526336b0b4b760e11b6064820152608401610665565b6000611274610741565b90506001600160a01b0381161561134057806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906133cf565b156113405760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a204a4f54207374696c6c20726560448201526336b0b4b760e11b6064820152608401610665565b60019250505090565b60006003611355611f43565b60038111156113665761136661339f565b14905090565b7f5f6bd0daaaf246715f06ec0ea7e99af4468b70381a38e1f10cb19776ed17ce00546001600160a01b031690565b60006113a4612708565b90506113b16105c161136c565b6001600160a01b0316336001600160a01b03161461142b5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d75737420604482015270189948139bdd19551bdad95b95985d5b1d607a1b6064820152608401610665565b6009810154600b8201546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261147092600160601b9091049091169087908790600401613589565b6020604051808303816000875af115801561148f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b39190613509565b6115145760405162461bcd60e51b815260206004820152602c60248201527f53656375726974697a6174696f6e506f6f6c3a2063757272656e63792d74726160448201526b1b9cd9995c8b59985a5b195960a21b6064820152608401610665565b505050565b6115233033610cb0565b610cd0612df4565b6000611535612708565b600b015463ffffffff16919050565b61154c61272c565b3361155681610879565b6115725760405162461bcd60e51b815260040161066590613405565b61157a611193565b6115de5760405162461bcd60e51b815260206004820152602f60248201527f53656375726974697a6174696f6e506f6f6c3a20526564656d7074696f6e206860448201526e185cc81b9bdd08199a5b9a5cda1959608a1b6064820152608401610665565b60006115e8612708565b6009810154600b8201546040516370a0823160e01b81526001600160a01b03600160601b90920482166004820152929350169060009082906370a0823190602401602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a91906133cf565b600b8401546040516323b872dd60e01b81529192506001600160a01b03808516926323b872dd926116ab92600160601b909104169089908690600401613589565b6020604051808303816000875af11580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190613509565b61170a5760405162461bcd60e51b8152600401610665906135ad565b7fc6753442c16cb3925875f605d000ef00aa5ab127be464f865302bedbf91a630e83600b01600c9054906101000a90046001600160a01b03168683604051610c9b93929190613589565b61175c61272c565b6117773361176861136c565b6001600160a01b031690612e3d565b611782816000612799565b600061178c612708565b90508181600e015461179e9190613606565b600e820155610988612850565b6001600160a01b0316600090815260008051602061367a83398151915260209081526040808320938352929052205460ff1690565b60006117ea612708565b600c0154905090565b60408051601e8082526103e0820190925260609160009190602082016103c08036833701905050905063ed34889560e01b8160018151811061183757611837613619565b6001600160e01b0319909216602092830291909101909101528051630fdfbe1f60e11b908290600290811061186e5761186e613619565b6001600160e01b031990921660209283029190910190910152805163bff8a36d60e01b90829060039081106118a5576118a5613619565b6001600160e01b0319909216602092830291909101909101528051631fd7ac0360e31b90829060049081106118dc576118dc613619565b6001600160e01b03199092166020928302919091019091015280516302b71b4560e41b908290600590811061191357611913613619565b6001600160e01b03199092166020928302919091019091015280516302f1afff60e21b908290600690811061194a5761194a613619565b6001600160e01b031990921660209283029190910190910152805163ade0ea6d60e01b908290600790811061198157611981613619565b6001600160e01b0319909216602092830291909101909101528051630fffaf3960e21b90829060089081106119b8576119b8613619565b6001600160e01b031990921660209283029190910190910152805163669949ef60e11b90829060099081106119ef576119ef613619565b6001600160e01b03199092166020928302919091019091015280516302bb14ff60e41b908290600b908110611a2657611a26613619565b6001600160e01b03199092166020928302919091019091015280516347eb5b8f60e11b908290600c908110611a5d57611a5d613619565b6001600160e01b031990921660209283029190910190910152805163cee7b6a160e01b908290600d908110611a9457611a94613619565b6001600160e01b0319909216602092830291909101909101528051630ecbe20360e21b908290600e908110611acb57611acb613619565b6001600160e01b0319909216602092830291909101909101528051639016170560e01b908290600f908110611b0257611b02613619565b6001600160e01b03199092166020928302919091019091015280516375b1bce760e01b9082906010908110611b3957611b39613619565b6001600160e01b03199092166020928302919091019091015280516390071cf360e01b9082906011908110611b7057611b70613619565b6001600160e01b031990921660209283029190910190910152805163562cad2360e01b9082906012908110611ba757611ba7613619565b6001600160e01b031990921660209283029190910190910152805163f3fef3a360e01b9082906013908110611bde57611bde613619565b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b9082906014908110611c1557611c15613619565b6001600160e01b0319909216602092830291909101909101528051635c975abb60e01b9082906015908110611c4c57611c4c613619565b6001600160e01b0319909216602092830291909101909101528051638456cb5960e01b9082906016908110611c8357611c83613619565b6001600160e01b0319909216602092830291909101909101528051631fa5d41d60e11b9082906017908110611cba57611cba613619565b6001600160e01b0319909216602092830291909101909101528051636eb4458760e11b9082906018908110611cf157611cf1613619565b6001600160e01b031990921660209283029190910190910152805163b1511cc960e01b9082906019908110611d2857611d28613619565b6001600160e01b031990921660209283029190910190910152805163387213a960e21b908290601a908110611d5f57611d5f613619565b6001600160e01b0319909216602092830291909101909101528051633f9deab760e11b908290601b908110611d9657611d96613619565b6001600160e01b03199092166020928302919091019091015280516373ffe3c760e01b908290601c908110611dcd57611dcd613619565b6001600160e01b0319909216602092830291909101909101528051633b85e44560e21b908290601d908110611e0457611e04613619565b6001600160e01b031990921660209283029190910190910152919050565b611e2a61272c565b611e32611349565b15611e4f5760405162461bcd60e51b815260040161066590613541565b611e593033610cb0565b61068181612eb1565b611e6a61272c565b611e7561058e61136c565b6001600160a01b0316336001600160a01b03161480611eaf5750611e9a6105c161136c565b6001600160a01b0316336001600160a01b0316145b611f3a5760405162461bcd60e51b815260206004820152605060248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d7573742060448201527f62652053656375726974697a6174696f6e4d616e61676572206f72204469737460648201526f3934b13aba34b7b727b832b930ba37b960811b608482015260a401610665565b61067981612ef5565b6000611f4d612708565b6012015460ff16919050565b6000611f63612708565b600a0154905090565b6000611f76612708565b600e0154905090565b33611f8981610879565b611fa55760405162461bcd60e51b815260040161066590613405565b6001600160a01b038216600081815260008051602061367a83398151915260208181526040808420888552909152808320805460ff191690555190923392909187917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b91a450505050565b60008061201b612708565b60058101549091506000906001600160a01b0316156120ba578160050160009054906101000a90046001600160a01b03166001600160a01b031663998ba4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad91906133cf565b6120b79082613606565b90505b60068201546001600160a01b031615612153578160060160009054906101000a90046001600160a01b03166001600160a01b031663998ba4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906133cf565b6121509082613606565b90505b6011909101541015919050565b600061216a612708565b60110154905090565b61217b61272c565b612183612cb4565b61218b611349565b156121a85760405162461bcd60e51b815260040161066590613541565b6121b23033610cb0565b60006121bc612708565b600b8101549091506001600160a01b03808416600160601b909204160361223f5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a2053616d652061646472657373604482015270081dda5d1a0818dd5c9c995b9d081c1bdd607a1b6064820152608401610665565b600b810180546bffffffffffffffffffffffff16600160601b6001600160a01b0385169081029190911790915530900361234557600981015460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af11580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed9190613509565b6123455760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20506f74206e6f7420617070726044820152631bdd995960e21b6064820152608401610665565b61235061058e61136c565b60405163dc90f9fd60e01b81526001600160a01b038481166004830152919091169063dc90f9fd90602401600060405180830381600087803b15801561239557600080fd5b505af11580156123a9573d6000803e3d6000fd5b50505050506106816001606555565b60006123c2612708565b600f015467ffffffffffffffff16919050565b6123dd61272c565b6123f8336123e961136c565b6001600160a01b031690612fa6565b6124227f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e836117ab565b6124875760405162461bcd60e51b815260206004820152603060248201527f53656375726974697a6174696f6e506f6f6c3a204f6e6c79204f726967696e6160448201526f3a37b91031b0b710323930bbb237bbb760811b6064820152608401610665565b6124926105c161136c565b604051634ce9451960e01b81523060048201526001600160a01b039190911690634ce9451990602401602060405180830381865afa1580156124d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fc9190613509565b156125555760405162461bcd60e51b815260206004820152602360248201527f53656375726974697a6174696f6e506f6f6c3a207769746864726177207061756044820152621cd95960ea1b6064820152608401610665565b600061255f612708565b90508181600a015410156125c45760405162461bcd60e51b815260206004820152602660248201527f53656375726974697a6174696f6e506f6f6c3a206e6f7420656e6f756768207260448201526565736572766560d01b6064820152608401610665565b6125cd82612ef5565b6125d561055f565b6001600160a01b03166323b872dd6125eb610d38565b85856040518463ffffffff1660e01b815260040161260b93929190613589565b6020604051808303816000875af115801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190613509565b61266a5760405162461bcd60e51b8152600401610665906135ad565b612672612850565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436491015b60405180910390a1505050565b60008061074c611135565b60006126d08261300f565b806126eb575063b3f6a3e960e01b6001600160e01b03198316145b806105595750506001600160e01b031916634178950d60e11b1490565b7f42988f810f621c79bb2e8db2f913a015fc39ef8eac016043863c6a0d12adbf0090565b60008051602061365a8339815191525460ff1615610cd05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610665565b600061055982600061305c565b600061055982600a61305c565b60006127a3612708565b90508281600a01546127b59190613606565b600a8201558115612814576127c8610684565b6128145760405162461bcd60e51b815260206004820152601d60248201527f4d696e46697273744c6f7373206973206e6f74207361746973666965640000006044820152606401610665565b600a8101546040805185815260208101929092527f144169394082237543f435a0b89a572f6eceb50fd97d3739d74aa0447d2101f491016126ad565b600061285d61069261136c565b90506000612869612708565b6040516305459dc160e01b81523060048201529091506000906001600160a01b038416906305459dc190602401602060405180830381865afa1580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d791906133cf565b905080156115145750600f01805467ffffffffffffffff19164267ffffffffffffffff1617905550565b600061055982600861305c565b6000612918612708565b600b810180546bffffffffffffffffffffffff1630600160601b0217905560128101805460ff1916905582519091506001600160a01b03166129a85760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20496e76616c69642063757272604482015263656e637960e01b6064820152608401610665565b81516009820180546001600160a01b0319166001600160a01b0390921691909117905560208201516129d990612d0d565b6109888260600151612eb1565b6001600160a01b038116600081815260008051602061367a83398151915260208181526040808420878552909152808320805460ff191690555190923392909186917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b91a4505050565b612a598261277f565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b8152602060048201526024808201527f52656769737472793a204f6e6c792053656375726974697a6174696f6e4d616e60448201526330b3b2b960e11b6064820152608401610665565b612ace8361277f565b604051632474521560e21b81527f3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d760048201526001600160a01b03838116602483015291909116906391d1485490604401602060405180830381865afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b609190613509565b80612bf65750604051632474521560e21b81527fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e60048201526001600160a01b0382811660248301528316906391d1485490604401602060405180830381865afa158015612bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf69190613509565b6115145760405162461bcd60e51b815260206004820152602960248201527f52656769737472793a204e6f7420616e20706f6f6c2061646d696e206f72207060448201526837b7b61037bbb732b960b91b6064820152608401610665565b612c5c6130e8565b60008051602061365a833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b600260655403612d065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610665565b6002606555565b612d1a612710606461362f565b8163ffffffff161115612d955760405162461bcd60e51b815260206004820152603b60248201527f53656375726974697a6174696f6e506f6f6c3a206d696e46697273744c6f737360448201527f43757368696f6e2069732067726561746572207468616e2031303000000000006064820152608401610665565b6000612d9f612708565b600b8101805463ffffffff191663ffffffff85169081179091556040519081529091507f091193ea2a1d71a11f3479abe1d30b1ba8fecf8b18e1c728e3ee787de54d0399906020015b60405180910390a15050565b612dfc61272c565b60008051602061365a833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612c96565b612e468261313e565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b815260206004820152602260248201527f52656769737472793a204f6e6c79204c6f616e52657061796d656e74526f757460448201526132b960f11b6064820152608401610665565b6000612ebb612708565b601181018390556040518381529091507f3fb30b6090e6989c6819119c2885012949e75471ed4ce5e80c9be541ea0e2f3f90602001612de8565b6000612eff612708565b90508181600a0154612f119190613646565b600a820155612f1e610684565b612f6a5760405162461bcd60e51b815260206004820152601d60248201527f4d696e46697273744c6f7373206973206e6f74207361746973666965640000006044820152606401610665565b600a8101546040805184815260208101929092527f7101485dbd37bb087fe0b87493d51eb91bf2ab8df11430836c5db447eda8a7d09101612de8565b612faf8261314b565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b815260206004820152601960248201527f52656769737472793a204f6e6c79204c6f616e4b65726e656c000000000000006044820152606401610665565b60006301ffc9a760e01b6001600160e01b0319831614806126eb575063395dfc6360e11b6001600160e01b0319831614806105595750506001600160e01b031916634178950d60e11b1490565b6000826001600160a01b031663bcaa0c5583600a81111561307f5761307f61339f565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa1580156130bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e191906133e8565b9392505050565b60008051602061365a8339815191525460ff16610cd05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610665565b600061055982600661305c565b600061055982600761305c565b60006020828403121561316a57600080fd5b81356001600160e01b0319811681146130e157600080fd5b60006020828403121561319457600080fd5b5035919050565b6001600160a01b038116811461068157600080fd5b600080604083850312156131c357600080fd5b8235915060208301356131d58161319b565b809150509250929050565b6000602082840312156131f257600080fd5b81356130e18161319b565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561322557600080fd5b813567ffffffffffffffff8082111561323d57600080fd5b818401915084601f83011261325157600080fd5b813581811115613263576132636131fd565b604051601f8201601f19908116603f0116810190838211818310171561328b5761328b6131fd565b816040528281528760208487010111156132a457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080604083850312156132d757600080fd5b82356132e28161319b565b91506020830135600281106131d557600080fd5b63ffffffff8116811461068157600080fd5b60006020828403121561331a57600080fd5b81356130e1816132f6565b6000806040838503121561333857600080fd5b82356133438161319b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156133935783516001600160e01b0319168352928401929184019160010161336d565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106133c9576133c961339f565b91905290565b6000602082840312156133e157600080fd5b5051919050565b6000602082840312156133fa57600080fd5b81516130e18161319b565b60208082526025908201527f416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420616e2060408201526437bbb732b960d91b606082015260800190565b8051801515811461345a57600080fd5b919050565b60006080828403121561347157600080fd5b6040516080810181811067ffffffffffffffff82111715613494576134946131fd565b60405282516134a28161319b565b815260208301516134b2816132f6565b60208201526134c36040840161344a565b6040820152606083015160608201528091505092915050565b6001600160a01b038316815260408101600283106134fc576134fc61339f565b8260208301529392505050565b60006020828403121561351b57600080fd5b6130e18261344a565b60006020828403121561353657600080fd5b81516130e1816132f6565b60208082526028908201527f53656375726974697a6174696f6e506f6f6c3a20506f6f6c20696e20636c6f73604082015267656420737461746560c01b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526023908201527f53656375726974697a6174696f6e506f6f6c3a205472616e73666572206661696040820152621b195960ea1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610559576105596135f0565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610559576105596135f0565b81810381811115610559576105596135f056fecd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300b38e00afe21f8bf8961a30ad85d453b5f474f19414b8973dee80c89fb0d97b00a26469706673582212204d456c0219fc81b5e054e07508ad68dba38753e8f5585a7cd9dac853a72d09f164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c806378d29d5511610151578063bff8a36d116100c3578063dd688b0e11610087578063dd688b0e146104ee578063e1c84ea4146104f6578063ed348895146104fe578063ee17911414610511578063f3fef3a314610519578063febd60181461052c57600080fd5b8063bff8a36d146104a3578063c19d93fb146104b6578063cd3293de146104cb578063cee7b6a1146104d3578063d547741f146104db57600080fd5b806390071cf31161011557806390071cf31461043a578063901617051461044d57806391d1485414610460578063ade0ea6d14610473578063b09df36a1461047b578063b1511cc91461049057600080fd5b806378d29d55146104075780637b1039991461040f5780637f3bd56e146104175780638456cb591461042a5780638fd6b71e1461043257600080fd5b80633b2f880c116101ea5780634ba2363a116101ae5780634ba2363a146103bc578063562cad23146103c45780635c975abb146103cc5780636456a3ee146103e457806373ffe3c7146103ec57806375b1bce7146103ff57600080fd5b80633b2f880c146103575780633f4ba83a1461036a5780633ffebce4146103725780634020c8d114610393578063477035d11461039b57600080fd5b80632b71b4501161023c5780632b71b450146102e65780632bb14ff0146102ee5780632f2ff15d1461030b5780632f54bf6e1461031e578063326cd9701461033157806336568abe1461034457600080fd5b806301ffc9a7146102795780630bc6bffc146102a15780631fbf7c3e146102c1578063206c1765146102d6578063221dc593146102de575b600080fd5b61028c610287366004613158565b610534565b60405190151581526020015b60405180910390f35b6102a961055f565b6040516001600160a01b039091168152602001610298565b6102d46102cf366004613182565b61057b565b005b61028c610684565b6102a9610725565b6102a9610741565b6102f66107cc565b60405163ffffffff9091168152602001610298565b6102d46103193660046131b0565b6107e5565b61028c61032c3660046131e0565b610879565b6102d461033f366004613213565b6108a5565b6102d46103523660046131b0565b61098c565b6102d46103653660046132c4565b610a06565b6102d4610caa565b6103856103803660046131e0565b610cd2565b604051908152602001610298565b61028c610cfe565b6103a3610d11565b60405167ffffffffffffffff9091168152602001610298565b6102a9610d38565b6102d4610d5b565b60008051602061365a8339815191525460ff1661028c565b6102a9611135565b6102d46103fa366004613308565b611153565b61028c611193565b61028c611349565b6102a961136c565b6102d4610425366004613325565b61139a565b6102d4611519565b6102f661152b565b6102d46104483660046131e0565b611544565b6102d461045b366004613182565b611754565b61028c61046e3660046131b0565b6117ab565b6103856117e0565b6104836117f3565b6040516102989190613351565b6102d461049e366004613182565b611e22565b6102d46104b1366004613182565b611e62565b6104be611f43565b60405161029891906133b5565b610385611f59565b610385611f6c565b6102d46104e93660046131b0565b611f7f565b61028c612010565b610385612160565b6102d461050c3660046131e0565b612173565b6103a36123b8565b6102d4610527366004613325565b6123d5565b6102a96126ba565b60006001600160e01b031982166322aaa82960e01b14806105595750610559826126c5565b92915050565b6000610569612708565b600901546001600160a01b0316919050565b61058361272c565b61059c61058e61136c565b6001600160a01b031661277f565b6001600160a01b0316336001600160a01b031614806105e457506105cf6105c161136c565b6001600160a01b031661278c565b6001600160a01b0316336001600160a01b0316145b61066e5760405162461bcd60e51b815260206004820152604a60248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d7573742060448201527f62652053656375726974697a6174696f6e4d616e61676572206f72204e6f7465606482015269151bdad95b95985d5b1d60b21b608482015260a4015b60405180910390fd5b610679816001612799565b610681612850565b50565b6000806106a061069261136c565b6001600160a01b0316612901565b604051630129ecc560e61b81523060048201529091506001600160a01b03821690634a7b314090602401602060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b91906133cf565b610713612708565b600b015463ffffffff16111592915050565b600061072f612708565b600601546001600160a01b0316919050565b60008061074c610725565b90506001600160a01b03811661076457600091505090565b806001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c691906133e8565b91505090565b60006107d6612708565b600d015463ffffffff16919050565b336107ef81610879565b61080b5760405162461bcd60e51b815260040161066590613405565b6001600160a01b038216600081815260008051602061367a83398151915260208181526040808420888552909152808320805460ff191660011790555190923392909187917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d91a450505050565b60006105597fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e836117ab565b6000309050306001600160a01b0316816001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091691906133e8565b6001600160a01b03160361096c5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c20696e2074617267657420706f6f6c00000000000000006044820152606401610665565b61098882806020019051810190610983919061345f565b61290e565b5050565b6001600160a01b03811633146109fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610665565b61098882826129e6565b610a0e61272c565b6000610a18611f43565b90506002816003811115610a2e57610a2e61339f565b14158015610a4e57506003816003811115610a4b57610a4b61339f565b14155b610a9a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e2069737375696e6720746f6b656e2073746167650000000000006044820152606401610665565b610ab533610aa661136c565b6001600160a01b031690612a50565b6001600160a01b038316610b0b5760405162461bcd60e51b815260206004820181905260248201527f53656375726974697a6174696f6e506f6f6c3a2041646472657373207a65726f6044820152606401610665565b6000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f91906133e8565b90506001600160a01b038116610bc75760405162461bcd60e51b815260206004820181905260248201527f53656375726974697a6174696f6e506f6f6c3a2041646472657373207a65726f6044820152606401610665565b6000610bd1612708565b90506000846001811115610be757610be761339f565b03610c25576005810180546001600160a01b038088166001600160a01b03199283161790925560078301805492851692909116919091179055610c5a565b6006810180546001600160a01b038088166001600160a01b031992831617909255600883018054928516929091169190911790555b60128101805460ff191660011790556040517fd7700ad439dd15338e0f5a60b6f9f3b5faa94c4302741db1afcdb7fa00041a5990610c9b90879087906134dc565b60405180910390a15050505050565b610cc830335b610cb861136c565b6001600160a01b03169190612ac5565b610cd0612c54565b565b6000610cdc612708565b6001600160a01b03909216600090815260109290920160205250604090205490565b6000610d08612708565b5460ff16919050565b600080610d1c612708565b600b0154640100000000900467ffffffffffffffff1692915050565b6000610d42612708565b600b0154600160601b90046001600160a01b0316919050565b610d6361272c565b610d6b612cb4565b6000610d75611f43565b90506002816003811115610d8b57610d8b61339f565b14158015610dab57506003816003811115610da857610da861339f565b14155b610df75760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e2069737375696e6720746f6b656e2073746167650000000000006044820152606401610665565b6000610e01612708565b60128101805460ff1916600217905560058101549091506001600160a01b031615610f8f5760058101546040805163b3f05b9760e01b815290516001600160a01b0390921691829163b3f05b979160048083019260209291908290030181865afa158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e979190613509565b610f0f576005820154600b830154604051632b8093bd60e01b8152600060048201526001600160a01b03600160601b90920482166024820152911690632b8093bd90604401600060405180830381600087803b158015610ef657600080fd5b505af1158015610f0a573d6000803e3d6000fd5b505050505b806001600160a01b0316631f0b10c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190613524565b600d8301805463ffffffff191663ffffffff92909216919091179055505b60068101546001600160a01b0316156110ea576006810154600b820154604051632b8093bd60e01b8152600060048201526001600160a01b03600160601b90920482166024820152911690632b8093bd90604401600060405180830381600087803b158015610ffd57600080fd5b505af1158015611011573d6000803e3d6000fd5b50505060068201546040805163b3f05b9760e01b815290516001600160a01b03909216925063b3f05b979160048083019260209291908290030181865afa158015611060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110849190613509565b6110ea5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a207365636f6e642073616c65206044820152706973207374696c6c206f6e20676f696e6760781b6064820152608401610665565b600d81015460405163ffffffff90911681527f45126999ba7b0d50f77b17497148ac79d0089e3c1518c3de74047c93bbb81aea9060200160405180910390a15050610cd06001606555565b600080611140612708565b600501546001600160a01b031692915050565b61115b61272c565b611163611349565b156111805760405162461bcd60e51b815260040161066590613541565b61118a3033610cb0565b61068181612d0d565b60008061119e6126ba565b90506001600160a01b0381161561126a57806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121191906133cf565b1561126a5760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20534f54207374696c6c20726560448201526336b0b4b760e11b6064820152608401610665565b6000611274610741565b90506001600160a01b0381161561134057806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906133cf565b156113405760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a204a4f54207374696c6c20726560448201526336b0b4b760e11b6064820152608401610665565b60019250505090565b60006003611355611f43565b60038111156113665761136661339f565b14905090565b7f5f6bd0daaaf246715f06ec0ea7e99af4468b70381a38e1f10cb19776ed17ce00546001600160a01b031690565b60006113a4612708565b90506113b16105c161136c565b6001600160a01b0316336001600160a01b03161461142b5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d75737420604482015270189948139bdd19551bdad95b95985d5b1d607a1b6064820152608401610665565b6009810154600b8201546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261147092600160601b9091049091169087908790600401613589565b6020604051808303816000875af115801561148f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b39190613509565b6115145760405162461bcd60e51b815260206004820152602c60248201527f53656375726974697a6174696f6e506f6f6c3a2063757272656e63792d74726160448201526b1b9cd9995c8b59985a5b195960a21b6064820152608401610665565b505050565b6115233033610cb0565b610cd0612df4565b6000611535612708565b600b015463ffffffff16919050565b61154c61272c565b3361155681610879565b6115725760405162461bcd60e51b815260040161066590613405565b61157a611193565b6115de5760405162461bcd60e51b815260206004820152602f60248201527f53656375726974697a6174696f6e506f6f6c3a20526564656d7074696f6e206860448201526e185cc81b9bdd08199a5b9a5cda1959608a1b6064820152608401610665565b60006115e8612708565b6009810154600b8201546040516370a0823160e01b81526001600160a01b03600160601b90920482166004820152929350169060009082906370a0823190602401602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a91906133cf565b600b8401546040516323b872dd60e01b81529192506001600160a01b03808516926323b872dd926116ab92600160601b909104169089908690600401613589565b6020604051808303816000875af11580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190613509565b61170a5760405162461bcd60e51b8152600401610665906135ad565b7fc6753442c16cb3925875f605d000ef00aa5ab127be464f865302bedbf91a630e83600b01600c9054906101000a90046001600160a01b03168683604051610c9b93929190613589565b61175c61272c565b6117773361176861136c565b6001600160a01b031690612e3d565b611782816000612799565b600061178c612708565b90508181600e015461179e9190613606565b600e820155610988612850565b6001600160a01b0316600090815260008051602061367a83398151915260209081526040808320938352929052205460ff1690565b60006117ea612708565b600c0154905090565b60408051601e8082526103e0820190925260609160009190602082016103c08036833701905050905063ed34889560e01b8160018151811061183757611837613619565b6001600160e01b0319909216602092830291909101909101528051630fdfbe1f60e11b908290600290811061186e5761186e613619565b6001600160e01b031990921660209283029190910190910152805163bff8a36d60e01b90829060039081106118a5576118a5613619565b6001600160e01b0319909216602092830291909101909101528051631fd7ac0360e31b90829060049081106118dc576118dc613619565b6001600160e01b03199092166020928302919091019091015280516302b71b4560e41b908290600590811061191357611913613619565b6001600160e01b03199092166020928302919091019091015280516302f1afff60e21b908290600690811061194a5761194a613619565b6001600160e01b031990921660209283029190910190910152805163ade0ea6d60e01b908290600790811061198157611981613619565b6001600160e01b0319909216602092830291909101909101528051630fffaf3960e21b90829060089081106119b8576119b8613619565b6001600160e01b031990921660209283029190910190910152805163669949ef60e11b90829060099081106119ef576119ef613619565b6001600160e01b03199092166020928302919091019091015280516302bb14ff60e41b908290600b908110611a2657611a26613619565b6001600160e01b03199092166020928302919091019091015280516347eb5b8f60e11b908290600c908110611a5d57611a5d613619565b6001600160e01b031990921660209283029190910190910152805163cee7b6a160e01b908290600d908110611a9457611a94613619565b6001600160e01b0319909216602092830291909101909101528051630ecbe20360e21b908290600e908110611acb57611acb613619565b6001600160e01b0319909216602092830291909101909101528051639016170560e01b908290600f908110611b0257611b02613619565b6001600160e01b03199092166020928302919091019091015280516375b1bce760e01b9082906010908110611b3957611b39613619565b6001600160e01b03199092166020928302919091019091015280516390071cf360e01b9082906011908110611b7057611b70613619565b6001600160e01b031990921660209283029190910190910152805163562cad2360e01b9082906012908110611ba757611ba7613619565b6001600160e01b031990921660209283029190910190910152805163f3fef3a360e01b9082906013908110611bde57611bde613619565b6001600160e01b03199092166020928302919091019091015280516301ffc9a760e01b9082906014908110611c1557611c15613619565b6001600160e01b0319909216602092830291909101909101528051635c975abb60e01b9082906015908110611c4c57611c4c613619565b6001600160e01b0319909216602092830291909101909101528051638456cb5960e01b9082906016908110611c8357611c83613619565b6001600160e01b0319909216602092830291909101909101528051631fa5d41d60e11b9082906017908110611cba57611cba613619565b6001600160e01b0319909216602092830291909101909101528051636eb4458760e11b9082906018908110611cf157611cf1613619565b6001600160e01b031990921660209283029190910190910152805163b1511cc960e01b9082906019908110611d2857611d28613619565b6001600160e01b031990921660209283029190910190910152805163387213a960e21b908290601a908110611d5f57611d5f613619565b6001600160e01b0319909216602092830291909101909101528051633f9deab760e11b908290601b908110611d9657611d96613619565b6001600160e01b03199092166020928302919091019091015280516373ffe3c760e01b908290601c908110611dcd57611dcd613619565b6001600160e01b0319909216602092830291909101909101528051633b85e44560e21b908290601d908110611e0457611e04613619565b6001600160e01b031990921660209283029190910190910152919050565b611e2a61272c565b611e32611349565b15611e4f5760405162461bcd60e51b815260040161066590613541565b611e593033610cb0565b61068181612eb1565b611e6a61272c565b611e7561058e61136c565b6001600160a01b0316336001600160a01b03161480611eaf5750611e9a6105c161136c565b6001600160a01b0316336001600160a01b0316145b611f3a5760405162461bcd60e51b815260206004820152605060248201527f53656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d7573742060448201527f62652053656375726974697a6174696f6e4d616e61676572206f72204469737460648201526f3934b13aba34b7b727b832b930ba37b960811b608482015260a401610665565b61067981612ef5565b6000611f4d612708565b6012015460ff16919050565b6000611f63612708565b600a0154905090565b6000611f76612708565b600e0154905090565b33611f8981610879565b611fa55760405162461bcd60e51b815260040161066590613405565b6001600160a01b038216600081815260008051602061367a83398151915260208181526040808420888552909152808320805460ff191690555190923392909187917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b91a450505050565b60008061201b612708565b60058101549091506000906001600160a01b0316156120ba578160050160009054906101000a90046001600160a01b03166001600160a01b031663998ba4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad91906133cf565b6120b79082613606565b90505b60068201546001600160a01b031615612153578160060160009054906101000a90046001600160a01b03166001600160a01b031663998ba4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906133cf565b6121509082613606565b90505b6011909101541015919050565b600061216a612708565b60110154905090565b61217b61272c565b612183612cb4565b61218b611349565b156121a85760405162461bcd60e51b815260040161066590613541565b6121b23033610cb0565b60006121bc612708565b600b8101549091506001600160a01b03808416600160601b909204160361223f5760405162461bcd60e51b815260206004820152603160248201527f53656375726974697a6174696f6e506f6f6c3a2053616d652061646472657373604482015270081dda5d1a0818dd5c9c995b9d081c1bdd607a1b6064820152608401610665565b600b810180546bffffffffffffffffffffffff16600160601b6001600160a01b0385169081029190911790915530900361234557600981015460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af11580156122c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ed9190613509565b6123455760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20506f74206e6f7420617070726044820152631bdd995960e21b6064820152608401610665565b61235061058e61136c565b60405163dc90f9fd60e01b81526001600160a01b038481166004830152919091169063dc90f9fd90602401600060405180830381600087803b15801561239557600080fd5b505af11580156123a9573d6000803e3d6000fd5b50505050506106816001606555565b60006123c2612708565b600f015467ffffffffffffffff16919050565b6123dd61272c565b6123f8336123e961136c565b6001600160a01b031690612fa6565b6124227f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e836117ab565b6124875760405162461bcd60e51b815260206004820152603060248201527f53656375726974697a6174696f6e506f6f6c3a204f6e6c79204f726967696e6160448201526f3a37b91031b0b710323930bbb237bbb760811b6064820152608401610665565b6124926105c161136c565b604051634ce9451960e01b81523060048201526001600160a01b039190911690634ce9451990602401602060405180830381865afa1580156124d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fc9190613509565b156125555760405162461bcd60e51b815260206004820152602360248201527f53656375726974697a6174696f6e506f6f6c3a207769746864726177207061756044820152621cd95960ea1b6064820152608401610665565b600061255f612708565b90508181600a015410156125c45760405162461bcd60e51b815260206004820152602660248201527f53656375726974697a6174696f6e506f6f6c3a206e6f7420656e6f756768207260448201526565736572766560d01b6064820152608401610665565b6125cd82612ef5565b6125d561055f565b6001600160a01b03166323b872dd6125eb610d38565b85856040518463ffffffff1660e01b815260040161260b93929190613589565b6020604051808303816000875af115801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190613509565b61266a5760405162461bcd60e51b8152600401610665906135ad565b612672612850565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436491015b60405180910390a1505050565b60008061074c611135565b60006126d08261300f565b806126eb575063b3f6a3e960e01b6001600160e01b03198316145b806105595750506001600160e01b031916634178950d60e11b1490565b7f42988f810f621c79bb2e8db2f913a015fc39ef8eac016043863c6a0d12adbf0090565b60008051602061365a8339815191525460ff1615610cd05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610665565b600061055982600061305c565b600061055982600a61305c565b60006127a3612708565b90508281600a01546127b59190613606565b600a8201558115612814576127c8610684565b6128145760405162461bcd60e51b815260206004820152601d60248201527f4d696e46697273744c6f7373206973206e6f74207361746973666965640000006044820152606401610665565b600a8101546040805185815260208101929092527f144169394082237543f435a0b89a572f6eceb50fd97d3739d74aa0447d2101f491016126ad565b600061285d61069261136c565b90506000612869612708565b6040516305459dc160e01b81523060048201529091506000906001600160a01b038416906305459dc190602401602060405180830381865afa1580156128b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d791906133cf565b905080156115145750600f01805467ffffffffffffffff19164267ffffffffffffffff1617905550565b600061055982600861305c565b6000612918612708565b600b810180546bffffffffffffffffffffffff1630600160601b0217905560128101805460ff1916905582519091506001600160a01b03166129a85760405162461bcd60e51b8152602060048201526024808201527f53656375726974697a6174696f6e506f6f6c3a20496e76616c69642063757272604482015263656e637960e01b6064820152608401610665565b81516009820180546001600160a01b0319166001600160a01b0390921691909117905560208201516129d990612d0d565b6109888260600151612eb1565b6001600160a01b038116600081815260008051602061367a83398151915260208181526040808420878552909152808320805460ff191690555190923392909186917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b91a4505050565b612a598261277f565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b8152602060048201526024808201527f52656769737472793a204f6e6c792053656375726974697a6174696f6e4d616e60448201526330b3b2b960e11b6064820152608401610665565b612ace8361277f565b604051632474521560e21b81527f3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d760048201526001600160a01b03838116602483015291909116906391d1485490604401602060405180830381865afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b609190613509565b80612bf65750604051632474521560e21b81527fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e60048201526001600160a01b0382811660248301528316906391d1485490604401602060405180830381865afa158015612bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf69190613509565b6115145760405162461bcd60e51b815260206004820152602960248201527f52656769737472793a204e6f7420616e20706f6f6c2061646d696e206f72207060448201526837b7b61037bbb732b960b91b6064820152608401610665565b612c5c6130e8565b60008051602061365a833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b600260655403612d065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610665565b6002606555565b612d1a612710606461362f565b8163ffffffff161115612d955760405162461bcd60e51b815260206004820152603b60248201527f53656375726974697a6174696f6e506f6f6c3a206d696e46697273744c6f737360448201527f43757368696f6e2069732067726561746572207468616e2031303000000000006064820152608401610665565b6000612d9f612708565b600b8101805463ffffffff191663ffffffff85169081179091556040519081529091507f091193ea2a1d71a11f3479abe1d30b1ba8fecf8b18e1c728e3ee787de54d0399906020015b60405180910390a15050565b612dfc61272c565b60008051602061365a833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612c96565b612e468261313e565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b815260206004820152602260248201527f52656769737472793a204f6e6c79204c6f616e52657061796d656e74526f757460448201526132b960f11b6064820152608401610665565b6000612ebb612708565b601181018390556040518381529091507f3fb30b6090e6989c6819119c2885012949e75471ed4ce5e80c9be541ea0e2f3f90602001612de8565b6000612eff612708565b90508181600a0154612f119190613646565b600a820155612f1e610684565b612f6a5760405162461bcd60e51b815260206004820152601d60248201527f4d696e46697273744c6f7373206973206e6f74207361746973666965640000006044820152606401610665565b600a8101546040805184815260208101929092527f7101485dbd37bb087fe0b87493d51eb91bf2ab8df11430836c5db447eda8a7d09101612de8565b612faf8261314b565b6001600160a01b0316816001600160a01b0316146109885760405162461bcd60e51b815260206004820152601960248201527f52656769737472793a204f6e6c79204c6f616e4b65726e656c000000000000006044820152606401610665565b60006301ffc9a760e01b6001600160e01b0319831614806126eb575063395dfc6360e11b6001600160e01b0319831614806105595750506001600160e01b031916634178950d60e11b1490565b6000826001600160a01b031663bcaa0c5583600a81111561307f5761307f61339f565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa1580156130bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e191906133e8565b9392505050565b60008051602061365a8339815191525460ff16610cd05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610665565b600061055982600661305c565b600061055982600761305c565b60006020828403121561316a57600080fd5b81356001600160e01b0319811681146130e157600080fd5b60006020828403121561319457600080fd5b5035919050565b6001600160a01b038116811461068157600080fd5b600080604083850312156131c357600080fd5b8235915060208301356131d58161319b565b809150509250929050565b6000602082840312156131f257600080fd5b81356130e18161319b565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561322557600080fd5b813567ffffffffffffffff8082111561323d57600080fd5b818401915084601f83011261325157600080fd5b813581811115613263576132636131fd565b604051601f8201601f19908116603f0116810190838211818310171561328b5761328b6131fd565b816040528281528760208487010111156132a457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080604083850312156132d757600080fd5b82356132e28161319b565b91506020830135600281106131d557600080fd5b63ffffffff8116811461068157600080fd5b60006020828403121561331a57600080fd5b81356130e1816132f6565b6000806040838503121561333857600080fd5b82356133438161319b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156133935783516001600160e01b0319168352928401929184019160010161336d565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60208101600483106133c9576133c961339f565b91905290565b6000602082840312156133e157600080fd5b5051919050565b6000602082840312156133fa57600080fd5b81516130e18161319b565b60208082526025908201527f416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420616e2060408201526437bbb732b960d91b606082015260800190565b8051801515811461345a57600080fd5b919050565b60006080828403121561347157600080fd5b6040516080810181811067ffffffffffffffff82111715613494576134946131fd565b60405282516134a28161319b565b815260208301516134b2816132f6565b60208201526134c36040840161344a565b6040820152606083015160608201528091505092915050565b6001600160a01b038316815260408101600283106134fc576134fc61339f565b8260208301529392505050565b60006020828403121561351b57600080fd5b6130e18261344a565b60006020828403121561353657600080fd5b81516130e1816132f6565b60208082526028908201527f53656375726974697a6174696f6e506f6f6c3a20506f6f6c20696e20636c6f73604082015267656420737461746560c01b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526023908201527f53656375726974697a6174696f6e506f6f6c3a205472616e73666572206661696040820152621b195960ea1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610559576105596135f0565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610559576105596135f0565b81810381811115610559576105596135f056fecd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300b38e00afe21f8bf8961a30ad85d453b5f474f19414b8973dee80c89fb0d97b00a26469706673582212204d456c0219fc81b5e054e07508ad68dba38753e8f5585a7cd9dac853a72d09f164736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "decreaseReserve(uint256)": {
        "details": "trigger update reserve"
      },
      "disburse(address,uint256)": {
        "details": "Disburses a specified amount of currency to the given user.",
        "params": {
          "currencyAmount": "The amount of currency to disburse.",
          "usr": "The address of the user to receive the currency."
        }
      },
      "increaseReserve(uint256)": {
        "details": "trigger update reserve when buy note token action happens"
      },
      "increaseTotalAssetRepaidCurrency(uint256)": {
        "details": "trigger update asset value repaid"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasFinishedRedemption()": {
        "notice": "checks if the redemption process has finished"
      },
      "injectTGEAddress(address,uint8)": {
        "notice": "injects the address of the Token Generation Event (TGE) and the associated token address"
      },
      "isClosedState()": {
        "notice": "checks if the contract is in a closed state"
      },
      "isDebtCeilingValid()": {
        "notice": "check current debt ceiling is valid"
      },
      "setDebtCeiling(uint256)": {
        "notice": "sets debt ceiling value"
      },
      "setMinFirstLossCushion(uint32)": {
        "notice": "sets mint first loss value"
      },
      "setPot(address)": {
        "notice": "sets the pot address for the contract"
      },
      "withdraw(address,uint256)": {
        "notice": "allows the originator to withdraw from reserve"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 720,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 723,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3908,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3561,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1023,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1092,
        "contract": "contracts/protocol/pool/SecuritizationTGE.sol:SecuritizationTGE",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}