{
  "address": "0x5318ce1B613E9b42ADaDa87134d30B41401cfDbD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_agreementId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_outstandingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "AssetRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "_agreementIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "BatchAssetRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "_errorId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_agreementId",
          "type": "bytes32"
        }
      ],
      "name": "LogError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_agreementId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "LogOutputSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "orderAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "orderValues",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "termsContractParameters",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "nonces",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "validateSignature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.LoanAssetInfo[]",
              "name": "latInfo",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ILoanKernel.FillDebtOrderParam",
          "name": "fillDebtOrderParam",
          "type": "tuple"
        }
      ],
      "name": "fillDebtOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializedVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "agreementIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "repayInBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9064de728bef63f503bb0c7993bdc0770195acfaef810e64eebacb703fe54a4f",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0x5318ce1B613E9b42ADaDa87134d30B41401cfDbD",
    "transactionIndex": 0,
    "gasUsed": "3093289",
    "logsBloom": "0x
    "blockHash": "0xd9bce767c5e0e55802accf8fe0470295b671a7592643cb80aa7a522b1b2e3cc8",
    "transactionHash": "0x9064de728bef63f503bb0c7993bdc0770195acfaef810e64eebacb703fe54a4f",
    "logs": [],
    "blockNumber": 22826859,
    "cumulativeGasUsed": "3093289",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "59588a77e86657edaa691fc549aaaac9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_agreementId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_outstandingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"AssetRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_agreementIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BatchAssetRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_errorId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_agreementId\",\"type\":\"bytes32\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_agreementId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"LogOutputSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"orderAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"orderValues\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"termsContractParameters\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"validateSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.LoanAssetInfo[]\",\"name\":\"latInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ILoanKernel.FillDebtOrderParam\",\"name\":\"fillDebtOrderParam\",\"type\":\"tuple\"}],\"name\":\"fillDebtOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"agreementIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"repayInBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"repayInBatch(bytes32[],uint256[],address)\":{\"details\":\"calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"LoanKernel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fillDebtOrder((address[],uint256[],bytes32[],(uint256[],uint256[],address,bytes)[]))\":{\"notice\":\"Filling new Debt Order Notice: - All Debt Order must to have same:   + TermContract   + Creditor Fee   + Debtor Fee\"},\"repayInBatch(bytes32[],uint256[],address)\":{\"notice\":\"allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts\"}},\"notice\":\"Upload loan, Repay Loan and conclude loan\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/loan/LoanKernel.sol\":\"LoanKernel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb66b2285eab5f7766c538c326c1a0e86013487b1636177d595d1ce543fec43a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\\n    Initializable, ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721PausableUpgradeable\\n{\\n    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    function __ERC721PresetMinterPauserAutoId_init(string memory name, string memory symbol, string memory baseTokenURI) internal onlyInitializing {\\n        __ERC721_init_unchained(name, symbol);\\n        __Pausable_init_unchained();\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory, string memory, string memory baseTokenURI) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xa0045ea98f9c5c3b1656be3f78ce3e1adf2c046bf1ce6a8ae9062b411f117536\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        return\\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x7c3cbce7cec023937ebbae16ca73e569979b4d63bbcd471f0db6b17d5fc6d1df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x94edef8687cf1335a114f7e7267fa92cb0d9e61afde8d62589aceede6c245caf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '../libraries/Configuration.sol';\\nimport {OWNER_ROLE, ORIGINATOR_ROLE, VALIDATOR_ROLE, POOL_ADMIN_ROLE} from '../libraries/DataTypes.sol';\\n/**\\n * @title Untangled's SecuritizationPool contract\\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\\n *  It provides functionalities for contract initialization, pausing, and access control.\\n * @author Untangled Team\\n */\\nabstract contract UntangledBase is\\n    Initializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    function isAdmin() public view virtual returns (bool) {\\n        return hasRole(OWNER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\\n        _;\\n    }\\n\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __UntangledBase__init_unchained(owner);\\n    }\\n\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\n        if (owner == address(0)) owner = _msgSender();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(OWNER_ROLE, owner);\\n\\n        _setRoleAdmin(ORIGINATOR_ROLE, OWNER_ROLE);\\n        _setRoleAdmin(VALIDATOR_ROLE, POOL_ADMIN_ROLE);\\n    }\\n\\n    function getInitializedVersion() public view virtual returns (uint256) {\\n        return _getInitializedVersion();\\n    }\\n\\n    function pause() public virtual onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1329f3b5d63c5a91d2a96e753fce2f3817b8316fb2206b0ef68b87e418fd6bbd\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IERC5008.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// https://eips.ethereum.org/EIPS/eip-5008\\n/// @dev the ERC-165 identifier for this interface is 0xce03fdab.\\n/* is IERC165 */ interface IERC5008 {\\n    /// @notice Emitted when the `nonce` of an NFT is changed\\n    event NonceChanged(uint256 tokenId, uint256 nonce);\\n\\n    /// @notice Get the nonce of an NFT\\n    /// Throws if `tokenId` is not a valid NFT\\n    /// @param tokenId The id of the NFT\\n    /// @return The nonce of the NFT\\n    function nonce(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc0a40645ca18cca3cbcb135330c42327fb8e6683d04026ee525ca7b57d17e049\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport {IUniqueIdentity} from './IUniqueIdentity.sol';\\n\\ninterface IGo {\\n    /// @notice Returns the address of the UniqueIdentity contract.\\n    function uniqueIdentity() external returns (IUniqueIdentity);\\n\\n    function go(address account) external view returns (bool);\\n\\n    function goOnlyIdTypes(address account, uint256[] memory onlyIdTypes) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc3170d26b8d3e3ef8ba53eab29bcabd4423144acdbfa14e3b577fb1e49b901d9\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ILoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../libraries/DataTypes.sol';\\n\\ninterface ILoanKernel {\\n    /****************** */\\n    // CONSTANTS\\n    /****************** */\\n\\n    enum FillingAddressesIndex {\\n        SECURITIZATION_POOL,\\n        PRINCIPAL_TOKEN_ADDRESS,\\n        REPAYMENT_ROUTER\\n    }\\n\\n    enum FillingNumbersIndex {\\n        CREDITOR_FEE,\\n        ASSET_PURPOSE\\n    }\\n\\n    //********************************************************* */\\n\\n    //****** */\\n    // EVENTS\\n    //****** */\\n\\n    event LogOutputSubmit(bytes32 indexed _agreementId, uint256 indexed _tokenIndex, uint256 _totalAmount);\\n\\n    event AssetRepay(\\n        bytes32 indexed _agreementId,\\n        address indexed _payer,\\n        address indexed _pool,\\n        uint256 _amount,\\n        uint256 _outstandingAmount,\\n        address _token\\n    );\\n\\n    event BatchAssetRepay(bytes32[] _agreementIds, address _payer, uint256[] _amounts, address _token);\\n\\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\\n\\n    //********************************************************* */\\n\\n    /*********** */\\n    // STRUCTURES\\n    /*********** */\\n\\n    struct LoanIssuance {\\n        address version;\\n        address[] debtors;\\n        bytes32[] termsContractParameters; // for different loans\\n        bytes32[] agreementIds;\\n        uint256[] salts;\\n    }\\n\\n    struct LoanOrder {\\n        LoanIssuance issuance;\\n        address principalTokenAddress;\\n        uint256[] principalAmounts;\\n        uint256 creditorFee;\\n        uint256[] expirationTimestampInSecs;\\n        bytes32[] debtOrderHashes;\\n        uint8[] riskScores;\\n        uint8 assetPurpose;\\n    }\\n\\n    struct FillDebtOrderParam {\\n        address[] orderAddresses; // 0-pool, 1-principal token address, 2-repayment router,...\\n        uint256[] orderValues; //  0-creditorFee, 1-asset purpose,..., [x] principalAmounts, [x] expirationTimestampInSecs, [x] - salts, [x] - riskScores\\n        bytes32[] termsContractParameters; // Term contract parameters from different farmers, encoded as hash strings\\n        DataTypes.LoanAssetInfo[] latInfo;\\n    }\\n\\n    /*********** */\\n    // VARIABLES\\n    /*********** */\\n\\n    /// @notice allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts\\n    /// @dev calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment\\n    function repayInBatch(\\n        bytes32[] calldata agreementIds,\\n        uint256[] calldata amounts,\\n        address tokenAddress\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xcded60f3cdfe7d5b5eebec5c7873f501c197489edaea5ce39e9d21ef631ac308\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\nimport {IPauseable} from './IPauseable.sol';\\n\\ninterface INoteToken is IERC20Upgradeable, IERC20MetadataUpgradeable, IPauseable {\\n\\n    function poolAddress() external view returns (address);\\n\\n    function noteTokenType() external view returns (uint8);\\n\\n    function mint(address receiver, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0a601731b1628a57da896f734eb2d946171e1cdcf5b0c7f8d40280bf0993ee58\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../storage/Registry.sol';\\nimport './INoteToken.sol';\\n\\ninterface INoteTokenFactory {\\n    event TokenCreated(\\n        address indexed token,\\n        address indexed poolAddress,\\n        Configuration.NOTE_TOKEN_TYPE indexed tokenType,\\n        uint8 decimals,\\n        string ticker\\n    );\\n\\n    event UpdateNoteTokenImplementation(address indexed newAddress);\\n\\n    function tokens(uint256 idx) external view returns (INoteToken);\\n\\n    function isExistingTokens(address tokenAddress) external view returns (bool);\\n\\n    function changeMinterRole(address token, address newController) external;\\n\\n    function setNoteTokenImplementation(address newAddress) external;\\n\\n    function noteTokenImplementation() external view returns (address);\\n\\n    /// @notice Creates a new NoteToken contract instance with the specified parameters\\n    /// Initializes the token with the provided parameters, including the pool address and note token type\\n    function createToken(\\n        address poolAddress,\\n        Configuration.NOTE_TOKEN_TYPE noteTokenType,\\n        uint8 _nDecimals,\\n        string calldata ticker\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x32fe730a6c650e87a545f8379d32ec87637f4dca8d54058de88ab606ec2f0b8d\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\ninterface INoteTokenVault {\\n    event RedeemOrder(\\n        address pool,\\n        address noteTokenAddress,\\n        address usr,\\n        uint256 noteTokenRedeemAmount,\\n        uint256 noteTokenPrice\\n    );\\n    event CancelOrder(address pool, address noteTokenAddress, address usr, uint256 noteTokenRedeemAmount);\\n    event PreDistribute(\\n        address pool,\\n        uint256 totalCurrencyAmount,\\n        address[] noteTokenAddresses,\\n        uint256[] totalRedeemedNoteAmounts\\n    );\\n    event DisburseOrder(\\n        address pool,\\n        address noteTokenAddress,\\n        address[] toAddresses,\\n        uint256[] amounts,\\n        uint256[] redeemedAmount\\n    );\\n    event SetRedeemDisabled(address pool, bool _redeemDisabled);\\n\\n    /// @title UserOrder\\n    /// @dev Represents a user's order containing the amount of SOT and JOT to redeem.\\n    struct UserOrder {\\n        uint256 redeemSOTAmount;\\n        uint256 redeemJOTAmount;\\n    }\\n\\n    struct RedeemOrderParam {\\n        address pool;\\n        address noteTokenAddress;\\n        uint256 noteTokenRedeemAmount;\\n    }\\n\\n    struct CancelOrderParam {\\n        address pool;\\n        address noteTokenAddress;\\n        uint256 maxTimestamp;\\n    }\\n\\n    /// @notice redeemJOTOrder function can be used to place or revoke a redeem\\n    function redeemOrder(RedeemOrderParam calldata redeemParam, bytes calldata signature) external;\\n\\n    /// @dev Disburses funds and handles JOT redemptions for a pool.\\n    /// @param pool The address of the pool contract.\\n    /// @param toAddresses An array of recipient addresses.\\n    /// @param currencyAmounts An array of amounts to disburse to each recipient.\\n    /// @param redeemedNoteAmounts An array of JOT amounts redeemed by each recipient.\\n    /// @notice Only accessible by BACKEND_ADMIN role.\\n    function disburseAll(\\n        address pool,\\n        address noteTokenAddress,\\n        address[] memory toAddresses,\\n        uint256[] memory currencyAmounts,\\n        uint256[] memory redeemedNoteAmounts\\n    ) external;\\n\\n    function cancelOrder(CancelOrderParam memory cancelParam, bytes calldata signature) external;\\n\\n    /// @notice Pause redeem request\\n    function setRedeemDisabled(address pool, bool _redeemDisabled) external;\\n\\n    /// @notice Total amount of SOT redeem order\\n    function totalSOTRedeem(address pool) external view returns (uint256);\\n\\n    /// @notice Get redeem disabled\\n    function redeemDisabled(address pool) external view returns (bool);\\n\\n    /// @notice Total amount of JOT redeem order\\n    function totalJOTRedeem(address pool) external view returns (uint256);\\n\\n    /// @dev Retrieves the amount of JOT tokens that can be redeemed for the specified user.\\n    /// @param usr The address of the user for which to retrieve the redeemable JOT amount.\\n    /// @return The amount of JOT tokens that can be redeemed by the user.\\n    function userRedeemJOTOrder(address pool, address usr) external view returns (uint256);\\n\\n    function userRedeemSOTOrder(address pool, address usr) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x879f4ebdf15bd7637b37fbf2d52266f95a3d6ac98caedc517a4fa6b82af812b5\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\ninterface IPauseable {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb9fa9e10983c48f77c29a5f0c61cbc6a8a75fcc1f8d9b0ee865e0c198553be13\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.19;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\nimport {Configuration} from '../libraries/Configuration.sol';\\n\\ninterface IPool {\\n    function calcJuniorRatio() external view returns (uint256 juniorRatio);\\n\\n    function calcTokenPrices() external view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice);\\n\\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external;\\n\\n    function collectAssets(\\n        uint256[] memory tokenIds,\\n        DataTypes.LoanEntry[] memory loanEntries\\n    ) external returns (uint256);\\n\\n    function collectERC20Asset(address tokenAddresss) external;\\n\\n    function currentNAV() external view returns (uint256 nav_);\\n\\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256);\\n\\n    function debt(uint256 loan) external view returns (uint256 loanDebt);\\n\\n    function debtCeiling() external view returns (uint256);\\n\\n    function decreaseReserve(uint256 currencyAmount) external;\\n\\n    function disburse(address usr, uint256 currencyAmount) external;\\n\\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory);\\n\\n    function getTokenAssetAddresses() external view returns (address[] memory);\\n\\n    function getTokenAssetAddressesLength() external view returns (uint256);\\n\\n    function increaseRepayAmount(uint256 principalRepay, uint256 interestRepay) external;\\n\\n    function increaseReserve(uint256 currencyAmount) external;\\n\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external;\\n\\n    function injectTGEAddress(address _tgeAddress, Configuration.NOTE_TOKEN_TYPE) external;\\n\\n    function interestRateSOT() external view returns (uint256);\\n\\n    function isDebtCeilingValid() external view returns (bool);\\n\\n    function isMinFirstLossValid() external view returns (bool);\\n\\n    function jotToken() external view returns (address);\\n\\n    function minFirstLossCushion() external view returns (uint32);\\n\\n    function openingBlockTimestamp() external view returns (uint64);\\n\\n    function pot() external view returns (address);\\n\\n    function rebase() external;\\n\\n    function repayLoan(\\n        uint256[] calldata loans,\\n        uint256[] calldata amounts\\n    ) external returns (uint256[] memory, uint256[] memory);\\n\\n    function reserve() external view returns (uint256);\\n\\n    function risk(bytes32 nft_) external view returns (uint256 risk_);\\n\\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory);\\n\\n    function secondTGEAddress() external view returns (address);\\n\\n    function seniorDebtAndBalance() external view returns (uint256, uint256);\\n\\n    function setDebtCeiling(uint256 _debtCeiling) external;\\n\\n    function setInterestRateSOT(uint32 _newRate) external;\\n\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external;\\n\\n    function setUpOpeningBlockTimestamp() external;\\n\\n    function sotToken() external view returns (address);\\n\\n    function tgeAddress() external view returns (address);\\n\\n    function tokenAssetAddresses(uint256 idx) external view returns (address);\\n\\n    function totalAssetRepaidCurrency() external view returns (uint256);\\n\\n    function underlyingCurrency() external view returns (address);\\n\\n    function validatorRequired() external view returns (bool);\\n\\n    function withdraw(address to, uint256 amount) external;\\n\\n    function withdrawAssets(\\n        address[] memory tokenAddresses,\\n        uint256[] memory tokenIds,\\n        address[] memory recipients\\n    ) external;\\n\\n    function withdrawERC20Assets(\\n        address[] memory tokenAddresses,\\n        address[] memory recipients,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa55f17b17739c0ba590bcc36b7b788a7a7f970b87f97d7b36f099a974efab911\",\"license\":\"Unlicense\"},\"contracts/interfaces/ISecuritizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../storage/Registry.sol';\\nimport './IPool.sol';\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\ninterface ISecuritizationManager {\\n    event NewPoolCreated(address indexed instanceAddress);\\n    event NewPoolDeployed(address indexed instanceAddress, address poolOwner, DataTypes.NewPoolParams newPoolParams);\\n    event UpdatePotToPool(address indexed pot, address indexed pool);\\n    event SotDeployed(address indexed sotAddress, address tgeAddress, address poolAddress);\\n    event JotDeployed(address indexed jotAddress, address tgeAddress, address poolAddress);\\n\\n    event SetupSot(address indexed sotAddress, address tgeAddress, TGEParam tgeParam, uint256 interestRate);\\n    event SetupJot(address indexed jotAddress, address tgeAddress, TGEParam tgeParam, uint256 initialJOTAmount);\\n\\n    event UpdateAllowedUIDTypes(uint256[] uids);\\n    event TokensPurchased(address indexed investor, address indexed tgeAddress, uint256 amount, uint256 tokenAmount);\\n    event NoteTokenPurchased(\\n        address indexed investor,\\n        address indexed tgeAddress,\\n        address poolAddress,\\n        uint256 amount,\\n        uint256 tokenAmount\\n    );\\n\\n    event UpdateTGEInfo(TGEInfoParam[] tgeInfos);\\n\\n    struct TGEParam {\\n        address issuerTokenController;\\n        address pool;\\n        uint256 minBidAmount;\\n        uint256 totalCap;\\n        uint256 openingTime;\\n        string ticker;\\n        uint8 saleType;\\n    }\\n\\n    struct TGEInfoParam {\\n        address tgeAddress;\\n        uint256 totalCap;\\n        uint256 minBidAmount;\\n    }\\n\\n    function registry() external view returns (Registry);\\n\\n    function isExistingPools(address pool) external view returns (bool);\\n\\n    function pools(uint256 idx) external view returns (address);\\n\\n    function potToPool(address pot) external view returns (address);\\n\\n    function isExistingTGEs(address tge) external view returns (bool);\\n\\n    function hasAllowedUID(address sender) external view returns (bool);\\n\\n    /// @dev Register pot to pool instance\\n    /// @param pot Pool linked wallet\\n    function registerPot(address pot) external;\\n}\\n\",\"keccak256\":\"0x2cd4370a946deec440effb99a89b63f08a7ab8b4196d703e2a68eb009a826380\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ISecuritizationPoolValueService.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\nimport '../libraries/DataTypes.sol';\\n\\ninterface ISecuritizationPoolValueService {\\n    /// @notice calculates the total expected value of all assets in the securitization pool at a given timestamp\\n    /// @dev iterates over the NFT assets and token assets in the pool, calling getExpectedAssetValue\\n    /// or getExpectedERC20AssetValue for each asset and summing up the values\\n    function getExpectedAssetsValue(address poolAddress) external view returns (uint256 expectedAssetsValue);\\n\\n    /// @notice returns the rate that belongs to Junior investors at the current time\\n    function getJuniorRatio(address poolAddress) external view returns (uint256);\\n\\n    function getPoolValue(address poolAddress) external view returns (uint256);\\n\\n    /// @notice current individual asset price for the \\\"SOT\\\" tranche at the current timestamp\\n    function getSOTTokenPrice(address securitizationPool) external view returns (uint256);\\n\\n    /// @notice calculates the token price for the \\\"JOT\\\" tranche at the current timestamp\\n    function getJOTTokenPrice(address securitizationPool) external view returns (uint256);\\n\\n    /// @notice calculates the token price for a specific token address in the securitization pool\\n    function calcTokenPrice(address pool, address tokenAddress) external view returns (uint256);\\n\\n    function getTokenValues(\\n        address[] calldata tokenAddresses,\\n        address[] calldata investors\\n    ) external view returns (uint256[] memory);\\n\\n    function getTokenPrices(\\n        address[] calldata pools,\\n        address[] calldata tokenAddresses\\n    ) external view returns (uint256[] memory);\\n\\n    function getExternalTokenInfos(address poolAddress) external view returns (DataTypes.NoteToken[] memory);\\n\\n    /// @notice the available cash balance in the securitization pool\\n    function getCashBalance(address pool) external view returns (uint256);\\n\\n    /// @notice calculates the corresponding total asset value for a specific token address, investor, and end time\\n    function calcCorrespondingTotalAssetValue(address tokenAddress, address investor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4aef953f22fa0f20e40a6db008a17baea8625b7b0cc8b3d074a39272ed355bd\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ITokenGenerationEventFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '../storage/Registry.sol';\\nimport './INoteToken.sol';\\n\\ninterface ITokenGenerationEventFactory {\\n    enum SaleType {\\n        NORMAL_SALE_JOT,\\n        NORMAL_SALE_SOT\\n    }\\n\\n    event UpdateTGEImplAddress(SaleType indexed tgeType, address newImpl);\\n    event TokenGenerationEventCreated(address indexed tgeInstance);\\n\\n    /// @notice creates a new TGE instance based on the provided parameters and the sale type\\n    function createNewSaleInstance(\\n        address issuerTokenController,\\n        address token,\\n        address currency,\\n        uint8 saleType,\\n        uint256 openingTime\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2e045e7f0fa9144f0df4498ca9311db41831547a08b9e896b66589884c5ea736\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IUniqueIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\n\\ninterface IUniqueIdentity is IERC1155Upgradeable {\\n    /// @notice Mint a new UniqueIdentity token to the msgSender\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding mint params:\\n    ///                  account, id, expiresAt, address(this), nonces[account], block.chainid\\n    ///                  from an address with the SIGNER_ROLE.\\n    function mint(uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\n\\n    /// @notice Mint a new UniqueIdentity token to the `recipient`\\n    /// @param recipient The recipient address to be minted to.\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding mintTo params:\\n    ///                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)\\n    ///                  from an address with the SIGNER_ROLE.\\n    function mintTo(address recipient, uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\n\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account`\\n    /// @param account The account which currently owns the UID\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    /// @param expiresAt The expiration time of the signature\\n    /// @param signature An EIP-191 signature of the corresponding burn params:\\n    ///                  (account, id, expiresAt, address(this), nonces[account], block.chainid)\\n    ///                  from an address with the SIGNER_ROLE.\\n    function burn(address account, uint256 id, uint256 expiresAt, bytes calldata signature) external;\\n\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\\n    /// @param account The account which currently owns the UID\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\n    function burnFrom(address account, uint256 id) external;\\n\\n}\\n\",\"keccak256\":\"0xc3f5ab5411d7fa944e2e2c77d66b75ea79f33c5fd878df6ddcf2e0684959fdf3\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport {Registry} from '../storage/Registry.sol';\\nimport {Configuration} from './Configuration.sol';\\nimport {ISecuritizationManager} from '../interfaces/ISecuritizationManager.sol';\\nimport {IPool} from '../interfaces/IPool.sol';\\nimport {INoteTokenFactory} from '../interfaces/INoteTokenFactory.sol';\\nimport {INoteToken} from '../interfaces/INoteToken.sol';\\nimport {ITokenGenerationEventFactory} from '../interfaces/ITokenGenerationEventFactory.sol';\\nimport {ILoanKernel} from '../interfaces/ILoanKernel.sol';\\nimport {LoanAssetToken} from '../tokens/ERC721/LoanAssetToken.sol';\\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\\nimport {IGo} from '../interfaces/IGo.sol';\\nimport {OWNER_ROLE} from './DataTypes.sol';\\nimport {INoteTokenVault} from '../interfaces/INoteTokenVault.sol';\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the Registry contract\\n * @author Untangled Team\\n */\\nlibrary ConfigHelper {\\n    function getAddress(Registry registry, Configuration.CONTRACT_TYPE contractType) internal view returns (address) {\\n        return registry.getAddress(uint8(contractType));\\n    }\\n\\n    function getSecuritizationManager(Registry registry) internal view returns (ISecuritizationManager) {\\n        return ISecuritizationManager(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER));\\n    }\\n\\n    function getSecuritizationPool(Registry registry) internal view returns (IPool) {\\n        return IPool(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL));\\n    }\\n\\n    function getNoteTokenFactory(Registry registry) internal view returns (INoteTokenFactory) {\\n        return INoteTokenFactory(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY));\\n    }\\n\\n    function getTokenGenerationEventFactory(Registry registry) internal view returns (ITokenGenerationEventFactory) {\\n        return\\n            ITokenGenerationEventFactory(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY)\\n            );\\n    }\\n\\n    function getLoanAssetToken(Registry registry) internal view returns (LoanAssetToken) {\\n        return LoanAssetToken(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN));\\n    }\\n\\n    function getLoanKernel(Registry registry) internal view returns (ILoanKernel) {\\n        return ILoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_KERNEL));\\n    }\\n\\n    function getSecuritizationPoolValueService(\\n        Registry registry\\n    ) internal view returns (ISecuritizationPoolValueService) {\\n        return\\n            ISecuritizationPoolValueService(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE)\\n            );\\n    }\\n\\n    function getGo(Registry registry) internal view returns (IGo) {\\n        return IGo(getAddress(registry, Configuration.CONTRACT_TYPE.GO));\\n    }\\n\\n    function getNoteTokenVault(Registry registry) internal view returns (INoteTokenVault) {\\n        return INoteTokenVault(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\\n    }\\n\\n    function requireSecuritizationManager(Registry registry, address account) internal view {\\n        require(account == address(getSecuritizationManager(registry)), 'Registry: Only SecuritizationManager');\\n    }\\n\\n    function requireLoanKernel(Registry registry, address account) internal view {\\n        require(account == address(getLoanKernel(registry)), 'Registry: Only LoanKernel');\\n    }\\n}\\n\",\"keccak256\":\"0x62f20faafd7b356851cfddfbe821b3f8dcfef69c6e478f3a121307cbb0d7fee6\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title Configuration\\n/// @author Untangled Team\\nlibrary Configuration {\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\n    // You can rename or append. But NEVER change the order.\\n    enum CONTRACT_TYPE {\\n        SECURITIZATION_MANAGER,\\n        SECURITIZATION_POOL,\\n        NOTE_TOKEN_FACTORY,\\n        TOKEN_GENERATION_EVENT_FACTORY,\\n        DISTRIBUTION_ASSESSOR,\\n        LOAN_ASSET_TOKEN,\\n        LOAN_KERNEL,\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\n        GO,\\n        NOTE_TOKEN_VAULT\\n    }\\n\\n    enum NOTE_TOKEN_TYPE {\\n        SENIOR,\\n        JUNIOR\\n    }\\n\\n    enum ASSET_PURPOSE {\\n        LOAN,\\n        INVOICE\\n    }\\n}\\n\",\"keccak256\":\"0x1874e4d4425c10a717621040e9da43851b9c9826211c9929cd21b701729dfe4e\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// import '../storage/Registry.sol';\\nimport './Configuration.sol';\\nimport './UnpackLoanParamtersLib.sol';\\n\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\nuint256 constant ONE = 10 ** 27;\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\n\\n// In PoolNAV we use this\\nbytes32 constant POOL = keccak256('POOL');\\n\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\n\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\n\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n// In Go\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\n\\n// in ERC1155PresetPauserUpgradeable\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n\\nlibrary DataTypes {\\n    struct NoteToken {\\n        address poolAddress;\\n        address noteTokenAddress;\\n        uint256 balance;\\n        uint256 apy;\\n    }\\n    struct RiskScore {\\n        uint32 daysPastDue;\\n        uint32 advanceRate;\\n        uint32 penaltyRate;\\n        uint32 interestRate;\\n        uint32 probabilityOfDefault;\\n        uint32 lossGivenDefault;\\n        uint32 writeOffAfterGracePeriod;\\n        uint32 gracePeriod;\\n        uint32 collectionPeriod;\\n        uint32 writeOffAfterCollectionPeriod;\\n        uint32 discountRate;\\n    }\\n\\n    struct LoanEntry {\\n        address debtor;\\n        address principalTokenAddress;\\n        bytes32 termsParam; // actually inside this param was already included P token address\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        uint8 riskScore;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n    }\\n    struct NFTAsset {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    struct NewPoolParams {\\n        address currency;\\n        uint32 minFirstLossCushion;\\n        bool validatorRequired;\\n        uint256 debtCeiling;\\n    }\\n\\n    /// @notice details of the underlying collateral\\n    struct NFTDetails {\\n        uint128 futureValue;\\n        uint128 maturityDate;\\n        uint128 risk;\\n        address debtor;\\n        address principalTokenAddress;\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n        bytes32 termsParam;\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 interestRate;\\n    }\\n\\n    /// @notice stores all needed information of an interest rate group\\n    struct Rate {\\n        // total debt of all loans with this rate\\n        uint256 pie;\\n        // accumlated rate index over time\\n        uint256 chi;\\n        // interest rate per second\\n        uint256 ratePerSecond;\\n        // penalty rate per second\\n        uint256 penaltyRatePerSecond;\\n        // accumlated penalty rate index over time\\n        uint256 penaltyChi;\\n        // last time the rate was accumulated\\n        uint48 lastUpdated;\\n        // time start to penalty\\n        uint48 timeStartPenalty;\\n    }\\n\\n    /// @notice details of the loan\\n    struct LoanDetails {\\n        uint128 borrowed;\\n        // only auth calls can move loan into different writeOff group\\n        bool authWriteOff;\\n    }\\n\\n    /// @notice details of the write off group\\n    struct WriteOffGroup {\\n        // denominated in (10^27)\\n        uint128 percentage;\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\n        uint128 overdueDays;\\n        uint128 riskIndex;\\n    }\\n\\n    struct Storage {\\n        bool validatorRequired;\\n        uint64 firstAssetTimestamp;\\n        RiskScore[] riskScores;\\n        NFTAsset[] nftAssets;\\n        address[] tokenAssetAddresses;\\n        mapping(address => bool) existsTokenAssetAddress;\\n        // TGE\\n        address tgeAddress;\\n        address secondTGEAddress;\\n        address sotToken;\\n        address jotToken;\\n        address underlyingCurrency;\\n        uint256 reserve; // Money in pool\\n        uint32 minFirstLossCushion;\\n        uint64 openingBlockTimestamp;\\n        // by default it is address(this)\\n        address pot;\\n        // for base (sell-loan) operation\\n        uint256 paidPrincipalAmountSOT;\\n        uint256 interestRateSOT; // Annually, support 4 decimals num\\n        uint256 totalAssetRepaidCurrency;\\n        uint256 debtCeiling;\\n        // lock distribution\\n        mapping(address => mapping(address => uint256)) lockedDistributeBalances;\\n        uint256 totalLockedDistributeBalance;\\n        mapping(address => mapping(address => uint256)) lockedRedeemBalances;\\n        // token address -> total locked\\n        mapping(address => uint256) totalLockedRedeemBalances;\\n        uint256 totalRedeemedCurrency; // Total $ (cUSD) has been redeemed\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\n        mapping(uint256 => Rate) rates;\\n        mapping(uint256 => uint256) pie;\\n        /// @notice mapping from loan => rate\\n        mapping(uint256 => uint256) loanRates;\\n        /// @notice mapping from loan => grace time\\n\\n        uint256 loanCount;\\n        mapping(uint256 => uint256) balances;\\n        uint256 balance;\\n        // nft => details\\n        mapping(bytes32 => NFTDetails) details;\\n        // loan => details\\n        mapping(uint256 => LoanDetails) loanDetails;\\n        // timestamp => bucket\\n        mapping(uint256 => uint256) buckets;\\n        WriteOffGroup[] writeOffGroups;\\n        // Write-off groups will be added as rate groups to the pile with their index\\n        // in the writeOffGroups array + this number\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\n        // The discount decreases with the maturityDate approaching.\\n        // denominated in (10^27)\\n        uint256 discountRate;\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\n        uint256 latestNAV;\\n        uint256 latestDiscount;\\n        uint256 lastNAVUpdate;\\n        // overdue loans are loans which passed the maturity date but are not written-off\\n        uint256 overdueLoans;\\n        // tokenId => latestDiscount\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\n        mapping(uint256 => bytes32) loanToNFT;\\n        // value to view\\n        uint256 totalPrincipalRepaid;\\n        uint256 totalInterestRepaid;\\n        // value to calculate rebase\\n        uint256 seniorDebt;\\n        uint256 seniorBalance;\\n        uint64 lastUpdateSeniorInterest;\\n    }\\n\\n    struct LoanAssetInfo {\\n        uint256[] tokenIds;\\n        uint256[] nonces;\\n        address validator;\\n        bytes validateSignature;\\n    }\\n}\\n\",\"keccak256\":\"0x9f120c072604cfc897319c4ca3816d36a2224127ff6820cc2aeba9ff7c15a0b6\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\",\"keccak256\":\"0x424d80bc2c2826a62e5ffe280363a51408cbdc89d3c0818969b4e7c7cd3fbadd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.10;\\n\\nlibrary UnpackLoanParamtersLib {\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    /**\\n     *\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\n     */\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\n        return uint256(value) / 2 ** amount;\\n    }\\n\\n    /**\\n     * Unpack parameters from packed bytes32 data\\n     */\\n    function _unpackLoanTermsParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters &\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters &\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters &\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n            _bitShiftRight(principalAmountShifted, 152),\\n            _bitShiftRight(interestRateShifted, 128),\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\n        );\\n    }\\n\\n    /**\\n     * Unpack data from hex string which including informations about Loan\\n     */\\n    function unpackParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\n    }\\n}\\n\",\"keccak256\":\"0x2a8c8c03b60f1e569f20ef15c5439074ac43b6824bb143526f08a332447d0f54\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UntangledMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title UntangledMath\\n/// @author Untangled Team\\nlibrary UntangledMath {\\n    uint256 public constant ONE = 10 ** 27;\\n\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(base, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function uncheckedInc(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x471c35004ce52850c41f6835199a7661e19123b7f8509629fa1ed20ab5283d61\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/loan/LoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {ERC165CheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol';\\nimport '../../interfaces/ILoanKernel.sol';\\nimport '../../base/UntangledBase.sol';\\nimport '../../libraries/ConfigHelper.sol';\\nimport '../../libraries/UntangledMath.sol';\\nimport {DataTypes} from '../../libraries/DataTypes.sol';\\nimport {IPool} from '../../interfaces/IPool.sol';\\nimport '../../libraries/TransferHelper.sol';\\n\\n/// @title LoanKernel\\n/// @author Untangled Team\\n/// @notice Upload loan, Repay Loan and conclude loan\\ncontract LoanKernel is ILoanKernel, UntangledBase {\\n    using ConfigHelper for Registry;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    Registry public registry;\\n\\n    function initialize(Registry _registry) public initializer {\\n        __UntangledBase__init_unchained(_msgSender());\\n        registry = _registry;\\n    }\\n\\n    modifier validFillingOrderAddresses(address[] memory _orderAddresses) {\\n        require(\\n            _orderAddresses[uint8(FillingAddressesIndex.SECURITIZATION_POOL)] != address(0x0),\\n            'SECURITIZATION_POOL is zero address.'\\n        );\\n\\n        require(\\n            _orderAddresses[uint8(FillingAddressesIndex.REPAYMENT_ROUTER)] != address(0x0),\\n            'REPAYMENT_ROUTER is zero address.'\\n        );\\n\\n        require(\\n            _orderAddresses[uint8(FillingAddressesIndex.PRINCIPAL_TOKEN_ADDRESS)] != address(0x0),\\n            'PRINCIPAL_TOKEN_ADDRESS is zero address.'\\n        );\\n        _;\\n    }\\n\\n    //******************** */\\n    // PRIVATE FUNCTIONS\\n    //******************** */\\n\\n    /**\\n     * Helper function that constructs a issuance structs from the given\\n     * parameters.\\n     */\\n    function _getIssuance(\\n        address[] memory _orderAddresses,\\n        address[] memory _debtors,\\n        bytes32[] memory _termsContractParameters,\\n        uint256[] memory _salts\\n    ) private pure returns (LoanIssuance memory _issuance) {\\n        LoanIssuance memory issuance = LoanIssuance({\\n            version: _orderAddresses[uint8(FillingAddressesIndex.REPAYMENT_ROUTER)],\\n            debtors: _debtors,\\n            termsContractParameters: _termsContractParameters,\\n            salts: _salts,\\n            agreementIds: _genLoanAgreementIds(\\n                _orderAddresses[uint8(FillingAddressesIndex.REPAYMENT_ROUTER)],\\n                _debtors,\\n                _termsContractParameters,\\n                _salts\\n            )\\n        });\\n\\n        return issuance;\\n    }\\n\\n    function _getDebtOrderHashes(LoanOrder memory debtOrder) private view returns (bytes32[] memory) {\\n        uint256 _length = debtOrder.issuance.debtors.length;\\n        bytes32[] memory orderHashses = new bytes32[](_length);\\n        for (uint256 i = 0; i < _length; i = UntangledMath.uncheckedInc(i)) {\\n            orderHashses[i] = _getDebtOrderHash(\\n                debtOrder.issuance.agreementIds[i],\\n                debtOrder.principalAmounts[i],\\n                debtOrder.principalTokenAddress,\\n                debtOrder.expirationTimestampInSecs[i]\\n            );\\n        }\\n        return orderHashses;\\n    }\\n\\n    function _getLoanOrder(\\n        address[] memory _debtors,\\n        address[] memory _orderAddresses,\\n        uint256[] memory _orderValues,\\n        bytes32[] memory _termContractParameters,\\n        uint256[] memory _salts\\n    ) private view returns (LoanOrder memory _debtOrder) {\\n        bytes32[] memory emptyDebtOrderHashes = new bytes32[](_debtors.length);\\n        LoanOrder memory debtOrder = LoanOrder({\\n            issuance: _getIssuance(_orderAddresses, _debtors, _termContractParameters, _salts),\\n            principalTokenAddress: _orderAddresses[uint8(FillingAddressesIndex.PRINCIPAL_TOKEN_ADDRESS)],\\n            principalAmounts: _principalAmountsFromOrderValues(_orderValues, _termContractParameters.length),\\n            creditorFee: _orderValues[uint8(FillingNumbersIndex.CREDITOR_FEE)],\\n            expirationTimestampInSecs: _expirationTimestampsFromOrderValues(\\n                _orderValues,\\n                _termContractParameters.length\\n            ),\\n            debtOrderHashes: emptyDebtOrderHashes,\\n            riskScores: _riskScoresFromOrderValues(_orderValues, _termContractParameters.length),\\n            assetPurpose: uint8(_orderValues[uint8(FillingNumbersIndex.ASSET_PURPOSE)])\\n        });\\n        debtOrder.debtOrderHashes = _getDebtOrderHashes(debtOrder);\\n        return debtOrder;\\n    }\\n\\n    /**\\n     * 6 is fixed size of constant addresses list\\n     */\\n    function _debtorsFromOrderAddresses(\\n        address[] memory _orderAddresses,\\n        uint256 _length\\n    ) private pure returns (address[] memory) {\\n        address[] memory debtors = new address[](_length);\\n        for (uint256 i = 3; i < (3 + _length); i = UntangledMath.uncheckedInc(i)) {\\n            debtors[i - 3] = _orderAddresses[i];\\n        }\\n        return debtors;\\n    }\\n\\n    // Dettach principal amounts from order values\\n    function _principalAmountsFromOrderValues(\\n        uint256[] memory _orderValues,\\n        uint256 _length\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory principalAmounts = new uint256[](_length);\\n        for (uint256 i = 2; i < (2 + _length); i = UntangledMath.uncheckedInc(i)) {\\n            principalAmounts[i - 2] = _orderValues[i];\\n        }\\n        return principalAmounts;\\n    }\\n\\n    function _expirationTimestampsFromOrderValues(\\n        uint256[] memory _orderValues,\\n        uint256 _length\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory expirationTimestamps = new uint256[](_length);\\n        for (uint256 i = 2 + _length; i < (2 + _length * 2); i = UntangledMath.uncheckedInc(i)) {\\n            expirationTimestamps[i - 2 - _length] = _orderValues[i];\\n        }\\n        return expirationTimestamps;\\n    }\\n\\n    function _saltFromOrderValues(\\n        uint256[] memory _orderValues,\\n        uint256 _length\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory salts = new uint256[](_length);\\n        for (uint256 i = 2 + _length * 2; i < (2 + _length * 3); i = UntangledMath.uncheckedInc(i)) {\\n            salts[i - 2 - _length * 2] = _orderValues[i];\\n        }\\n        return salts;\\n    }\\n\\n    function _riskScoresFromOrderValues(\\n        uint256[] memory _orderValues,\\n        uint256 _length\\n    ) private pure returns (uint8[] memory) {\\n        uint8[] memory riskScores = new uint8[](_length);\\n        for (uint256 i = 2 + _length * 3; i < (2 + _length * 4); i = UntangledMath.uncheckedInc(i)) {\\n            riskScores[i - 2 - _length * 3] = uint8(_orderValues[i]);\\n        }\\n        return riskScores;\\n    }\\n\\n    function _burnLoanAssetToken(bytes32 agreementId) private {\\n        registry.getLoanAssetToken().burn(uint256(agreementId));\\n    }\\n\\n    function _assertDebtExisting(bytes32 agreementId) private view returns (bool) {\\n        return registry.getLoanAssetToken().ownerOf(uint256(agreementId)) != address(0);\\n    }\\n\\n    /// @dev executes the loan repayment by notifying the terms contract about the repayment,\\n    /// transferring the repayment amount to the creditor, and handling additional logic related to securitization pools\\n    /// and completed repayments\\n    function _doRepay(\\n        IPool _pool,\\n        uint256[] memory _nftIds,\\n        address _payer,\\n        uint256[] memory _amount,\\n        address _tokenAddress\\n    ) private returns (bool) {\\n        address beneficiary = address(_pool);\\n        if (registry.getSecuritizationManager().isExistingPools(beneficiary)) beneficiary = _pool.pot();\\n\\n        uint256 totalRepayAmount;\\n        (uint256[] memory repayAmounts, uint256[] memory previousDebts) = _pool.repayLoan(_nftIds, _amount);\\n\\n        for (uint256 i; i < repayAmounts.length; i++) {\\n            uint256 outstandingAmount = _pool.debt(uint256(_nftIds[i]));\\n            // repay all principal and interest\\n            // Burn LAT token when repay completely\\n            if (repayAmounts[i] == previousDebts[i]) {\\n                _concludeLoan(beneficiary, bytes32(_nftIds[i]));\\n            }\\n            totalRepayAmount += repayAmounts[i];\\n            // Log event for repayment\\n            emit AssetRepay(\\n                bytes32(_nftIds[i]),\\n                _payer,\\n                beneficiary,\\n                repayAmounts[i],\\n                outstandingAmount,\\n                _tokenAddress\\n            );\\n        }\\n\\n        TransferHelper.safeTransferFrom(_tokenAddress, _payer, beneficiary, totalRepayAmount);\\n        _pool.increaseTotalAssetRepaidCurrency(totalRepayAmount);\\n\\n        return true;\\n    }\\n\\n    /// @dev A loan, stop lending/loan terms or allow the loan loss\\n    function _concludeLoan(address creditor, bytes32 agreementId) internal {\\n        require(creditor != address(0), 'Invalid creditor account.');\\n        require(agreementId != bytes32(0), 'Invalid agreement id.');\\n\\n        if (!_assertDebtExisting(agreementId)) {\\n            revert('Debt does not exsits');\\n        }\\n\\n        _burnLoanAssetToken(agreementId);\\n    }\\n\\n    function _getDebtOrderHash(\\n        bytes32 agreementId,\\n        uint256 principalAmount,\\n        address principalTokenAddress,\\n        uint256 expirationTimestampInSec\\n    ) private view returns (bytes32 _debtorMessageHash) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    agreementId,\\n                    principalAmount,\\n                    principalTokenAddress,\\n                    expirationTimestampInSec\\n                )\\n            );\\n    }\\n\\n    function _genLoanAgreementIds(\\n        address _version,\\n        address[] memory _debtors,\\n        bytes32[] memory _termsContractParameters,\\n        uint256[] memory _salts\\n    ) private pure returns (bytes32[] memory) {\\n        bytes32[] memory agreementIds = new bytes32[](_salts.length);\\n        for (uint256 i = 0; i < (0 + _salts.length); i = UntangledMath.uncheckedInc(i)) {\\n            agreementIds[i] = keccak256(\\n                abi.encodePacked(_version, _debtors[i], _termsContractParameters[i], _salts[i])\\n            );\\n        }\\n        return agreementIds;\\n    }\\n\\n    /*********************** */\\n    // EXTERNAL FUNCTIONS\\n    /*********************** */\\n\\n    /**\\n     * Filling new Debt Order\\n     * Notice:\\n     * - All Debt Order must to have same:\\n     *   + TermContract\\n     *   + Creditor Fee\\n     *   + Debtor Fee\\n     */\\n    function fillDebtOrder(\\n        FillDebtOrderParam calldata fillDebtOrderParam\\n    ) external whenNotPaused nonReentrant validFillingOrderAddresses(fillDebtOrderParam.orderAddresses) {\\n        address poolAddress = fillDebtOrderParam.orderAddresses[uint8(FillingAddressesIndex.SECURITIZATION_POOL)];\\n        IPool pool = IPool(poolAddress);\\n        require(fillDebtOrderParam.termsContractParameters.length > 0, 'LoanKernel: Invalid Term Contract params');\\n\\n        uint256[] memory salts = _saltFromOrderValues(\\n            fillDebtOrderParam.orderValues,\\n            fillDebtOrderParam.termsContractParameters.length\\n        );\\n        LoanOrder memory debtOrder = _getLoanOrder(\\n            _debtorsFromOrderAddresses(\\n                fillDebtOrderParam.orderAddresses,\\n                fillDebtOrderParam.termsContractParameters.length\\n            ),\\n            fillDebtOrderParam.orderAddresses,\\n            fillDebtOrderParam.orderValues,\\n            fillDebtOrderParam.termsContractParameters,\\n            salts\\n        );\\n\\n        uint x = 0;\\n        uint256 expectedAssetsValue = 0;\\n\\n        // Mint to pool\\n        for (uint i = 0; i < fillDebtOrderParam.latInfo.length; i = UntangledMath.uncheckedInc(i)) {\\n            registry.getLoanAssetToken().safeMint(poolAddress, fillDebtOrderParam.latInfo[i]);\\n            DataTypes.LoanEntry[] memory loans = new DataTypes.LoanEntry[](\\n                fillDebtOrderParam.latInfo[i].tokenIds.length\\n            );\\n\\n            for (uint j = 0; j < fillDebtOrderParam.latInfo[i].tokenIds.length; j = UntangledMath.uncheckedInc(j)) {\\n                require(\\n                    debtOrder.issuance.agreementIds[x] == bytes32(fillDebtOrderParam.latInfo[i].tokenIds[j]),\\n                    'LoanKernel: Invalid LAT Token Id'\\n                );\\n\\n                DataTypes.LoanEntry memory newLoan = DataTypes.LoanEntry({\\n                    debtor: debtOrder.issuance.debtors[x],\\n                    principalTokenAddress: debtOrder.principalTokenAddress,\\n                    termsParam: fillDebtOrderParam.termsContractParameters[x],\\n                    salt: salts[x], //solium-disable-next-line security\\n                    issuanceBlockTimestamp: block.timestamp,\\n                    expirationTimestamp: debtOrder.expirationTimestampInSecs[x],\\n                    assetPurpose: Configuration.ASSET_PURPOSE(debtOrder.assetPurpose),\\n                    riskScore: debtOrder.riskScores[x]\\n                });\\n                loans[j] = newLoan;\\n\\n                x = UntangledMath.uncheckedInc(x);\\n            }\\n\\n            expectedAssetsValue += pool.collectAssets(fillDebtOrderParam.latInfo[i].tokenIds, loans);\\n        }\\n\\n        // Start collect asset checkpoint and withdraw\\n        pool.withdraw(_msgSender(), expectedAssetsValue);\\n\\n        // rebase\\n        pool.rebase();\\n        require(pool.isMinFirstLossValid(), 'LoanKernel: Exceeds MinFirstLoss');\\n    }\\n\\n    /// @inheritdoc ILoanKernel\\n    function repayInBatch(\\n        bytes32[] calldata agreementIds,\\n        uint256[] calldata amounts,\\n        address tokenAddress\\n    ) external override whenNotPaused nonReentrant returns (bool) {\\n        uint256 agreementIdsLength = agreementIds.length;\\n        require(agreementIdsLength == amounts.length, 'LoanRepaymentRouter: Invalid length');\\n        require(tokenAddress != address(0), 'LoanRepaymentRouter: Token address must different with NULL');\\n\\n        uint256[] memory nftIds = new uint256[](agreementIdsLength);\\n\\n        // check all the loans must have the same owner\\n        address poolAddress = registry.getLoanAssetToken().ownerOf(uint256(agreementIds[0]));\\n        IPool pool = IPool(poolAddress);\\n\\n        require(poolAddress != address(0), 'LoanRepaymentRouter: Invalid repayment request');\\n        require(pool.underlyingCurrency() == tokenAddress, 'LoanRepaymentRouter: currency mismatch');\\n\\n        nftIds[0] = uint256(agreementIds[0]);\\n\\n        if (agreementIdsLength > 1) {\\n            for (uint256 i = 1; i < agreementIdsLength; i++) {\\n                nftIds[i] = uint256(agreementIds[i]);\\n                require(\\n                    registry.getLoanAssetToken().ownerOf(nftIds[i]) == poolAddress,\\n                    'LoanRepaymentRouter: Invalid repayment request'\\n                );\\n            }\\n        }\\n\\n        require(\\n            _doRepay(pool, nftIds, _msgSender(), amounts, tokenAddress),\\n            'LoanRepaymentRouter: Repayment has failed'\\n        );\\n\\n        // rebase\\n        pool.rebase();\\n\\n        emit BatchAssetRepay(agreementIds, _msgSender(), amounts, tokenAddress);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe03b22b2802e8cc93a2b78187dcc06e495d39ebf85cceb329f9f706b1148de94\",\"license\":\"AGPL-3.0-only\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {UntangledBase} from '../base/UntangledBase.sol';\\nimport {Configuration} from '../libraries/Configuration.sol';\\n\\n/**\\n * @title Registry\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. These config vars\\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\\n * @author Untangled Team\\n */\\ncontract Registry is UntangledBase {\\n    mapping(uint8 => address) public contractAddresses;\\n\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\n\\n    function initialize() public initializer {\\n        __UntangledBase__init(_msgSender());\\n    }\\n\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\n        contractAddresses[addressIndex] = newAddress;\\n    }\\n\\n    function getAddress(uint8 index) public view returns (address) {\\n        return contractAddresses[index];\\n    }\\n\\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\n    }\\n\\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\n    }\\n\\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\n    }\\n\\n    function setTokenGenerationEventFactory(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\\n    }\\n\\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\n    }\\n\\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\n    }\\n\\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\n    }\\n\\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\\n    }\\n\\n    function setNoteTokenVault(address newAddress) public onlyAdmin whenNotPaused {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT), newAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8eece64e7fab25c8a18ce9b9bfea5023addb6dd55d1dd88c444099a43f0f7\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/LATValidator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {EIP712Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\\nimport {ECDSAUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\nimport {SignatureCheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol';\\nimport {ERC165CheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol';\\nimport {IPool} from '../../interfaces/IPool.sol';\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\nimport {IERC5008} from '../../interfaces/IERC5008.sol';\\nimport {DataTypes} from '../../libraries/DataTypes.sol';\\n\\nabstract contract LATValidator is IERC5008, EIP712Upgradeable {\\n    using SignatureCheckerUpgradeable for address;\\n    using ECDSAUpgradeable for bytes32;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    bytes32 internal constant LAT_TYPEHASH =\\n        keccak256('LoanAssetToken(uint256[] tokenIds,uint256[] nonces,address validator)');\\n\\n    mapping(uint256 => uint256) internal _nonces;\\n\\n    modifier validateCreditor(address creditor, DataTypes.LoanAssetInfo calldata info) {\\n        if (IPool(creditor).validatorRequired()) {\\n            _checkNonceValid(info);\\n\\n            require(_checkValidator(info), 'LATValidator: invalid validator signature');\\n            require(isValidator(creditor, info.validator), 'LATValidator: invalid validator');\\n        }\\n        _;\\n    }\\n\\n    modifier requireValidator(DataTypes.LoanAssetInfo calldata info) {\\n        require(_checkValidator(info), 'LATValidator: invalid validator signature');\\n        _;\\n    }\\n\\n    modifier requireNonceValid(DataTypes.LoanAssetInfo calldata info) {\\n        _checkNonceValid(info);\\n        _;\\n    }\\n\\n    function _checkNonceValid(DataTypes.LoanAssetInfo calldata info) internal {\\n        for (uint256 i = 0; i < info.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\n            require(_nonces[info.tokenIds[i]] == info.nonces[i], 'LATValidator: invalid nonce');\\n            unchecked {\\n                _nonces[info.tokenIds[i]] = _nonces[info.tokenIds[i]] + 1;\\n            }\\n\\n            emit NonceChanged(info.tokenIds[i], _nonces[info.tokenIds[i]]);\\n        }\\n    }\\n\\n    function __LATValidator_init() internal onlyInitializing {\\n        __EIP712_init_unchained('UntangledLoanAssetToken', '0.0.1');\\n        __LATValidator_init_unchained();\\n    }\\n\\n    function __LATValidator_init_unchained() internal onlyInitializing {}\\n\\n    function isValidator(address pool, address sender) public view virtual returns (bool);\\n\\n    function nonce(uint256 tokenId) external view override returns (uint256) {\\n        return _nonces[tokenId];\\n    }\\n\\n    function _checkValidator(DataTypes.LoanAssetInfo calldata latInfo) internal view returns (bool) {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LAT_TYPEHASH,\\n                    keccak256(abi.encodePacked(latInfo.tokenIds)),\\n                    keccak256(abi.encodePacked(latInfo.nonces)),\\n                    latInfo.validator\\n                )\\n            )\\n        );\\n\\n        return latInfo.validator.isValidSignatureNow(digest, latInfo.validateSignature);\\n    }\\n\\n    function domainSeparatorV4() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45a750220488867dd25e6596bf63bca0d48e8a0710e3460a78e128e3831c229b\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/LoanAssetToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport {UntangledERC721} from './UntangledERC721.sol';\\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\\nimport {LATValidator} from './LATValidator.sol';\\nimport {Registry} from '../../storage/Registry.sol';\\nimport {DataTypes, VALIDATOR_ROLE} from '../../libraries/DataTypes.sol';\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\n\\n/**\\n * LoanAssetToken: The representative for ownership of a Loan\\n */\\ncontract LoanAssetToken is UntangledERC721, LATValidator {\\n    using ConfigHelper for Registry;\\n\\n    /** CONSTRUCTOR */\\n    function initialize(\\n        Registry _registry,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) public initializer {\\n        __UntangledERC721__init(name, symbol, baseTokenURI);\\n        __LATValidator_init();\\n\\n        registry = _registry;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        require(\\n            address(registry.getSecuritizationManager()) != address(0x0),\\n            'SECURITIZATION_MANAGER is zero address.'\\n        );\\n\\n        require(address(registry.getLoanKernel()) != address(0x0), 'LOAN_KERNEL is zero address.');\\n\\n        _setupRole(MINTER_ROLE, address(registry.getLoanKernel()));\\n        _revokeRole(MINTER_ROLE, _msgSender());\\n    }\\n\\n    function safeMint(\\n        address creditor,\\n        DataTypes.LoanAssetInfo calldata latInfo\\n    ) public onlyRole(MINTER_ROLE) validateCreditor(creditor, latInfo) {\\n        for (uint i = 0; i < latInfo.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\n            _safeMint(creditor, latInfo.tokenIds[i]);\\n        }\\n    }\\n\\n    function isValidator(address pool, address sender) public view virtual override returns (bool) {\\n        return IAccessControlUpgradeable(pool).hasRole(VALIDATOR_ROLE, sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbacf3bc8185b0702e7a34c18d4ef304391fa0d444b434ebcddda9d9a2e895a16\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/UntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '../../storage/Registry.sol';\\n\\nabstract contract UntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\\n    Registry public registry;\\n\\n    string private _baseTokenURI;\\n\\n    function __UntangledERC721__init(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __UntangledERC721__init_unchained(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function setBaseURI(string memory baseTokenURI) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        Strings.toHexString(tokenId),\\n                        '?chain_id=',\\n                        Strings.toString(block.chainid)\\n                    )\\n                )\\n                : '';\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x3b38ea720bbeaf4ffcebf9a71522a8d04713045910f1bd19c94d5b40b1388aeb\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639010d07c116100ad578063b6db75a011610071578063b6db75a01461024d578063c4d66de814610255578063ca15c87314610268578063d547741f1461027b578063fc7429621461028e57600080fd5b80639010d07c14610201578063915512651461021457806391d1485414610227578063a217fddf1461023a578063b3c650151461024257600080fd5b806336568abe116100f457806336568abe146101a75780633f4ba83a146101ba5780635c975abb146101c25780637b103999146101cd5780638456cb59146101f957600080fd5b806301ffc9a7146101265780631e4e00911461014e578063248a9ca3146101635780632f2ff15d14610194575b600080fd5b610139610134366004612dd3565b6102a1565b60405190151581526020015b60405180910390f35b61016161015c366004612dfd565b6102cc565b005b610186610171366004612e1f565b600090815260c9602052604090206001015490565b604051908152602001610145565b6101616101a2366004612e4d565b6102e6565b6101616101b5366004612e4d565b61030b565b61016161038e565b60335460ff16610139565b61015f546101e1906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b6101616103bc565b6101e161020f366004612dfd565b6103e8565b610161610222366004612e7d565b610407565b610139610235366004612e4d565b610e15565b610186600081565b60005460ff16610186565b610139610e40565b610161610263366004612eb7565b610e82565b610186610276366004612e1f565b610fb0565b610161610289366004612e4d565b610fc7565b61013961029c366004612f1f565b610fec565b60006001600160e01b03198216635a05180f60e01b14806102c657506102c682611572565b92915050565b60006102d7816115a7565b6102e183836115b1565b505050565b600082815260c96020526040902060010154610301816115a7565b6102e183836115fc565b6001600160a01b03811633146103805760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61038a828261161e565b5050565b610396610e40565b6103b25760405162461bcd60e51b815260040161037790612fa2565b6103ba611640565b565b6103c4610e40565b6103e05760405162461bcd60e51b815260040161037790612fa2565b6103ba611692565b600082815260fb6020526040812061040090836116cf565b9392505050565b61040f6116db565b610417611721565b6104218180612fff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525084519093508492508391506104655761046561305e565b60200260200101516001600160a01b0316036104cf5760405162461bcd60e51b8152602060048201526024808201527f53454355524954495a4154494f4e5f504f4f4c206973207a65726f206164647260448201526332b9b99760e11b6064820152608401610377565b600081600260ff16815181106104e7576104e761305e565b60200260200101516001600160a01b03160361054f5760405162461bcd60e51b815260206004820152602160248201527f52455041594d454e545f524f55544552206973207a65726f20616464726573736044820152601760f91b6064820152608401610377565b600081600160ff16815181106105675761056761305e565b60200260200101516001600160a01b0316036105d65760405162461bcd60e51b815260206004820152602860248201527f5052494e434950414c5f544f4b454e5f41444452455353206973207a65726f2060448201526730b2323932b9b99760c11b6064820152608401610377565b60006105e28380612fff565b6000816105f1576105f161305e565b90506020020160208101906106069190612eb7565b90508060006106186040860186612fff565b9050116106785760405162461bcd60e51b815260206004820152602860248201527f4c6f616e4b65726e656c3a20496e76616c6964205465726d20436f6e747261636044820152677420706172616d7360c01b6064820152608401610377565b60006106d061068a6020870187612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106c9925050506040880188612fff565b905061177a565b905060006107eb61072a6106e48880612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107239250505060408a018a612fff565b9050611862565b6107348880612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107739250505060208a018a612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107b29250505060408b018b612fff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611918915050565b905060008060005b61080060608a018a612fff565b9050811015610c8f5761015f5461081f906001600160a01b0316611a4a565b6001600160a01b031663f0cb1d868861083b60608d018d612fff565b8581811061084b5761084b61305e565b905060200281019061085d9190613074565b6040518363ffffffff1660e01b815260040161087a929190613137565b600060405180830381600087803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b50600092506108bd91505060608b018b612fff565b838181106108cd576108cd61305e565b90506020028101906108df9190613074565b6108e99080612fff565b90506001600160401b0381111561090257610902613217565b60405190808252806020026020018201604052801561097857816020015b6109656040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b8152602001906001900390816109205790505b50905060005b61098b60608c018c612fff565b8481811061099b5761099b61305e565b90506020028101906109ad9190613074565b6109b79080612fff565b9050811015610bcf576109cd60608c018c612fff565b848181106109dd576109dd61305e565b90506020028101906109ef9190613074565b6109f99080612fff565b82818110610a0957610a0961305e565b9050602002013560001b8660000151606001518681518110610a2d57610a2d61305e565b602002602001015114610a825760405162461bcd60e51b815260206004820181905260248201527f4c6f616e4b65726e656c3a20496e76616c6964204c415420546f6b656e2049646044820152606401610377565b60006040518061010001604052808860000151602001518881518110610aaa57610aaa61305e565b60200260200101516001600160a01b0316815260200188602001516001600160a01b031681526020018d8060400190610ae39190612fff565b89818110610af357610af361305e565b905060200201358152602001898881518110610b1157610b1161305e565b6020026020010151815260200142815260200188608001518881518110610b3a57610b3a61305e565b602002602001015181526020018860c001518881518110610b5d57610b5d61305e565b602002602001015160ff1681526020018860e0015160ff166001811115610b8657610b86613048565b6001811115610b9757610b97613048565b815250905080838381518110610baf57610baf61305e565b6020026020010181905250610bc48660010190565b95505060010161097e565b506001600160a01b0387166333944357610bec60608d018d612fff565b85818110610bfc57610bfc61305e565b9050602002810190610c0e9190613074565b610c189080612fff565b846040518463ffffffff1660e01b8152600401610c379392919061324f565b6020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a919061330b565b610c84908461333a565b9250506001016107f3565b506001600160a01b03851663f3fef3a3336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b50505050846001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b50505050846001600160a01b03166349110ac46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db5919061334d565b610e015760405162461bcd60e51b815260206004820181905260248201527f4c6f616e4b65726e656c3a2045786365656473204d696e46697273744c6f73736044820152606401610377565b50505050505050610e126001606555565b50565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610e6c7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e33610e15565b80610e7d5750610e7d600033610e15565b905090565b600054610100900460ff1615808015610ea25750600054600160ff909116105b80610ebc5750303b158015610ebc575060005460ff166001145b610f1f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610377565b6000805460ff191660011790558015610f42576000805461ff0019166101001790555b610f4b33611a57565b61015f80546001600160a01b0319166001600160a01b038416179055801561038a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600081815260fb602052604081206102c690611b9c565b600082815260c96020526040902060010154610fe2816115a7565b6102e1838361161e565b6000610ff66116db565b610ffe611721565b8483811461105a5760405162461bcd60e51b815260206004820152602360248201527f4c6f616e52657061796d656e74526f757465723a20496e76616c6964206c656e6044820152620cee8d60eb1b6064820152608401610377565b6001600160a01b0383166110d65760405162461bcd60e51b815260206004820152603b60248201527f4c6f616e52657061796d656e74526f757465723a20546f6b656e20616464726560448201527f7373206d75737420646966666572656e742077697468204e554c4c00000000006064820152608401610377565b6000816001600160401b038111156110f0576110f0613217565b604051908082528060200260200182016040528015611119578160200160208202803683370190505b5061015f54909150600090611136906001600160a01b0316611a4a565b6001600160a01b0316636352211e8a8a60008181106111575761115761305e565b9050602002013560001c6040518263ffffffff1660e01b815260040161117f91815260200190565b602060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061336f565b9050806001600160a01b0381166111e95760405162461bcd60e51b81526004016103779061338c565b856001600160a01b0316816001600160a01b0316630bc6bffc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611255919061336f565b6001600160a01b0316146112ba5760405162461bcd60e51b815260206004820152602660248201527f4c6f616e52657061796d656e74526f757465723a2063757272656e6379206d696044820152650e6dac2e8c6d60d31b6064820152608401610377565b898960008181106112cd576112cd61305e565b9050602002013560001c836000815181106112ea576112ea61305e565b602002602001018181525050600184111561141e5760015b8481101561141c578a8a8281811061131c5761131c61305e565b9050602002013560001c8482815181106113385761133861305e565b602090810291909101015261015f546001600160a01b038085169161135d9116611a4a565b6001600160a01b0316636352211e86848151811061137d5761137d61305e565b60200260200101516040518263ffffffff1660e01b81526004016113a391815260200190565b602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e4919061336f565b6001600160a01b03161461140a5760405162461bcd60e51b81526004016103779061338c565b80611414816133da565b915050611302565b505b61145f8184338b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d9250611ba6915050565b6114bd5760405162461bcd60e51b815260206004820152602960248201527f4c6f616e52657061796d656e74526f757465723a2052657061796d656e742068604482015268185cc819985a5b195960ba1b6064820152608401610377565b806001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505050507fc3ddefdb4c5801635c554e9856ef97808797e9d19731e8c3079133775d81e8dd8a8a61153a3390565b8b8b8b60405161154f969594939291906133f3565b60405180910390a160019450505050506115696001606555565b95945050505050565b60006001600160e01b03198216637965db0b60e01b14806102c657506301ffc9a760e01b6001600160e01b03198316146102c6565b610e128133611f5c565b600082815260c96020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6116068282611fb5565b600082815260fb602052604090206102e1908261203b565b6116288282612050565b600082815260fb602052604090206102e190826120b7565b6116486120cc565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61169a6116db565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116753390565b60006104008383612115565b60335460ff16156103ba5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610377565b6002606554036117735760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610377565b6002606555565b60606000826001600160401b0381111561179657611796613217565b6040519080825280602002602001820160405280156117bf578160200160208202803683370190505b50905060006117cf846002613441565b6117da90600261333a565b90505b6117e8846003613441565b6117f390600261333a565b81101561185a5784818151811061180c5761180c61305e565b6020026020010151828560026118229190613441565b61182d600285613458565b6118379190613458565b815181106118475761184761305e565b60209081029190910101526001016117dd565b509392505050565b60606000826001600160401b0381111561187e5761187e613217565b6040519080825280602002602001820160405280156118a7578160200160208202803683370190505b50905060035b6118b884600361333a565b81101561185a578481815181106118d1576118d161305e565b6020026020010151826003836118e79190613458565b815181106118f7576118f761305e565b6001600160a01b0392909216602092830291909101909101526001016118ad565b611920612d44565b600086516001600160401b0381111561193b5761193b613217565b604051908082528060200260200182016040528015611964578160200160208202803683370190505b5090506000604051806101000160405280611981898b898961213f565b815260200188600160ff168151811061199c5761199c61305e565b60200260200101516001600160a01b031681526020016119bd8888516121da565b815260200187600060ff16815181106119d8576119d861305e565b602002602001015181526020016119f0888851612282565b8152602001838152602001611a0688885161234d565b815260200187600160ff1681518110611a2157611a2161305e565b602002602001015160ff168152509050611a3a81612435565b60a0820152979650505050505050565b60006102c682600561257d565b600054610100900460ff16611ac25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610377565b6001600160a01b038116611ad35750335b611ade600033612602565b611b087fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e82612602565b611b527f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6115b1565b610e127f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989267f3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d76115b1565b60006102c6825490565b61015f546000908690611bc1906001600160a01b031661260c565b604051633444c16360e21b81526001600160a01b038381166004830152919091169063d113058c90602401602060405180830381865afa158015611c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2d919061334d565b15611c9757866001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c94919061336f565b90505b6000806000896001600160a01b031663586fd8a18a896040518363ffffffff1660e01b8152600401611cca9291906134a6565b6000604051808303816000875af1158015611ce9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d11919081019061355a565b9150915060005b8251811015611ee55760008b6001600160a01b0316631e0029c88c8481518110611d4457611d4461305e565b60200260200101516040518263ffffffff1660e01b8152600401611d6a91815260200190565b602060405180830381865afa158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab919061330b565b9050828281518110611dbf57611dbf61305e565b6020026020010151848381518110611dd957611dd961305e565b602002602001015103611e0c57611e0c868c8481518110611dfc57611dfc61305e565b602002602001015160001b612619565b838281518110611e1e57611e1e61305e565b602002602001015185611e31919061333a565b9450856001600160a01b03168a6001600160a01b03168c8481518110611e5957611e5961305e565b602002602001015160001b7f9da9a6c51638610f182a89c69d6ab25dad9cf802834bac5a309dcafa2557265f878681518110611e9757611e9761305e565b6020026020010151858d604051611eca9392919092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a45080611edd816133da565b915050611d18565b50611ef286898686612709565b604051639016170560e01b8152600481018490526001600160a01b038b1690639016170590602401600060405180830381600087803b158015611f3457600080fd5b505af1158015611f48573d6000803e3d6000fd5b5060019d9c50505050505050505050505050565b611f668282610e15565b61038a57611f7381612813565b611f7e836020612825565b604051602001611f8f9291906135e1565b60408051601f198184030181529082905262461bcd60e51b825261037791600401613656565b611fbf8282610e15565b61038a57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ff73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610400836001600160a01b0384166129c0565b61205a8282610e15565b1561038a57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610400836001600160a01b038416612a0f565b60335460ff166103ba5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610377565b600082600001828154811061212c5761212c61305e565b9060005260206000200154905092915050565b612147612d9b565b6040805160a081019091526000908087600260ff168151811061216c5761216c61305e565b60200260200101516001600160a01b031681526020018681526020018581526020016121c7886002808111156121a4576121a4613048565b60ff16815181106121b7576121b761305e565b6020026020010151888888612b02565b8152602001849052915050949350505050565b60606000826001600160401b038111156121f6576121f6613217565b60405190808252806020026020018201604052801561221f578160200160208202803683370190505b50905060025b61223084600261333a565b81101561185a578481815181106122495761224961305e565b60200260200101518260028361225f9190613458565b8151811061226f5761226f61305e565b6020908102919091010152600101612225565b60606000826001600160401b0381111561229e5761229e613217565b6040519080825280602002602001820160405280156122c7578160200160208202803683370190505b50905060006122d784600261333a565b90505b6122e5846002613441565b6122f090600261333a565b81101561185a578481815181106123095761230961305e565b602002602001015182856002846123209190613458565b61232a9190613458565b8151811061233a5761233a61305e565b60209081029190910101526001016122da565b60606000826001600160401b0381111561236957612369613217565b604051908082528060200260200182016040528015612392578160200160208202803683370190505b50905060006123a2846003613441565b6123ad90600261333a565b90505b6123bb846004613441565b6123c690600261333a565b81101561185a578481815181106123df576123df61305e565b6020026020010151828560036123f59190613441565b612400600285613458565b61240a9190613458565b8151811061241a5761241a61305e565b60ff92909216602092830291909101909101526001016123b0565b805160200151516060906000816001600160401b0381111561245957612459613217565b604051908082528060200260200182016040528015612482578160200160208202803683370190505b50905060005b8281101561185a5761255885600001516060015182815181106124ad576124ad61305e565b6020026020010151866040015183815181106124cb576124cb61305e565b60200260200101518760200151886080015185815181106124ee576124ee61305e565b60200260200101516040516bffffffffffffffffffffffff1930606090811b82166020840152603483018790526054830186905284901b1660748201526088810182905260009060a801604051602081830303815290604052805190602001209050949350505050565b82828151811061256a5761256a61305e565b6020908102919091010152600101612488565b6000826001600160a01b031663bcaa0c558360098111156125a0576125a0613048565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa1580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061336f565b61038a82826115fc565b60006102c682600061257d565b6001600160a01b03821661266f5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206372656469746f72206163636f756e742e000000000000006044820152606401610377565b806126b45760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21030b3b932b2b6b2b73a1034b21760591b6044820152606401610377565b6126bd81612c38565b6127005760405162461bcd60e51b81526020600482015260146024820152734465627420646f6573206e6f742065787369747360601b6044820152606401610377565b61038a81612ccf565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161276d9190613689565b6000604051808303816000865af19150503d80600081146127aa576040519150601f19603f3d011682016040523d82523d6000602084013e6127af565b606091505b50915091508180156127d95750805115806127d95750808060200190518101906127d9919061334d565b61280b5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606401610377565b505050505050565b60606102c66001600160a01b03831660145b60606000612834836002613441565b61283f90600261333a565b6001600160401b0381111561285657612856613217565b6040519080825280601f01601f191660200182016040528015612880576020820181803683370190505b509050600360fc1b8160008151811061289b5761289b61305e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ca576128ca61305e565b60200101906001600160f81b031916908160001a90535060006128ee846002613441565b6128f990600161333a565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061292d5761292d61305e565b1a60f81b8282815181106129435761294361305e565b60200101906001600160f81b031916908160001a90535060049490941c9361296a8161369b565b90506128fc565b5083156104005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610377565b6000818152600183016020526040812054612a07575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102c6565b5060006102c6565b60008181526001830160205260408120548015612af8576000612a33600183613458565b8554909150600090612a4790600190613458565b9050818114612aac576000866000018281548110612a6757612a6761305e565b9060005260206000200154905080876000018481548110612a8a57612a8a61305e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612abd57612abd6136b2565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102c6565b60009150506102c6565b6060600082516001600160401b03811115612b1f57612b1f613217565b604051908082528060200260200182016040528015612b48578160200160208202803683370190505b50905060005b8351612b5b90600061333a565b811015612c2e5786868281518110612b7557612b7561305e565b6020026020010151868381518110612b8f57612b8f61305e565b6020026020010151868481518110612ba957612ba961305e565b6020026020010151604051602001612bf39493929190606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60405160208183030381529060405280519060200120828281518110612c1b57612c1b61305e565b6020908102919091010152600101612b4e565b5095945050505050565b61015f546000908190612c53906001600160a01b0316611a4a565b6040516331a9108f60e11b8152600481018590526001600160a01b039190911690636352211e90602401602060405180830381865afa158015612c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbe919061336f565b6001600160a01b0316141592915050565b61015f54612ce5906001600160a01b0316611a4a565b604051630852cd8d60e31b8152600481018390526001600160a01b0391909116906342966c6890602401600060405180830381600087803b158015612d2957600080fd5b505af1158015612d3d573d6000803e3d6000fd5b5050505050565b604051806101000160405280612d58612d9b565b815260200160006001600160a01b031681526020016060815260200160008152602001606081526020016060815260200160608152602001600060ff1681525090565b6040518060a0016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b600060208284031215612de557600080fd5b81356001600160e01b03198116811461040057600080fd5b60008060408385031215612e1057600080fd5b50508035926020909101359150565b600060208284031215612e3157600080fd5b5035919050565b6001600160a01b0381168114610e1257600080fd5b60008060408385031215612e6057600080fd5b823591506020830135612e7281612e38565b809150509250929050565b600060208284031215612e8f57600080fd5b81356001600160401b03811115612ea557600080fd5b82016080818503121561040057600080fd5b600060208284031215612ec957600080fd5b813561040081612e38565b60008083601f840112612ee657600080fd5b5081356001600160401b03811115612efd57600080fd5b6020830191508360208260051b8501011115612f1857600080fd5b9250929050565b600080600080600060608688031215612f3757600080fd5b85356001600160401b0380821115612f4e57600080fd5b612f5a89838a01612ed4565b90975095506020880135915080821115612f7357600080fd5b50612f8088828901612ed4565b9094509250506040860135612f9481612e38565b809150509295509295909350565b6020808252603a908201527f556e74616e676c6564426173653a204d75737420686176652061646d696e207260408201527f6f6c6520746f20706572666f726d207468697320616374696f6e000000000000606082015260800190565b6000808335601e1984360301811261301657600080fd5b8301803591506001600160401b0382111561303057600080fd5b6020019150600581901b3603821315612f1857600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e1983360301811261308a57600080fd5b9190910192915050565b6000808335601e198436030181126130ab57600080fd5b83016020810192503590506001600160401b038111156130ca57600080fd5b8060051b3603821315612f1857600080fd5b81835260006001600160fb1b038311156130f557600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038381168252604060208301526000906131588480613094565b6080604086015261316d60c0860182846130dc565b91505061317d6020860186613094565b603f19808785030160608801526131958483856130dc565b9350604088013592506131a783612e38565b938216608087015260608701359336889003601e190185126131c857600080fd5b6020948801948501943592506001600160401b038311156131e857600080fd5b8236038513156131f757600080fd5b8684030160a08701525061320c82828561310e565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6002811061324b57634e487b7160e01b600052602160045260246000fd5b9052565b6000604080835261326381840186886130dc565b83810360208581019190915285518083528682019282019060005b818110156132fc57845180516001600160a01b0390811685528582015116858501528681015187850152606080820151908501526080808201519085015260a0808201519085015260c08082015160ff169085015260e090810151906132e68186018361322d565b505093830193610100929092019160010161327e565b50909998505050505050505050565b60006020828403121561331d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156102c6576102c6613324565b60006020828403121561335f57600080fd5b8151801515811461040057600080fd5b60006020828403121561338157600080fd5b815161040081612e38565b6020808252602e908201527f4c6f616e52657061796d656e74526f757465723a20496e76616c69642072657060408201526d185e5b595b9d081c995c5d595cdd60921b606082015260800190565b6000600182016133ec576133ec613324565b5060010190565b60808152600061340760808301888a6130dc565b6001600160a01b038781166020850152838203604085015261342a8287896130dc565b925080851660608501525050979650505050505050565b80820281158282048414176102c6576102c6613324565b818103818111156102c6576102c6613324565b600081518084526020808501945080840160005b8381101561349b5781518752958201959082019060010161347f565b509495945050505050565b6040815260006134b9604083018561346b565b8281036020840152611569818561346b565b600082601f8301126134dc57600080fd5b815160206001600160401b03808311156134f8576134f8613217565b8260051b604051601f19603f8301168101818110848211171561351d5761351d613217565b60405293845285810183019383810192508785111561353b57600080fd5b83870191505b8482101561320c57815183529183019190830190613541565b6000806040838503121561356d57600080fd5b82516001600160401b038082111561358457600080fd5b613590868387016134cb565b935060208501519150808211156135a657600080fd5b506135b3858286016134cb565b9150509250929050565b60005b838110156135d85781810151838201526020016135c0565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136198160178501602088016135bd565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161364a8160288401602088016135bd565b01602801949350505050565b60208152600082518060208401526136758160408501602087016135bd565b601f01601f19169190910160400192915050565b6000825161308a8184602087016135bd565b6000816136aa576136aa613324565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208bdce72464d2f42dd1ade7aeab54681127323e21c3409ba5a6eb58a768e6179a64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80639010d07c116100ad578063b6db75a011610071578063b6db75a01461024d578063c4d66de814610255578063ca15c87314610268578063d547741f1461027b578063fc7429621461028e57600080fd5b80639010d07c14610201578063915512651461021457806391d1485414610227578063a217fddf1461023a578063b3c650151461024257600080fd5b806336568abe116100f457806336568abe146101a75780633f4ba83a146101ba5780635c975abb146101c25780637b103999146101cd5780638456cb59146101f957600080fd5b806301ffc9a7146101265780631e4e00911461014e578063248a9ca3146101635780632f2ff15d14610194575b600080fd5b610139610134366004612dd3565b6102a1565b60405190151581526020015b60405180910390f35b61016161015c366004612dfd565b6102cc565b005b610186610171366004612e1f565b600090815260c9602052604090206001015490565b604051908152602001610145565b6101616101a2366004612e4d565b6102e6565b6101616101b5366004612e4d565b61030b565b61016161038e565b60335460ff16610139565b61015f546101e1906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b6101616103bc565b6101e161020f366004612dfd565b6103e8565b610161610222366004612e7d565b610407565b610139610235366004612e4d565b610e15565b610186600081565b60005460ff16610186565b610139610e40565b610161610263366004612eb7565b610e82565b610186610276366004612e1f565b610fb0565b610161610289366004612e4d565b610fc7565b61013961029c366004612f1f565b610fec565b60006001600160e01b03198216635a05180f60e01b14806102c657506102c682611572565b92915050565b60006102d7816115a7565b6102e183836115b1565b505050565b600082815260c96020526040902060010154610301816115a7565b6102e183836115fc565b6001600160a01b03811633146103805760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61038a828261161e565b5050565b610396610e40565b6103b25760405162461bcd60e51b815260040161037790612fa2565b6103ba611640565b565b6103c4610e40565b6103e05760405162461bcd60e51b815260040161037790612fa2565b6103ba611692565b600082815260fb6020526040812061040090836116cf565b9392505050565b61040f6116db565b610417611721565b6104218180612fff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525084519093508492508391506104655761046561305e565b60200260200101516001600160a01b0316036104cf5760405162461bcd60e51b8152602060048201526024808201527f53454355524954495a4154494f4e5f504f4f4c206973207a65726f206164647260448201526332b9b99760e11b6064820152608401610377565b600081600260ff16815181106104e7576104e761305e565b60200260200101516001600160a01b03160361054f5760405162461bcd60e51b815260206004820152602160248201527f52455041594d454e545f524f55544552206973207a65726f20616464726573736044820152601760f91b6064820152608401610377565b600081600160ff16815181106105675761056761305e565b60200260200101516001600160a01b0316036105d65760405162461bcd60e51b815260206004820152602860248201527f5052494e434950414c5f544f4b454e5f41444452455353206973207a65726f2060448201526730b2323932b9b99760c11b6064820152608401610377565b60006105e28380612fff565b6000816105f1576105f161305e565b90506020020160208101906106069190612eb7565b90508060006106186040860186612fff565b9050116106785760405162461bcd60e51b815260206004820152602860248201527f4c6f616e4b65726e656c3a20496e76616c6964205465726d20436f6e747261636044820152677420706172616d7360c01b6064820152608401610377565b60006106d061068a6020870187612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106c9925050506040880188612fff565b905061177a565b905060006107eb61072a6106e48880612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107239250505060408a018a612fff565b9050611862565b6107348880612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107739250505060208a018a612fff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506107b29250505060408b018b612fff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611918915050565b905060008060005b61080060608a018a612fff565b9050811015610c8f5761015f5461081f906001600160a01b0316611a4a565b6001600160a01b031663f0cb1d868861083b60608d018d612fff565b8581811061084b5761084b61305e565b905060200281019061085d9190613074565b6040518363ffffffff1660e01b815260040161087a929190613137565b600060405180830381600087803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b50600092506108bd91505060608b018b612fff565b838181106108cd576108cd61305e565b90506020028101906108df9190613074565b6108e99080612fff565b90506001600160401b0381111561090257610902613217565b60405190808252806020026020018201604052801561097857816020015b6109656040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b8152602001906001900390816109205790505b50905060005b61098b60608c018c612fff565b8481811061099b5761099b61305e565b90506020028101906109ad9190613074565b6109b79080612fff565b9050811015610bcf576109cd60608c018c612fff565b848181106109dd576109dd61305e565b90506020028101906109ef9190613074565b6109f99080612fff565b82818110610a0957610a0961305e565b9050602002013560001b8660000151606001518681518110610a2d57610a2d61305e565b602002602001015114610a825760405162461bcd60e51b815260206004820181905260248201527f4c6f616e4b65726e656c3a20496e76616c6964204c415420546f6b656e2049646044820152606401610377565b60006040518061010001604052808860000151602001518881518110610aaa57610aaa61305e565b60200260200101516001600160a01b0316815260200188602001516001600160a01b031681526020018d8060400190610ae39190612fff565b89818110610af357610af361305e565b905060200201358152602001898881518110610b1157610b1161305e565b6020026020010151815260200142815260200188608001518881518110610b3a57610b3a61305e565b602002602001015181526020018860c001518881518110610b5d57610b5d61305e565b602002602001015160ff1681526020018860e0015160ff166001811115610b8657610b86613048565b6001811115610b9757610b97613048565b815250905080838381518110610baf57610baf61305e565b6020026020010181905250610bc48660010190565b95505060010161097e565b506001600160a01b0387166333944357610bec60608d018d612fff565b85818110610bfc57610bfc61305e565b9050602002810190610c0e9190613074565b610c189080612fff565b846040518463ffffffff1660e01b8152600401610c379392919061324f565b6020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a919061330b565b610c84908461333a565b9250506001016107f3565b506001600160a01b03851663f3fef3a3336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b50505050846001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b50505050846001600160a01b03166349110ac46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db5919061334d565b610e015760405162461bcd60e51b815260206004820181905260248201527f4c6f616e4b65726e656c3a2045786365656473204d696e46697273744c6f73736044820152606401610377565b50505050505050610e126001606555565b50565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610e6c7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e33610e15565b80610e7d5750610e7d600033610e15565b905090565b600054610100900460ff1615808015610ea25750600054600160ff909116105b80610ebc5750303b158015610ebc575060005460ff166001145b610f1f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610377565b6000805460ff191660011790558015610f42576000805461ff0019166101001790555b610f4b33611a57565b61015f80546001600160a01b0319166001600160a01b038416179055801561038a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600081815260fb602052604081206102c690611b9c565b600082815260c96020526040902060010154610fe2816115a7565b6102e1838361161e565b6000610ff66116db565b610ffe611721565b8483811461105a5760405162461bcd60e51b815260206004820152602360248201527f4c6f616e52657061796d656e74526f757465723a20496e76616c6964206c656e6044820152620cee8d60eb1b6064820152608401610377565b6001600160a01b0383166110d65760405162461bcd60e51b815260206004820152603b60248201527f4c6f616e52657061796d656e74526f757465723a20546f6b656e20616464726560448201527f7373206d75737420646966666572656e742077697468204e554c4c00000000006064820152608401610377565b6000816001600160401b038111156110f0576110f0613217565b604051908082528060200260200182016040528015611119578160200160208202803683370190505b5061015f54909150600090611136906001600160a01b0316611a4a565b6001600160a01b0316636352211e8a8a60008181106111575761115761305e565b9050602002013560001c6040518263ffffffff1660e01b815260040161117f91815260200190565b602060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061336f565b9050806001600160a01b0381166111e95760405162461bcd60e51b81526004016103779061338c565b856001600160a01b0316816001600160a01b0316630bc6bffc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611255919061336f565b6001600160a01b0316146112ba5760405162461bcd60e51b815260206004820152602660248201527f4c6f616e52657061796d656e74526f757465723a2063757272656e6379206d696044820152650e6dac2e8c6d60d31b6064820152608401610377565b898960008181106112cd576112cd61305e565b9050602002013560001c836000815181106112ea576112ea61305e565b602002602001018181525050600184111561141e5760015b8481101561141c578a8a8281811061131c5761131c61305e565b9050602002013560001c8482815181106113385761133861305e565b602090810291909101015261015f546001600160a01b038085169161135d9116611a4a565b6001600160a01b0316636352211e86848151811061137d5761137d61305e565b60200260200101516040518263ffffffff1660e01b81526004016113a391815260200190565b602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e4919061336f565b6001600160a01b03161461140a5760405162461bcd60e51b81526004016103779061338c565b80611414816133da565b915050611302565b505b61145f8184338b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d9250611ba6915050565b6114bd5760405162461bcd60e51b815260206004820152602960248201527f4c6f616e52657061796d656e74526f757465723a2052657061796d656e742068604482015268185cc819985a5b195960ba1b6064820152608401610377565b806001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505050507fc3ddefdb4c5801635c554e9856ef97808797e9d19731e8c3079133775d81e8dd8a8a61153a3390565b8b8b8b60405161154f969594939291906133f3565b60405180910390a160019450505050506115696001606555565b95945050505050565b60006001600160e01b03198216637965db0b60e01b14806102c657506301ffc9a760e01b6001600160e01b03198316146102c6565b610e128133611f5c565b600082815260c96020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6116068282611fb5565b600082815260fb602052604090206102e1908261203b565b6116288282612050565b600082815260fb602052604090206102e190826120b7565b6116486120cc565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61169a6116db565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116753390565b60006104008383612115565b60335460ff16156103ba5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610377565b6002606554036117735760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610377565b6002606555565b60606000826001600160401b0381111561179657611796613217565b6040519080825280602002602001820160405280156117bf578160200160208202803683370190505b50905060006117cf846002613441565b6117da90600261333a565b90505b6117e8846003613441565b6117f390600261333a565b81101561185a5784818151811061180c5761180c61305e565b6020026020010151828560026118229190613441565b61182d600285613458565b6118379190613458565b815181106118475761184761305e565b60209081029190910101526001016117dd565b509392505050565b60606000826001600160401b0381111561187e5761187e613217565b6040519080825280602002602001820160405280156118a7578160200160208202803683370190505b50905060035b6118b884600361333a565b81101561185a578481815181106118d1576118d161305e565b6020026020010151826003836118e79190613458565b815181106118f7576118f761305e565b6001600160a01b0392909216602092830291909101909101526001016118ad565b611920612d44565b600086516001600160401b0381111561193b5761193b613217565b604051908082528060200260200182016040528015611964578160200160208202803683370190505b5090506000604051806101000160405280611981898b898961213f565b815260200188600160ff168151811061199c5761199c61305e565b60200260200101516001600160a01b031681526020016119bd8888516121da565b815260200187600060ff16815181106119d8576119d861305e565b602002602001015181526020016119f0888851612282565b8152602001838152602001611a0688885161234d565b815260200187600160ff1681518110611a2157611a2161305e565b602002602001015160ff168152509050611a3a81612435565b60a0820152979650505050505050565b60006102c682600561257d565b600054610100900460ff16611ac25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610377565b6001600160a01b038116611ad35750335b611ade600033612602565b611b087fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e82612602565b611b527f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6115b1565b610e127f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989267f3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d76115b1565b60006102c6825490565b61015f546000908690611bc1906001600160a01b031661260c565b604051633444c16360e21b81526001600160a01b038381166004830152919091169063d113058c90602401602060405180830381865afa158015611c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2d919061334d565b15611c9757866001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c94919061336f565b90505b6000806000896001600160a01b031663586fd8a18a896040518363ffffffff1660e01b8152600401611cca9291906134a6565b6000604051808303816000875af1158015611ce9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d11919081019061355a565b9150915060005b8251811015611ee55760008b6001600160a01b0316631e0029c88c8481518110611d4457611d4461305e565b60200260200101516040518263ffffffff1660e01b8152600401611d6a91815260200190565b602060405180830381865afa158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab919061330b565b9050828281518110611dbf57611dbf61305e565b6020026020010151848381518110611dd957611dd961305e565b602002602001015103611e0c57611e0c868c8481518110611dfc57611dfc61305e565b602002602001015160001b612619565b838281518110611e1e57611e1e61305e565b602002602001015185611e31919061333a565b9450856001600160a01b03168a6001600160a01b03168c8481518110611e5957611e5961305e565b602002602001015160001b7f9da9a6c51638610f182a89c69d6ab25dad9cf802834bac5a309dcafa2557265f878681518110611e9757611e9761305e565b6020026020010151858d604051611eca9392919092835260208301919091526001600160a01b0316604082015260600190565b60405180910390a45080611edd816133da565b915050611d18565b50611ef286898686612709565b604051639016170560e01b8152600481018490526001600160a01b038b1690639016170590602401600060405180830381600087803b158015611f3457600080fd5b505af1158015611f48573d6000803e3d6000fd5b5060019d9c50505050505050505050505050565b611f668282610e15565b61038a57611f7381612813565b611f7e836020612825565b604051602001611f8f9291906135e1565b60408051601f198184030181529082905262461bcd60e51b825261037791600401613656565b611fbf8282610e15565b61038a57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ff73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610400836001600160a01b0384166129c0565b61205a8282610e15565b1561038a57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610400836001600160a01b038416612a0f565b60335460ff166103ba5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610377565b600082600001828154811061212c5761212c61305e565b9060005260206000200154905092915050565b612147612d9b565b6040805160a081019091526000908087600260ff168151811061216c5761216c61305e565b60200260200101516001600160a01b031681526020018681526020018581526020016121c7886002808111156121a4576121a4613048565b60ff16815181106121b7576121b761305e565b6020026020010151888888612b02565b8152602001849052915050949350505050565b60606000826001600160401b038111156121f6576121f6613217565b60405190808252806020026020018201604052801561221f578160200160208202803683370190505b50905060025b61223084600261333a565b81101561185a578481815181106122495761224961305e565b60200260200101518260028361225f9190613458565b8151811061226f5761226f61305e565b6020908102919091010152600101612225565b60606000826001600160401b0381111561229e5761229e613217565b6040519080825280602002602001820160405280156122c7578160200160208202803683370190505b50905060006122d784600261333a565b90505b6122e5846002613441565b6122f090600261333a565b81101561185a578481815181106123095761230961305e565b602002602001015182856002846123209190613458565b61232a9190613458565b8151811061233a5761233a61305e565b60209081029190910101526001016122da565b60606000826001600160401b0381111561236957612369613217565b604051908082528060200260200182016040528015612392578160200160208202803683370190505b50905060006123a2846003613441565b6123ad90600261333a565b90505b6123bb846004613441565b6123c690600261333a565b81101561185a578481815181106123df576123df61305e565b6020026020010151828560036123f59190613441565b612400600285613458565b61240a9190613458565b8151811061241a5761241a61305e565b60ff92909216602092830291909101909101526001016123b0565b805160200151516060906000816001600160401b0381111561245957612459613217565b604051908082528060200260200182016040528015612482578160200160208202803683370190505b50905060005b8281101561185a5761255885600001516060015182815181106124ad576124ad61305e565b6020026020010151866040015183815181106124cb576124cb61305e565b60200260200101518760200151886080015185815181106124ee576124ee61305e565b60200260200101516040516bffffffffffffffffffffffff1930606090811b82166020840152603483018790526054830186905284901b1660748201526088810182905260009060a801604051602081830303815290604052805190602001209050949350505050565b82828151811061256a5761256a61305e565b6020908102919091010152600101612488565b6000826001600160a01b031663bcaa0c558360098111156125a0576125a0613048565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa1580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061336f565b61038a82826115fc565b60006102c682600061257d565b6001600160a01b03821661266f5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206372656469746f72206163636f756e742e000000000000006044820152606401610377565b806126b45760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21030b3b932b2b6b2b73a1034b21760591b6044820152606401610377565b6126bd81612c38565b6127005760405162461bcd60e51b81526020600482015260146024820152734465627420646f6573206e6f742065787369747360601b6044820152606401610377565b61038a81612ccf565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161276d9190613689565b6000604051808303816000865af19150503d80600081146127aa576040519150601f19603f3d011682016040523d82523d6000602084013e6127af565b606091505b50915091508180156127d95750805115806127d95750808060200190518101906127d9919061334d565b61280b5760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606401610377565b505050505050565b60606102c66001600160a01b03831660145b60606000612834836002613441565b61283f90600261333a565b6001600160401b0381111561285657612856613217565b6040519080825280601f01601f191660200182016040528015612880576020820181803683370190505b509050600360fc1b8160008151811061289b5761289b61305e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ca576128ca61305e565b60200101906001600160f81b031916908160001a90535060006128ee846002613441565b6128f990600161333a565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061292d5761292d61305e565b1a60f81b8282815181106129435761294361305e565b60200101906001600160f81b031916908160001a90535060049490941c9361296a8161369b565b90506128fc565b5083156104005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610377565b6000818152600183016020526040812054612a07575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102c6565b5060006102c6565b60008181526001830160205260408120548015612af8576000612a33600183613458565b8554909150600090612a4790600190613458565b9050818114612aac576000866000018281548110612a6757612a6761305e565b9060005260206000200154905080876000018481548110612a8a57612a8a61305e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612abd57612abd6136b2565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102c6565b60009150506102c6565b6060600082516001600160401b03811115612b1f57612b1f613217565b604051908082528060200260200182016040528015612b48578160200160208202803683370190505b50905060005b8351612b5b90600061333a565b811015612c2e5786868281518110612b7557612b7561305e565b6020026020010151868381518110612b8f57612b8f61305e565b6020026020010151868481518110612ba957612ba961305e565b6020026020010151604051602001612bf39493929190606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60405160208183030381529060405280519060200120828281518110612c1b57612c1b61305e565b6020908102919091010152600101612b4e565b5095945050505050565b61015f546000908190612c53906001600160a01b0316611a4a565b6040516331a9108f60e11b8152600481018590526001600160a01b039190911690636352211e90602401602060405180830381865afa158015612c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbe919061336f565b6001600160a01b0316141592915050565b61015f54612ce5906001600160a01b0316611a4a565b604051630852cd8d60e31b8152600481018390526001600160a01b0391909116906342966c6890602401600060405180830381600087803b158015612d2957600080fd5b505af1158015612d3d573d6000803e3d6000fd5b5050505050565b604051806101000160405280612d58612d9b565b815260200160006001600160a01b031681526020016060815260200160008152602001606081526020016060815260200160608152602001600060ff1681525090565b6040518060a0016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b600060208284031215612de557600080fd5b81356001600160e01b03198116811461040057600080fd5b60008060408385031215612e1057600080fd5b50508035926020909101359150565b600060208284031215612e3157600080fd5b5035919050565b6001600160a01b0381168114610e1257600080fd5b60008060408385031215612e6057600080fd5b823591506020830135612e7281612e38565b809150509250929050565b600060208284031215612e8f57600080fd5b81356001600160401b03811115612ea557600080fd5b82016080818503121561040057600080fd5b600060208284031215612ec957600080fd5b813561040081612e38565b60008083601f840112612ee657600080fd5b5081356001600160401b03811115612efd57600080fd5b6020830191508360208260051b8501011115612f1857600080fd5b9250929050565b600080600080600060608688031215612f3757600080fd5b85356001600160401b0380821115612f4e57600080fd5b612f5a89838a01612ed4565b90975095506020880135915080821115612f7357600080fd5b50612f8088828901612ed4565b9094509250506040860135612f9481612e38565b809150509295509295909350565b6020808252603a908201527f556e74616e676c6564426173653a204d75737420686176652061646d696e207260408201527f6f6c6520746f20706572666f726d207468697320616374696f6e000000000000606082015260800190565b6000808335601e1984360301811261301657600080fd5b8301803591506001600160401b0382111561303057600080fd5b6020019150600581901b3603821315612f1857600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e1983360301811261308a57600080fd5b9190910192915050565b6000808335601e198436030181126130ab57600080fd5b83016020810192503590506001600160401b038111156130ca57600080fd5b8060051b3603821315612f1857600080fd5b81835260006001600160fb1b038311156130f557600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038381168252604060208301526000906131588480613094565b6080604086015261316d60c0860182846130dc565b91505061317d6020860186613094565b603f19808785030160608801526131958483856130dc565b9350604088013592506131a783612e38565b938216608087015260608701359336889003601e190185126131c857600080fd5b6020948801948501943592506001600160401b038311156131e857600080fd5b8236038513156131f757600080fd5b8684030160a08701525061320c82828561310e565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6002811061324b57634e487b7160e01b600052602160045260246000fd5b9052565b6000604080835261326381840186886130dc565b83810360208581019190915285518083528682019282019060005b818110156132fc57845180516001600160a01b0390811685528582015116858501528681015187850152606080820151908501526080808201519085015260a0808201519085015260c08082015160ff169085015260e090810151906132e68186018361322d565b505093830193610100929092019160010161327e565b50909998505050505050505050565b60006020828403121561331d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156102c6576102c6613324565b60006020828403121561335f57600080fd5b8151801515811461040057600080fd5b60006020828403121561338157600080fd5b815161040081612e38565b6020808252602e908201527f4c6f616e52657061796d656e74526f757465723a20496e76616c69642072657060408201526d185e5b595b9d081c995c5d595cdd60921b606082015260800190565b6000600182016133ec576133ec613324565b5060010190565b60808152600061340760808301888a6130dc565b6001600160a01b038781166020850152838203604085015261342a8287896130dc565b925080851660608501525050979650505050505050565b80820281158282048414176102c6576102c6613324565b818103818111156102c6576102c6613324565b600081518084526020808501945080840160005b8381101561349b5781518752958201959082019060010161347f565b509495945050505050565b6040815260006134b9604083018561346b565b8281036020840152611569818561346b565b600082601f8301126134dc57600080fd5b815160206001600160401b03808311156134f8576134f8613217565b8260051b604051601f19603f8301168101818110848211171561351d5761351d613217565b60405293845285810183019383810192508785111561353b57600080fd5b83870191505b8482101561320c57815183529183019190830190613541565b6000806040838503121561356d57600080fd5b82516001600160401b038082111561358457600080fd5b613590868387016134cb565b935060208501519150808211156135a657600080fd5b506135b3858286016134cb565b9150509250929050565b60005b838110156135d85781810151838201526020016135c0565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136198160178501602088016135bd565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161364a8160288401602088016135bd565b01602801949350505050565b60208152600082518060208401526136758160408501602087016135bd565b601f01601f19169190910160400192915050565b6000825161308a8184602087016135bd565b6000816136aa576136aa613324565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208bdce72464d2f42dd1ade7aeab54681127323e21c3409ba5a6eb58a768e6179a64736f6c63430008130033",
  "devdoc": {
    "author": "Untangled Team",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "repayInBatch(bytes32[],uint256[],address)": {
        "details": "calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "LoanKernel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fillDebtOrder((address[],uint256[],bytes32[],(uint256[],uint256[],address,bytes)[]))": {
        "notice": "Filling new Debt Order Notice: - All Debt Order must to have same:   + TermContract   + Creditor Fee   + Debtor Fee"
      },
      "repayInBatch(bytes32[],uint256[],address)": {
        "notice": "allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts"
      }
    },
    "notice": "Upload loan, Repay Loan and conclude loan",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 759,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 762,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4972,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 942,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1047,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1062,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1131,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6262,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7572_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10782,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20527,
        "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
        "label": "registry",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(Registry)28621"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Registry)28621": {
        "encoding": "inplace",
        "label": "contract Registry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7572_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7572_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7572_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7571,
            "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7257_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7257_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7252,
            "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7256,
            "contract": "contracts/protocol/loan/LoanKernel.sol:LoanKernel",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}