{
  "address": "0x0798db6Cbf916138990c5a7503eFaC39C67AB2fD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "executionBatchSize",
          "type": "uint256"
        }
      ],
      "name": "closeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sotCurrencyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jotCurrencyAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "allSOTIncomeOnly",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allJOTIncomeOnly",
              "type": "bool"
            }
          ],
          "internalType": "struct NoteTokenVault.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sotIncomeClaimAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jotIncomeClaimAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sotCapitalClaimAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jotCapitalClaimAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct NoteTokenVault.ExecutionOrder[]",
          "name": "executionOrders",
          "type": "tuple[]"
        }
      ],
      "name": "executeOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getBatchInfor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executed",
              "type": "uint256"
            }
          ],
          "internalType": "struct NoteTokenVault.BatchInfor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getEpochInfor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sotPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jotPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "redeemDisabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "epochClosed",
              "type": "bool"
            }
          ],
          "internalType": "struct NoteTokenVault.EpochInfor",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sotCurrencyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jotCurrencyAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "allSOTIncomeOnly",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allJOTIncomeOnly",
              "type": "bool"
            }
          ],
          "internalType": "struct NoteTokenVault.Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "openEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "redeemDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_freeTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setFeeInfor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_redeemDisabled",
          "type": "bool"
        }
      ],
      "name": "setPoolRedeemDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x91bafdd5963b320c8b5b4182cd5a73a6eccca08b1647a1e6f71c934877cb833e",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0x0798db6Cbf916138990c5a7503eFaC39C67AB2fD",
    "transactionIndex": 0,
    "gasUsed": "2165445",
    "logsBloom": "0x
    "blockHash": "0x68b32fdcd62db0b37d585ead6cb75d54f3a453399c4c6da03d44023d79be8a63",
    "transactionHash": "0x91bafdd5963b320c8b5b4182cd5a73a6eccca08b1647a1e6f71c934877cb833e",
    "logs": [],
    "blockNumber": 24557179,
    "cumulativeGasUsed": "2165445",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "a11161120e8673631de79ed6df6433e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionBatchSize\",\"type\":\"uint256\"}],\"name\":\"closeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sotCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allSOTIncomeOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allJOTIncomeOnly\",\"type\":\"bool\"}],\"internalType\":\"struct NoteTokenVault.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sotIncomeClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotIncomeClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sotCapitalClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotCapitalClaimAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct NoteTokenVault.ExecutionOrder[]\",\"name\":\"executionOrders\",\"type\":\"tuple[]\"}],\"name\":\"executeOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBatchInfor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executed\",\"type\":\"uint256\"}],\"internalType\":\"struct NoteTokenVault.BatchInfor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getEpochInfor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemDisabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"epochClosed\",\"type\":\"bool\"}],\"internalType\":\"struct NoteTokenVault.EpochInfor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sotCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jotCurrencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allSOTIncomeOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allJOTIncomeOnly\",\"type\":\"bool\"}],\"internalType\":\"struct NoteTokenVault.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"openEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"redeemDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeTimestamp\",\"type\":\"uint256\"}],\"name\":\"setFeeInfor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_redeemDisabled\",\"type\":\"bool\"}],\"name\":\"setPoolRedeemDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"closeEpoch(address,uint256)\":{\"params\":{\"pool\":\"address of corresponding pool\"}},\"createOrder(address,(uint256,uint256,bool,bool))\":{\"params\":{\"order\":\"the information of the withdraw order\",\"pool\":\"address of the pool\"}},\"executeOrders(address,(address,uint256,uint256,uint256,uint256)[])\":{\"params\":{\"executionOrders\":\"batch of execution orders\",\"pool\":\"address of the target pool\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setFeeInfor(address,uint256,uint256)\":{\"params\":{\"_feePercentage\":\"the fee percentage that will be charge if user withdraw their capital before commitment period end\",\"_freeTimestamp\":\"the timestamp where commitment period end\",\"pool\":\"pool address\"}},\"setPoolRedeemDisabled(address,bool)\":{\"params\":{\"_redeemDisabled\":\"pool's redeemability\",\"pool\":\"pool address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeEpoch(address,uint256)\":{\"notice\":\"Close the epoch and snapshot the NoteToken prices at that moment\"},\"createOrder(address,(uint256,uint256,bool,bool))\":{\"notice\":\"Create an order in currency amount\"},\"executeOrders(address,(address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Receive the information and execution the epoch\"},\"setFeeInfor(address,uint256,uint256)\":{\"notice\":\"Set the parameter for fee calculation of a pool\"},\"setPoolRedeemDisabled(address,bool)\":{\"notice\":\"Set pool's availability to redeem\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pool/NoteTokenVault.sol\":\"NoteTokenVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\r\\nimport '../libraries/Configuration.sol';\\r\\nimport {OWNER_ROLE, ORIGINATOR_ROLE, VALIDATOR_ROLE, POOL_ADMIN_ROLE} from '../libraries/DataTypes.sol';\\r\\n/**\\r\\n * @title Untangled's SecuritizationPool contract\\r\\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\\r\\n *  It provides functionalities for contract initialization, pausing, and access control.\\r\\n * @author Untangled Team\\r\\n */\\r\\nabstract contract UntangledBase is\\r\\n    Initializable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    AccessControlEnumerableUpgradeable\\r\\n{\\r\\n    function isAdmin() public view virtual returns (bool) {\\r\\n        return hasRole(OWNER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\r\\n        __Pausable_init_unchained();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __UntangledBase__init_unchained(owner);\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\r\\n        if (owner == address(0)) owner = _msgSender();\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _setupRole(OWNER_ROLE, owner);\\r\\n\\r\\n        _setRoleAdmin(ORIGINATOR_ROLE, OWNER_ROLE);\\r\\n        _setRoleAdmin(VALIDATOR_ROLE, POOL_ADMIN_ROLE);\\r\\n    }\\r\\n\\r\\n    function getInitializedVersion() public view virtual returns (uint256) {\\r\\n        return _getInitializedVersion();\\r\\n    }\\r\\n\\r\\n    function pause() public virtual onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public virtual onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _setRoleAdmin(role, adminRole);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xa828fd73d4873b4b5b2b556aa6d3068096cea75ce08b805e780a535c59a004cb\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IMintedNormalTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Registry} from '../storage/Registry.sol';\\r\\n\\r\\ninterface IMintedNormalTGE {\\r\\n    event SetHasStarted(bool hasStarted);\\r\\n    event UpdateMinBidAmount(uint256 minBidAmount);\\r\\n    event UpdateTotalCap(uint256 totalCap);\\r\\n    event UpdateInitialAmount(uint256 initialAmount);\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\r\\n\\r\\n    enum SaleType {\\r\\n        NORMAL_SALE\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        Registry _registry,\\r\\n        address _pool,\\r\\n        address _token,\\r\\n        address _currency,\\r\\n        uint256 _openingTime\\r\\n    ) external;\\r\\n\\r\\n    ///@notice investor bids for SOT/JOT token. Paid by pool's currency\\r\\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function initialAmount() external view returns (uint256);\\r\\n\\r\\n    function currencyRaisedByInvestor(address _investor) external view returns (uint256);\\r\\n\\r\\n    function currencyRaised() external view returns (uint256);\\r\\n\\r\\n    function firstNoteTokenMintedTimestamp() external view returns (uint256);\\r\\n\\r\\n    function setHasStarted(bool _hasStarted) external;\\r\\n\\r\\n    function setMinBidAmount(uint256 _minBidAmount) external;\\r\\n\\r\\n    function onRedeem(uint256 _currencyAmount) external;\\r\\n\\r\\n    function setInitialAmount(uint256 _initialAmount) external;\\r\\n\\r\\n    function setOpeningTime(uint256 _openingTime) external;\\r\\n\\r\\n    function setTotalCap(uint256 _cap) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5f94dfa53dde2b8c3847d719abcdaea4177e80656263b57c4e02f4c6e310083d\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\r\\nimport {IPauseable} from './IPauseable.sol';\\r\\n\\r\\ninterface INoteToken is IERC20Upgradeable, IERC20MetadataUpgradeable, IPauseable {\\r\\n\\r\\n    function poolAddress() external view returns (address);\\r\\n\\r\\n    function noteTokenType() external view returns (uint8);\\r\\n\\r\\n    function mint(address receiver, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x93344b4a1d95d62e48af4cb78641cb9748ad810e35ad2b81e488fffa44dfdc08\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IPauseable {\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x350fb8b7112b0242b2dd05ba185adbd364052385ef1b4fcd00b17958e12434f2\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\r\\nimport {Configuration} from '../libraries/Configuration.sol';\\r\\nimport '../storage/Registry.sol';\\r\\n\\r\\ninterface IPool {\\r\\n    function calcJuniorRatio() external view returns (uint256 juniorRatio);\\r\\n\\r\\n    function calcTokenPrices() external view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice);\\r\\n\\r\\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external;\\r\\n\\r\\n    function getLoansValue(\\r\\n        uint256[] memory tokenIds,\\r\\n        DataTypes.LoanEntry[] memory loanEntries\\r\\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues);\\r\\n\\r\\n    function collectAssets(\\r\\n        uint256[] memory tokenIds,\\r\\n        DataTypes.LoanEntry[] memory loanEntries\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function currentNAV() external view returns (uint256 nav_);\\r\\n\\r\\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256);\\r\\n\\r\\n    function debt(uint256 loan) external view returns (uint256 loanDebt);\\r\\n\\r\\n    function debtCeiling() external view returns (uint256);\\r\\n\\r\\n    function decreaseCapitalReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function decreaseIncomeReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function disburse(address usr, uint256 currencyAmount) external;\\r\\n\\r\\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory);\\r\\n\\r\\n    function increaseCapitalReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external;\\r\\n\\r\\n    function injectTGEAddress(address _tgeAddress, Configuration.NOTE_TOKEN_TYPE) external;\\r\\n\\r\\n    function interestRateSOT() external view returns (uint256);\\r\\n\\r\\n    function isDebtCeilingValid() external view returns (bool);\\r\\n\\r\\n    function isMinFirstLossValid() external view returns (bool);\\r\\n\\r\\n    function jotToken() external view returns (address);\\r\\n\\r\\n    function minFirstLossCushion() external view returns (uint32);\\r\\n\\r\\n    function openingBlockTimestamp() external view returns (uint64);\\r\\n\\r\\n    function pot() external view returns (address);\\r\\n\\r\\n    function rebase() external;\\r\\n\\r\\n    function repayLoan(\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory);\\r\\n\\r\\n    function reserve() external view returns (uint256);\\r\\n\\r\\n    function registry() external returns (Registry);\\r\\n\\r\\n    function risk(bytes32 nft_) external view returns (uint256 risk_);\\r\\n\\r\\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory);\\r\\n\\r\\n    function secondTGEAddress() external view returns (address);\\r\\n\\r\\n    function seniorDebtAndBalance() external view returns (uint256, uint256);\\r\\n\\r\\n    function setDebtCeiling(uint256 _debtCeiling) external;\\r\\n\\r\\n    function setInterestRateSOT(uint32 _newRate) external;\\r\\n\\r\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external;\\r\\n\\r\\n    function setUpOpeningBlockTimestamp() external;\\r\\n\\r\\n    function sotToken() external view returns (address);\\r\\n\\r\\n    function tgeAddress() external view returns (address);\\r\\n\\r\\n    function totalAssetRepaidCurrency() external view returns (uint256);\\r\\n\\r\\n    function underlyingCurrency() external view returns (address);\\r\\n\\r\\n    function validatorRequired() external view returns (bool);\\r\\n\\r\\n    function withdraw(address to, uint256 amount) external;\\r\\n\\r\\n    function withdrawAssets(\\r\\n        address[] memory tokenAddresses,\\r\\n        uint256[] memory tokenIds,\\r\\n        address[] memory recipients\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xedabebbeb0c36bc95b36801a037acac933f77b82cbb4fc7b465c3104e073bb40\",\"license\":\"Unlicense\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        TOKEN_GENERATION_EVENT_FACTORY,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO,\\r\\n        NOTE_TOKEN_VAULT\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x667c8e731fed3ece0d945ec16fb7c55e668743b9bda26dc4d87de9dd8666d73f\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n        uint256 debtCeiling;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address tgeAddress;\\r\\n        address secondTGEAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        uint256 interestRateSOT;\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n        uint256 loanCount;\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b6120a2810775ef84487aa845d03070b7c10a0defa78324dce9d8e0b094abbd\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/NoteTokenVault.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\\r\\nimport {IPool} from '../../interfaces/IPool.sol';\\r\\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\\r\\nimport {ONE_HUNDRED_PERCENT, BACKEND_ADMIN_ROLE} from '../../libraries/DataTypes.sol';\\r\\n\\r\\ncontract NoteTokenVault is\\r\\n    Initializable,\\r\\n    PausableUpgradeable,\\r\\n    AccessControlEnumerableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable\\r\\n{\\r\\n    struct Order {\\r\\n        uint256 sotCurrencyAmount;\\r\\n        uint256 jotCurrencyAmount;\\r\\n        bool allSOTIncomeOnly;\\r\\n        bool allJOTIncomeOnly;\\r\\n    }\\r\\n\\r\\n    struct ExecutionOrder {\\r\\n        address user;\\r\\n        uint256 sotIncomeClaimAmount;\\r\\n        uint256 jotIncomeClaimAmount;\\r\\n        uint256 sotCapitalClaimAmount;\\r\\n        uint256 jotCapitalClaimAmount;\\r\\n    }\\r\\n\\r\\n    struct EpochInfor {\\r\\n        uint256 sotPrice;\\r\\n        uint256 jotPrice;\\r\\n        uint256 timestamp;\\r\\n        bool redeemDisabled;\\r\\n        bool epochClosed;\\r\\n    }\\r\\n\\r\\n    struct BatchInfor {\\r\\n        uint256 batchSize;\\r\\n        uint256 executed;\\r\\n    }\\r\\n\\r\\n    struct FeeInfor {\\r\\n        uint256 feePercentage;\\r\\n        uint256 freeTimestamp;\\r\\n    }\\r\\n    // pool => user => order\\r\\n    mapping(address => mapping(address => Order)) orders;\\r\\n    // pool => epochInfor\\r\\n    mapping(address => EpochInfor) epochInfor;\\r\\n    // pool => fee\\r\\n    mapping(address => FeeInfor) fees;\\r\\n    // pool => execution batch size\\r\\n    mapping(address => BatchInfor) batchInfor;\\r\\n\\r\\n    event OrderCreated(address pool, address user);\\r\\n    event OrderExecuted(address pool, address user, uint256 batchId);\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __Pausable_init_unchained();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    function getEpochInfor(address pool) public view returns (EpochInfor memory) {\\r\\n        return epochInfor[pool];\\r\\n    }\\r\\n\\r\\n    function redeemDisabled(address pool) public view returns (bool) {\\r\\n        return epochInfor[pool].redeemDisabled;\\r\\n    }\\r\\n\\r\\n    function getOrder(address pool, address user) public view returns (Order memory) {\\r\\n        return orders[pool][user];\\r\\n    }\\r\\n\\r\\n    function getBatchInfor(address pool) public view returns (BatchInfor memory) {\\r\\n        return batchInfor[pool];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the parameter for fee calculation of a pool\\r\\n     * @param pool pool address\\r\\n     * @param _feePercentage the fee percentage that will be charge if user withdraw their capital before commitment period end\\r\\n     * @param _freeTimestamp the timestamp where commitment period end\\r\\n     */\\r\\n    function setFeeInfor(\\r\\n        address pool,\\r\\n        uint256 _feePercentage,\\r\\n        uint256 _freeTimestamp\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        fees[pool].feePercentage = _feePercentage;\\r\\n        fees[pool].freeTimestamp = _freeTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set pool's availability to redeem\\r\\n     * @param pool pool address\\r\\n     * @param _redeemDisabled pool's redeemability\\r\\n     */\\r\\n    function setPoolRedeemDisabled(address pool, bool _redeemDisabled) external onlyRole(BACKEND_ADMIN_ROLE) {\\r\\n        epochInfor[pool].redeemDisabled = _redeemDisabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Create an order in currency amount\\r\\n     * @param pool address of the pool\\r\\n     * @param order the information of the withdraw order\\r\\n     */\\r\\n    function createOrder(address pool, Order calldata order) external {\\r\\n        orders[pool][msg.sender] = order;\\r\\n        emit OrderCreated(pool, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Close the epoch and snapshot the NoteToken prices at that moment\\r\\n     * @param pool address of corresponding pool\\r\\n     */\\r\\n    function closeEpoch(address pool, uint256 executionBatchSize) external onlyRole(BACKEND_ADMIN_ROLE) {\\r\\n        require(epochInfor[pool].epochClosed == false, 'epoch already closed');\\r\\n        (uint256 jotPrice, uint256 sotPrice) = IPool(pool).calcTokenPrices();\\r\\n        // snapshot token price\\r\\n        epochInfor[pool].jotPrice = jotPrice;\\r\\n        epochInfor[pool].sotPrice = sotPrice;\\r\\n        epochInfor[pool].timestamp = block.timestamp;\\r\\n        epochInfor[pool].epochClosed = true;\\r\\n        // set batch infor\\r\\n        batchInfor[pool].batchSize = executionBatchSize;\\r\\n        batchInfor[pool].executed = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Receive the information and execution the epoch\\r\\n     * @param pool address of the target pool\\r\\n     * @param executionOrders batch of execution orders\\r\\n     */\\r\\n    function executeOrders(\\r\\n        address pool,\\r\\n        ExecutionOrder[] calldata executionOrders\\r\\n    ) external onlyRole(BACKEND_ADMIN_ROLE) {\\r\\n        require(epochInfor[pool].epochClosed == true, \\\"epoch haven't closed\\\");\\r\\n        require(batchInfor[pool].executed < batchInfor[pool].batchSize, 'batch fully executed');\\r\\n        address sotAddress = IPool(pool).sotToken();\\r\\n        address jotAddress = IPool(pool).jotToken();\\r\\n        uint256 totalIncomeWithdraw;\\r\\n        uint256 totalCapitalWithdraw;\\r\\n        uint256 totalSeniorWithdraw;\\r\\n        uint256 totalJuniorWithdraw;\\r\\n        for (uint256 i = 0; i < executionOrders.length; i++) {\\r\\n            // validate the order and burn the required amount note token\\r\\n            _validateAndBurn(\\r\\n                pool,\\r\\n                executionOrders[i].user,\\r\\n                executionOrders[i].sotIncomeClaimAmount + executionOrders[i].sotCapitalClaimAmount, // total sot claimed\\r\\n                executionOrders[i].jotIncomeClaimAmount + executionOrders[i].jotCapitalClaimAmount, // total jot claimed\\r\\n                sotAddress,\\r\\n                jotAddress\\r\\n            );\\r\\n            // update the state of the order\\r\\n            _updateOrder(\\r\\n                pool,\\r\\n                executionOrders[i].user,\\r\\n                executionOrders[i].sotIncomeClaimAmount + executionOrders[i].sotCapitalClaimAmount, // total sot claimed\\r\\n                executionOrders[i].jotIncomeClaimAmount + executionOrders[i].jotCapitalClaimAmount // total jot claimed\\r\\n            );\\r\\n\\r\\n            uint256 capitalWithdraw = executionOrders[i].sotCapitalClaimAmount +\\r\\n                executionOrders[i].jotCapitalClaimAmount;\\r\\n            uint256 incomeWithdraw = executionOrders[i].sotIncomeClaimAmount + executionOrders[i].jotIncomeClaimAmount;\\r\\n            uint256 seniorWithdraw = executionOrders[i].sotCapitalClaimAmount + executionOrders[i].sotIncomeClaimAmount;\\r\\n            uint256 juniorWithdraw = executionOrders[i].jotCapitalClaimAmount + executionOrders[i].jotIncomeClaimAmount;\\r\\n\\r\\n            totalSeniorWithdraw += seniorWithdraw;\\r\\n            totalJuniorWithdraw += juniorWithdraw;\\r\\n            totalIncomeWithdraw += incomeWithdraw;\\r\\n            totalCapitalWithdraw += capitalWithdraw;\\r\\n            // disburse currency token to user\\r\\n            _disburse(pool, executionOrders[i].user, capitalWithdraw, incomeWithdraw);\\r\\n            address tempPool = pool;\\r\\n            address usr = executionOrders[i].user;\\r\\n            emit OrderExecuted(tempPool, usr, batchInfor[tempPool].executed);\\r\\n        }\\r\\n        // update reserve and senior asset\\r\\n        IPool(pool).decreaseIncomeReserve(totalIncomeWithdraw);\\r\\n        IPool(pool).decreaseCapitalReserve(totalCapitalWithdraw);\\r\\n        IPool(pool).changeSeniorAsset(0, totalSeniorWithdraw);\\r\\n\\r\\n        // decrease total currency raised\\r\\n        if (totalSeniorWithdraw != 0) {\\r\\n            IMintedNormalTGE(IPool(pool).tgeAddress()).onRedeem(totalSeniorWithdraw);\\r\\n        }\\r\\n        if (totalJuniorWithdraw != 0) {\\r\\n            IMintedNormalTGE(IPool(pool).secondTGEAddress()).onRedeem(totalJuniorWithdraw);\\r\\n        }\\r\\n\\r\\n        // check minFirstLoss\\r\\n        require(IPool(pool).isMinFirstLossValid(), 'exceed minFirstLoss');\\r\\n        batchInfor[pool].executed++;\\r\\n    }\\r\\n\\r\\n    function openEpoch(address pool) external onlyRole(BACKEND_ADMIN_ROLE) {\\r\\n        require(batchInfor[pool].batchSize == batchInfor[pool].executed, \\\"current batch haven't been fully executed\\\");\\r\\n        epochInfor[pool].epochClosed = false;\\r\\n    }\\r\\n\\r\\n    function _updateOrder(address pool, address user, uint256 sotCurrencyClaimed, uint256 jotCurrencyClaimed) internal {\\r\\n        if (orders[pool][user].sotCurrencyAmount >= sotCurrencyClaimed) {\\r\\n            orders[pool][user].sotCurrencyAmount -= sotCurrencyClaimed;\\r\\n        }\\r\\n        if (orders[pool][user].jotCurrencyAmount >= jotCurrencyClaimed) {\\r\\n            orders[pool][user].jotCurrencyAmount -= jotCurrencyClaimed;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _validateAndBurn(\\r\\n        address pool,\\r\\n        address user,\\r\\n        uint256 sotCurrencyClaimed,\\r\\n        uint256 jotCurrencyClaimed,\\r\\n        address sotAddress,\\r\\n        address jotAddress\\r\\n    ) internal {\\r\\n        require(\\r\\n            orders[pool][user].sotCurrencyAmount >= sotCurrencyClaimed || orders[pool][user].allSOTIncomeOnly,\\r\\n            'sot claim amount bigger than ordered'\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            orders[pool][user].jotCurrencyAmount >= jotCurrencyClaimed || orders[pool][user].allJOTIncomeOnly,\\r\\n            'jot claim amount bigger than ordered'\\r\\n        );\\r\\n\\r\\n        // burn note token\\r\\n        uint256 sotBurn;\\r\\n        uint256 jotBurn;\\r\\n        if (epochInfor[pool].sotPrice != 0) {\\r\\n            sotBurn = sotCurrencyClaimed / epochInfor[pool].sotPrice;\\r\\n        }\\r\\n        if (epochInfor[pool].jotPrice != 0) {\\r\\n            jotBurn = jotCurrencyClaimed / epochInfor[pool].jotPrice;\\r\\n        }\\r\\n\\r\\n        if (sotAddress != address(0)) {\\r\\n            require(INoteToken(sotAddress).allowance(user, address(this)) >= sotBurn, 'not enough sot token allowance');\\r\\n        }\\r\\n        if (jotAddress != address(0)) {\\r\\n            require(INoteToken(jotAddress).allowance(user, address(this)) >= jotBurn, 'not enough jot token allowance');\\r\\n        }\\r\\n\\r\\n        if (sotBurn > 0 && sotAddress != address(0)) {\\r\\n            INoteToken(sotAddress).transferFrom(user, address(this), sotBurn * (10 ** 18));\\r\\n            INoteToken(sotAddress).burn(sotBurn);\\r\\n        }\\r\\n        if (jotBurn > 0 && jotAddress != address(0)) {\\r\\n            INoteToken(jotAddress).transferFrom(user, address(this), jotBurn * (10 ** 18));\\r\\n            INoteToken(jotAddress).burn(jotBurn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _disburse(address pool, address receiver, uint256 capitalWithdraw, uint256 incomeWithdraw) internal {\\r\\n        uint256 fee;\\r\\n        if (block.timestamp < fees[pool].freeTimestamp) {\\r\\n            fee = (capitalWithdraw * fees[pool].feePercentage) / ONE_HUNDRED_PERCENT;\\r\\n        }\\r\\n\\r\\n        IPool(pool).disburse(receiver, (capitalWithdraw + incomeWithdraw - fee));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4cbf3b21e847db4a461480bdf6b5e5f13b75721d3494be03622e8a868ef6941b\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledBase} from '../base/UntangledBase.sol';\\r\\nimport {Configuration} from '../libraries/Configuration.sol';\\r\\n\\r\\n/**\\r\\n * @title Registry\\r\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\r\\n *  for all other contracts to access it. These config vars\\r\\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\\r\\n * @author Untangled Team\\r\\n */\\r\\ncontract Registry is UntangledBase {\\r\\n    mapping(uint8 => address) public contractAddresses;\\r\\n    mapping(address => bool) public whiteListToAddresses;\\r\\n    mapping(address => bool) public whiteListFromAddresses;\\r\\n\\r\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __UntangledBase__init(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\r\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\r\\n        contractAddresses[addressIndex] = newAddress;\\r\\n    }\\r\\n\\r\\n    function getAddress(uint8 index) public view returns (address) {\\r\\n        return contractAddresses[index];\\r\\n    }\\r\\n\\r\\n    function isValidNoteTokenTransfer(address from, address to) external view returns (bool) {\\r\\n        return whiteListFromAddresses[from] || whiteListToAddresses[to];\\r\\n    }\\r\\n\\r\\n    function setWhiteListAddresses(\\r\\n        address[] calldata addresses,\\r\\n        bool[] calldata boolFroms,\\r\\n        bool[] calldata boolTos\\r\\n    ) public onlyAdmin {\\r\\n        uint256 length = addresses.length;\\r\\n        require(length == boolFroms.length && length == boolTos.length, 'Invalid length');\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            whiteListFromAddresses[addresses[i]] = boolFroms[i];\\r\\n            whiteListToAddresses[addresses[i]] = boolTos[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\r\\n    }\\r\\n\\r\\n    function setTokenGenerationEventFactory(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\\r\\n    }\\r\\n\\r\\n    function setNoteTokenVault(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        address oldNoteTokenVault = getAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\\r\\n        if (oldNoteTokenVault != address(0)) {\\r\\n            whiteListFromAddresses[oldNoteTokenVault] = false;\\r\\n            whiteListToAddresses[oldNoteTokenVault] = false;\\r\\n        }\\r\\n\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT), newAddress);\\r\\n\\r\\n        whiteListFromAddresses[newAddress] = true;\\r\\n        whiteListToAddresses[newAddress] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5960ee7e3fbd431c2e70ac69f03b4e9254dd9f107705ed2eeb07cf2950265e00\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612638806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637cc600e4116100b8578063a217fddf1161007c578063a217fddf14610354578063b778c9ee1461035c578063ca15c8731461036f578063d547741f14610382578063db9af1fc14610395578063fc62b0a7146103a857600080fd5b80637cc600e41461028a5780638129fc1c1461029d5780639010d07c146102a557806391d14854146102d0578063966851f1146102e357600080fd5b80632f2ff15d116100ff5780632f2ff15d1461021657806336568abe1461022957806349a1801b1461023c5780634ce945191461024f5780635c975abb1461027f57600080fd5b806301ffc9a71461013c5780631454c1421461016457806314d9db971461017957806322bc8b5d146101d2578063248a9ca3146101e5575b600080fd5b61014f61014a3660046120c0565b610477565b60405190151581526020015b60405180910390f35b6101776101723660046120ff565b6104a2565b005b61018c6101873660046120ff565b610565565b60405161015b9190600060a08201905082518252602083015160208301526040830151604083015260608301511515606083015260808301511515608083015292915050565b6101776101e036600461211c565b6105ff565b6102086101f336600461215d565b60009081526097602052604090206001015490565b60405190815260200161015b565b610177610224366004612176565b610676565b610177610237366004612176565b6106a0565b61017761024a3660046121b4565b61071e565b61014f61025d3660046120ff565b6001600160a01b0316600090815261012e602052604090206003015460ff1690565b60335460ff1661014f565b6101776102983660046121e2565b610766565b6101776108a4565b6102b86102b336600461220e565b6109d0565b6040516001600160a01b03909116815260200161015b565b61014f6102de366004612176565b6109ef565b6103396102f13660046120ff565b6040805180820190915260008082526020820152506001600160a01b031660009081526101306020908152604091829020825180840190935280548352600101549082015290565b6040805182518152602092830151928101929092520161015b565b610208600081565b61017761036a366004612230565b610a1a565b61020861037d36600461215d565b610a49565b610177610390366004612176565b610a60565b6101776103a3366004612265565b610a85565b6104406103b63660046122ed565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03918216600090815261012d602090815260408083209390941682529182528290208251608081018452815481526001820154928101929092526002015460ff80821615159383019390935261010090049091161515606082015290565b60405161015b9190815181526020808301519082015260408083015115159082015260609182015115159181019190915260800190565b60006001600160e01b03198216635a05180f60e01b148061049c575061049c82611361565b92915050565b6000805160206125e38339815191526104ba81611396565b6001600160a01b038216600090815261013060205260409020600181015490541461053e5760405162461bcd60e51b815260206004820152602960248201527f63757272656e7420626174636820686176656e2774206265656e2066756c6c7960448201526808195e1958dd5d195960ba1b60648201526084015b60405180910390fd5b506001600160a01b0316600090815261012e60205260409020600301805461ff0019169055565b61059b6040518060a001604052806000815260200160008152602001600081526020016000151581526020016000151581525090565b506001600160a01b0316600090815261012e6020908152604091829020825160a0810184528154815260018201549281019290925260028101549282019290925260039091015460ff80821615156060840152610100909104161515608082015290565b6001600160a01b038216600090815261012d602090815260408083203384529091529020819061062f828261231b565b5050604080516001600160a01b03841681523360208201527f87ae5ac82b62cc3d79a46528db4091b2c47aa8ab748e1ea48160b5389394d47a910160405180910390a15050565b60008281526097602052604090206001015461069181611396565b61069b83836113a0565b505050565b6001600160a01b03811633146107105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610535565b61071a82826113c2565b5050565b6000805160206125e383398151915261073681611396565b506001600160a01b0391909116600090815261012e60205260409020600301805460ff1916911515919091179055565b6000805160206125e383398151915261077e81611396565b6001600160a01b038316600090815261012e6020526040902060030154610100900460ff16156107e75760405162461bcd60e51b8152602060048201526014602482015273195c1bd8da08185b1c9958591e4818db1bdcd95960621b6044820152606401610535565b600080846001600160a01b0316630e9bf4e46040518163ffffffff1660e01b81526004016040805180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b919061236d565b6001600160a01b03909616600090815261012e602090815260408083206001808201959095559889554260028a01556003909801805461ff00191661010017905561013090529586209485559390930193909355505050565b600054610100900460ff16158080156108c45750600054600160ff909116105b806108de5750303b1580156108de575060005460ff166001145b6109415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610535565b6000805460ff191660011790558015610964576000805461ff0019166101001790555b61096c6113e4565b610974611417565b61097c611445565b61098760003361146e565b80156109cd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600082815260c9602052604081206109e89083611478565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a2581611396565b506001600160a01b03909216600090815261012f6020526040902090815560010155565b600081815260c96020526040812061049c90611484565b600082815260976020526040902060010154610a7b81611396565b61069b83836113c2565b6000805160206125e3833981519152610a9d81611396565b6001600160a01b038416600090815261012e602052604090206003015460ff610100909104161515600114610b0b5760405162461bcd60e51b8152602060048201526014602482015273195c1bd8da081a185d995b89dd0818db1bdcd95960621b6044820152606401610535565b6001600160a01b038416600090815261013060205260409020805460019091015410610b705760405162461bcd60e51b815260206004820152601460248201527318985d18da08199d5b1b1e48195e1958dd5d195960621b6044820152606401610535565b6000846001600160a01b031663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190612391565b90506000856001600160a01b0316632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190612391565b905060008060008060005b88811015610fdc57610d048b8b8b84818110610c6357610c636123ae565b610c7992602060a09092020190810191506120ff565b8c8c85818110610c8b57610c8b6123ae565b905060a00201606001358d8d86818110610ca757610ca76123ae565b905060a0020160200135610cbb91906123da565b8d8d86818110610ccd57610ccd6123ae565b905060a00201608001358e8e87818110610ce957610ce96123ae565b905060a0020160400135610cfd91906123da565b8b8b61148e565b610db98b8b8b84818110610d1a57610d1a6123ae565b610d3092602060a09092020190810191506120ff565b8c8c85818110610d4257610d426123ae565b905060a00201606001358d8d86818110610d5e57610d5e6123ae565b905060a0020160200135610d7291906123da565b8d8d86818110610d8457610d846123ae565b905060a00201608001358e8e87818110610da057610da06123ae565b905060a0020160400135610db491906123da565b611a68565b60008a8a83818110610dcd57610dcd6123ae565b905060a00201608001358b8b84818110610de957610de96123ae565b905060a0020160600135610dfd91906123da565b905060008b8b84818110610e1357610e136123ae565b905060a00201604001358c8c85818110610e2f57610e2f6123ae565b905060a0020160200135610e4391906123da565b905060008c8c85818110610e5957610e596123ae565b905060a00201602001358d8d86818110610e7557610e756123ae565b905060a0020160600135610e8991906123da565b905060008d8d86818110610e9f57610e9f6123ae565b905060a00201604001358e8e87818110610ebb57610ebb6123ae565b905060a0020160800135610ecf91906123da565b9050610edb82886123da565b9650610ee781876123da565b9550610ef3838a6123da565b9850610eff84896123da565b9750610f348f8f8f88818110610f1757610f176123ae565b610f2d92602060a09092020190810191506120ff565b8686611b4a565b8e60008f8f88818110610f4957610f496123ae565b610f5f92602060a09092020190810191506120ff565b6001600160a01b0383811660008181526101306020908152604091829020600101548251938452938516908301528101919091529091507f889f0643d669fbac53cbc7d1826992b9bce1fab5e9644034cffb9c0137fe9dd19060600160405180910390a15050505050508080610fd4906123ed565b915050610c45565b50604051637b85393760e11b8152600481018590526001600160a01b038b169063f70a726e90602401600060405180830381600087803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b5050604051630616b3dd60e21b8152600481018690526001600160a01b038d16925063185acf749150602401600060405180830381600087803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b5050604051631d514ebd60e11b815260006004820152602481018590526001600160a01b038d169250633aa29d7a9150604401600060405180830381600087803b1580156110da57600080fd5b505af11580156110ee573d6000803e3d6000fd5b50505050816000146111bc57896001600160a01b0316636456a3ee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115c9190612391565b6001600160a01b031663d7d55a4a836040518263ffffffff1660e01b815260040161118991815260200190565b600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050505b801561128457896001600160a01b031663221dc5936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190612391565b6001600160a01b031663d7d55a4a826040518263ffffffff1660e01b815260040161125191815260200190565b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050505b896001600160a01b03166349110ac46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190612406565b6113285760405162461bcd60e51b8152602060048201526013602482015272657863656564206d696e46697273744c6f737360681b6044820152606401610535565b6001600160a01b038a16600090815261013060205260408120600101805491611350836123ed565b919050555050505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061049c57506301ffc9a760e01b6001600160e01b031983161461049c565b6109cd8133611c36565b6113aa8282611c8f565b600082815260c96020526040902061069b9082611d15565b6113cc8282611d2a565b600082815260c96020526040902061069b9082611d91565b600054610100900460ff1661140b5760405162461bcd60e51b815260040161053590612423565b6033805460ff19169055565b600054610100900460ff1661143e5760405162461bcd60e51b815260040161053590612423565b600160fb55565b600054610100900460ff1661146c5760405162461bcd60e51b815260040161053590612423565b565b61071a82826113a0565b60006109e88383611da6565b600061049c825490565b6001600160a01b03808716600090815261012d6020908152604080832093891683529290522054841115806114ec57506001600160a01b03808716600090815261012d602090815260408083209389168352929052206002015460ff165b6115445760405162461bcd60e51b8152602060048201526024808201527f736f7420636c61696d20616d6f756e7420626967676572207468616e206f7264604482015263195c995960e21b6064820152608401610535565b6001600160a01b03808716600090815261012d6020908152604080832093891683529290522060010154831115806115aa57506001600160a01b03868116600090815261012d6020908152604080832093891683529290522060020154610100900460ff165b6116025760405162461bcd60e51b8152602060048201526024808201527f6a6f7420636c61696d20616d6f756e7420626967676572207468616e206f7264604482015263195c995960e21b6064820152608401610535565b6001600160a01b038616600090815261012e602052604081205481901561164a576001600160a01b038816600090815261012e6020526040902054611647908761246e565b91505b6001600160a01b038816600090815261012e602052604090206001015415611696576001600160a01b038816600090815261012e6020526040902060010154611693908661246e565b90505b6001600160a01b0384161561176657604051636eb1769f60e11b81526001600160a01b03888116600483015230602483015283919086169063dd62ed3e90604401602060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117189190612490565b10156117665760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420656e6f75676820736f7420746f6b656e20616c6c6f77616e636500006044820152606401610535565b6001600160a01b0383161561183657604051636eb1769f60e11b81526001600160a01b03888116600483015230602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e89190612490565b10156118365760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420656e6f756768206a6f7420746f6b656e20616c6c6f77616e636500006044820152606401610535565b60008211801561184e57506001600160a01b03841615155b1561194a576001600160a01b0384166323b872dd883061187686670de0b6b3a76400006124a9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee9190612406565b50604051630852cd8d60e31b8152600481018390526001600160a01b038516906342966c6890602401600060405180830381600087803b15801561193157600080fd5b505af1158015611945573d6000803e3d6000fd5b505050505b60008111801561196257506001600160a01b03831615155b15611a5e576001600160a01b0383166323b872dd883061198a85670de0b6b3a76400006124a9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156119de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a029190612406565b50604051630852cd8d60e31b8152600481018290526001600160a01b038416906342966c6890602401600060405180830381600087803b158015611a4557600080fd5b505af1158015611a59573d6000803e3d6000fd5b505050505b5050505050505050565b6001600160a01b03808516600090815261012d60209081526040808320938716835292905220548211611ad3576001600160a01b03808516600090815261012d6020908152604080832093871683529290529081208054849290611acd9084906124c0565b90915550505b6001600160a01b03808516600090815261012d60209081526040808320938716835292905220600101548111611b44576001600160a01b03808516600090815261012d6020908152604080832093871683529290529081206001018054839290611b3e9084906124c0565b90915550505b50505050565b6001600160a01b038416600090815261012f6020526040812060010154421015611bac57611b7b61271060646124a9565b6001600160a01b038616600090815261012f6020526040902054611b9f90856124a9565b611ba9919061246e565b90505b6001600160a01b038516637f3bd56e8583611bc786886123da565b611bd191906124c0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611c1757600080fd5b505af1158015611c2b573d6000803e3d6000fd5b505050505050505050565b611c4082826109ef565b61071a57611c4d81611dd0565b611c58836020611de2565b604051602001611c699291906124f7565b60408051601f198184030181529082905262461bcd60e51b82526105359160040161256c565b611c9982826109ef565b61071a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cd13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109e8836001600160a01b038416611f7e565b611d3482826109ef565b1561071a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109e8836001600160a01b038416611fcd565b6000826000018281548110611dbd57611dbd6123ae565b9060005260206000200154905092915050565b606061049c6001600160a01b03831660145b60606000611df18360026124a9565b611dfc9060026123da565b67ffffffffffffffff811115611e1457611e1461259f565b6040519080825280601f01601f191660200182016040528015611e3e576020820181803683370190505b509050600360fc1b81600081518110611e5957611e596123ae565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e8857611e886123ae565b60200101906001600160f81b031916908160001a9053506000611eac8460026124a9565b611eb79060016123da565b90505b6001811115611f2f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eeb57611eeb6123ae565b1a60f81b828281518110611f0157611f016123ae565b60200101906001600160f81b031916908160001a90535060049490941c93611f28816125b5565b9050611eba565b5083156109e85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610535565b6000818152600183016020526040812054611fc55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561049c565b50600061049c565b600081815260018301602052604081205480156120b6576000611ff16001836124c0565b8554909150600090612005906001906124c0565b905081811461206a576000866000018281548110612025576120256123ae565b9060005260206000200154905080876000018481548110612048576120486123ae565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061207b5761207b6125cc565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061049c565b600091505061049c565b6000602082840312156120d257600080fd5b81356001600160e01b0319811681146109e857600080fd5b6001600160a01b03811681146109cd57600080fd5b60006020828403121561211157600080fd5b81356109e8816120ea565b60008082840360a081121561213057600080fd5b833561213b816120ea565b92506080601f198201121561214f57600080fd5b506020830190509250929050565b60006020828403121561216f57600080fd5b5035919050565b6000806040838503121561218957600080fd5b82359150602083013561219b816120ea565b809150509250929050565b80151581146109cd57600080fd5b600080604083850312156121c757600080fd5b82356121d2816120ea565b9150602083013561219b816121a6565b600080604083850312156121f557600080fd5b8235612200816120ea565b946020939093013593505050565b6000806040838503121561222157600080fd5b50508035926020909101359150565b60008060006060848603121561224557600080fd5b8335612250816120ea565b95602085013595506040909401359392505050565b60008060006040848603121561227a57600080fd5b8335612285816120ea565b9250602084013567ffffffffffffffff808211156122a257600080fd5b818601915086601f8301126122b657600080fd5b8135818111156122c557600080fd5b87602060a0830285010111156122da57600080fd5b6020830194508093505050509250925092565b6000806040838503121561230057600080fd5b823561230b816120ea565b9150602083013561219b816120ea565b813581556020820135600182015560028101604083013561233b816121a6565b8154606085013561234b816121a6565b61ff0081151560081b1660ff8415151661ffff19841617178455505050505050565b6000806040838503121561238057600080fd5b505080516020909101519092909150565b6000602082840312156123a357600080fd5b81516109e8816120ea565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561049c5761049c6123c4565b6000600182016123ff576123ff6123c4565b5060010190565b60006020828403121561241857600080fd5b81516109e8816121a6565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008261248b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124a257600080fd5b5051919050565b808202811582820484141761049c5761049c6123c4565b8181038181111561049c5761049c6123c4565b60005b838110156124ee5781810151838201526020016124d6565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161252f8160178501602088016124d3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125608160288401602088016124d3565b01602801949350505050565b602081526000825180602084015261258b8160408501602087016124d3565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6000816125c4576125c46123c4565b506000190190565b634e487b7160e01b600052603160045260246000fdfe48c56c0d6590b6240b1a1005717522dced5c82a200c197c7d7ad7bf3660f4194a2646970667358221220296e0cf0dcd63611144d3bdfa5e72d8a05884af0f2d8de184185d57268d2416f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637cc600e4116100b8578063a217fddf1161007c578063a217fddf14610354578063b778c9ee1461035c578063ca15c8731461036f578063d547741f14610382578063db9af1fc14610395578063fc62b0a7146103a857600080fd5b80637cc600e41461028a5780638129fc1c1461029d5780639010d07c146102a557806391d14854146102d0578063966851f1146102e357600080fd5b80632f2ff15d116100ff5780632f2ff15d1461021657806336568abe1461022957806349a1801b1461023c5780634ce945191461024f5780635c975abb1461027f57600080fd5b806301ffc9a71461013c5780631454c1421461016457806314d9db971461017957806322bc8b5d146101d2578063248a9ca3146101e5575b600080fd5b61014f61014a3660046120c0565b610477565b60405190151581526020015b60405180910390f35b6101776101723660046120ff565b6104a2565b005b61018c6101873660046120ff565b610565565b60405161015b9190600060a08201905082518252602083015160208301526040830151604083015260608301511515606083015260808301511515608083015292915050565b6101776101e036600461211c565b6105ff565b6102086101f336600461215d565b60009081526097602052604090206001015490565b60405190815260200161015b565b610177610224366004612176565b610676565b610177610237366004612176565b6106a0565b61017761024a3660046121b4565b61071e565b61014f61025d3660046120ff565b6001600160a01b0316600090815261012e602052604090206003015460ff1690565b60335460ff1661014f565b6101776102983660046121e2565b610766565b6101776108a4565b6102b86102b336600461220e565b6109d0565b6040516001600160a01b03909116815260200161015b565b61014f6102de366004612176565b6109ef565b6103396102f13660046120ff565b6040805180820190915260008082526020820152506001600160a01b031660009081526101306020908152604091829020825180840190935280548352600101549082015290565b6040805182518152602092830151928101929092520161015b565b610208600081565b61017761036a366004612230565b610a1a565b61020861037d36600461215d565b610a49565b610177610390366004612176565b610a60565b6101776103a3366004612265565b610a85565b6104406103b63660046122ed565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03918216600090815261012d602090815260408083209390941682529182528290208251608081018452815481526001820154928101929092526002015460ff80821615159383019390935261010090049091161515606082015290565b60405161015b9190815181526020808301519082015260408083015115159082015260609182015115159181019190915260800190565b60006001600160e01b03198216635a05180f60e01b148061049c575061049c82611361565b92915050565b6000805160206125e38339815191526104ba81611396565b6001600160a01b038216600090815261013060205260409020600181015490541461053e5760405162461bcd60e51b815260206004820152602960248201527f63757272656e7420626174636820686176656e2774206265656e2066756c6c7960448201526808195e1958dd5d195960ba1b60648201526084015b60405180910390fd5b506001600160a01b0316600090815261012e60205260409020600301805461ff0019169055565b61059b6040518060a001604052806000815260200160008152602001600081526020016000151581526020016000151581525090565b506001600160a01b0316600090815261012e6020908152604091829020825160a0810184528154815260018201549281019290925260028101549282019290925260039091015460ff80821615156060840152610100909104161515608082015290565b6001600160a01b038216600090815261012d602090815260408083203384529091529020819061062f828261231b565b5050604080516001600160a01b03841681523360208201527f87ae5ac82b62cc3d79a46528db4091b2c47aa8ab748e1ea48160b5389394d47a910160405180910390a15050565b60008281526097602052604090206001015461069181611396565b61069b83836113a0565b505050565b6001600160a01b03811633146107105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610535565b61071a82826113c2565b5050565b6000805160206125e383398151915261073681611396565b506001600160a01b0391909116600090815261012e60205260409020600301805460ff1916911515919091179055565b6000805160206125e383398151915261077e81611396565b6001600160a01b038316600090815261012e6020526040902060030154610100900460ff16156107e75760405162461bcd60e51b8152602060048201526014602482015273195c1bd8da08185b1c9958591e4818db1bdcd95960621b6044820152606401610535565b600080846001600160a01b0316630e9bf4e46040518163ffffffff1660e01b81526004016040805180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b919061236d565b6001600160a01b03909616600090815261012e602090815260408083206001808201959095559889554260028a01556003909801805461ff00191661010017905561013090529586209485559390930193909355505050565b600054610100900460ff16158080156108c45750600054600160ff909116105b806108de5750303b1580156108de575060005460ff166001145b6109415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610535565b6000805460ff191660011790558015610964576000805461ff0019166101001790555b61096c6113e4565b610974611417565b61097c611445565b61098760003361146e565b80156109cd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600082815260c9602052604081206109e89083611478565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a2581611396565b506001600160a01b03909216600090815261012f6020526040902090815560010155565b600081815260c96020526040812061049c90611484565b600082815260976020526040902060010154610a7b81611396565b61069b83836113c2565b6000805160206125e3833981519152610a9d81611396565b6001600160a01b038416600090815261012e602052604090206003015460ff610100909104161515600114610b0b5760405162461bcd60e51b8152602060048201526014602482015273195c1bd8da081a185d995b89dd0818db1bdcd95960621b6044820152606401610535565b6001600160a01b038416600090815261013060205260409020805460019091015410610b705760405162461bcd60e51b815260206004820152601460248201527318985d18da08199d5b1b1e48195e1958dd5d195960621b6044820152606401610535565b6000846001600160a01b031663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190612391565b90506000856001600160a01b0316632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190612391565b905060008060008060005b88811015610fdc57610d048b8b8b84818110610c6357610c636123ae565b610c7992602060a09092020190810191506120ff565b8c8c85818110610c8b57610c8b6123ae565b905060a00201606001358d8d86818110610ca757610ca76123ae565b905060a0020160200135610cbb91906123da565b8d8d86818110610ccd57610ccd6123ae565b905060a00201608001358e8e87818110610ce957610ce96123ae565b905060a0020160400135610cfd91906123da565b8b8b61148e565b610db98b8b8b84818110610d1a57610d1a6123ae565b610d3092602060a09092020190810191506120ff565b8c8c85818110610d4257610d426123ae565b905060a00201606001358d8d86818110610d5e57610d5e6123ae565b905060a0020160200135610d7291906123da565b8d8d86818110610d8457610d846123ae565b905060a00201608001358e8e87818110610da057610da06123ae565b905060a0020160400135610db491906123da565b611a68565b60008a8a83818110610dcd57610dcd6123ae565b905060a00201608001358b8b84818110610de957610de96123ae565b905060a0020160600135610dfd91906123da565b905060008b8b84818110610e1357610e136123ae565b905060a00201604001358c8c85818110610e2f57610e2f6123ae565b905060a0020160200135610e4391906123da565b905060008c8c85818110610e5957610e596123ae565b905060a00201602001358d8d86818110610e7557610e756123ae565b905060a0020160600135610e8991906123da565b905060008d8d86818110610e9f57610e9f6123ae565b905060a00201604001358e8e87818110610ebb57610ebb6123ae565b905060a0020160800135610ecf91906123da565b9050610edb82886123da565b9650610ee781876123da565b9550610ef3838a6123da565b9850610eff84896123da565b9750610f348f8f8f88818110610f1757610f176123ae565b610f2d92602060a09092020190810191506120ff565b8686611b4a565b8e60008f8f88818110610f4957610f496123ae565b610f5f92602060a09092020190810191506120ff565b6001600160a01b0383811660008181526101306020908152604091829020600101548251938452938516908301528101919091529091507f889f0643d669fbac53cbc7d1826992b9bce1fab5e9644034cffb9c0137fe9dd19060600160405180910390a15050505050508080610fd4906123ed565b915050610c45565b50604051637b85393760e11b8152600481018590526001600160a01b038b169063f70a726e90602401600060405180830381600087803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b5050604051630616b3dd60e21b8152600481018690526001600160a01b038d16925063185acf749150602401600060405180830381600087803b15801561107957600080fd5b505af115801561108d573d6000803e3d6000fd5b5050604051631d514ebd60e11b815260006004820152602481018590526001600160a01b038d169250633aa29d7a9150604401600060405180830381600087803b1580156110da57600080fd5b505af11580156110ee573d6000803e3d6000fd5b50505050816000146111bc57896001600160a01b0316636456a3ee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115c9190612391565b6001600160a01b031663d7d55a4a836040518263ffffffff1660e01b815260040161118991815260200190565b600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050505b801561128457896001600160a01b031663221dc5936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190612391565b6001600160a01b031663d7d55a4a826040518263ffffffff1660e01b815260040161125191815260200190565b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050505b896001600160a01b03166349110ac46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190612406565b6113285760405162461bcd60e51b8152602060048201526013602482015272657863656564206d696e46697273744c6f737360681b6044820152606401610535565b6001600160a01b038a16600090815261013060205260408120600101805491611350836123ed565b919050555050505050505050505050565b60006001600160e01b03198216637965db0b60e01b148061049c57506301ffc9a760e01b6001600160e01b031983161461049c565b6109cd8133611c36565b6113aa8282611c8f565b600082815260c96020526040902061069b9082611d15565b6113cc8282611d2a565b600082815260c96020526040902061069b9082611d91565b600054610100900460ff1661140b5760405162461bcd60e51b815260040161053590612423565b6033805460ff19169055565b600054610100900460ff1661143e5760405162461bcd60e51b815260040161053590612423565b600160fb55565b600054610100900460ff1661146c5760405162461bcd60e51b815260040161053590612423565b565b61071a82826113a0565b60006109e88383611da6565b600061049c825490565b6001600160a01b03808716600090815261012d6020908152604080832093891683529290522054841115806114ec57506001600160a01b03808716600090815261012d602090815260408083209389168352929052206002015460ff165b6115445760405162461bcd60e51b8152602060048201526024808201527f736f7420636c61696d20616d6f756e7420626967676572207468616e206f7264604482015263195c995960e21b6064820152608401610535565b6001600160a01b03808716600090815261012d6020908152604080832093891683529290522060010154831115806115aa57506001600160a01b03868116600090815261012d6020908152604080832093891683529290522060020154610100900460ff165b6116025760405162461bcd60e51b8152602060048201526024808201527f6a6f7420636c61696d20616d6f756e7420626967676572207468616e206f7264604482015263195c995960e21b6064820152608401610535565b6001600160a01b038616600090815261012e602052604081205481901561164a576001600160a01b038816600090815261012e6020526040902054611647908761246e565b91505b6001600160a01b038816600090815261012e602052604090206001015415611696576001600160a01b038816600090815261012e6020526040902060010154611693908661246e565b90505b6001600160a01b0384161561176657604051636eb1769f60e11b81526001600160a01b03888116600483015230602483015283919086169063dd62ed3e90604401602060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117189190612490565b10156117665760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420656e6f75676820736f7420746f6b656e20616c6c6f77616e636500006044820152606401610535565b6001600160a01b0383161561183657604051636eb1769f60e11b81526001600160a01b03888116600483015230602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e89190612490565b10156118365760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420656e6f756768206a6f7420746f6b656e20616c6c6f77616e636500006044820152606401610535565b60008211801561184e57506001600160a01b03841615155b1561194a576001600160a01b0384166323b872dd883061187686670de0b6b3a76400006124a9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ee9190612406565b50604051630852cd8d60e31b8152600481018390526001600160a01b038516906342966c6890602401600060405180830381600087803b15801561193157600080fd5b505af1158015611945573d6000803e3d6000fd5b505050505b60008111801561196257506001600160a01b03831615155b15611a5e576001600160a01b0383166323b872dd883061198a85670de0b6b3a76400006124a9565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156119de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a029190612406565b50604051630852cd8d60e31b8152600481018290526001600160a01b038416906342966c6890602401600060405180830381600087803b158015611a4557600080fd5b505af1158015611a59573d6000803e3d6000fd5b505050505b5050505050505050565b6001600160a01b03808516600090815261012d60209081526040808320938716835292905220548211611ad3576001600160a01b03808516600090815261012d6020908152604080832093871683529290529081208054849290611acd9084906124c0565b90915550505b6001600160a01b03808516600090815261012d60209081526040808320938716835292905220600101548111611b44576001600160a01b03808516600090815261012d6020908152604080832093871683529290529081206001018054839290611b3e9084906124c0565b90915550505b50505050565b6001600160a01b038416600090815261012f6020526040812060010154421015611bac57611b7b61271060646124a9565b6001600160a01b038616600090815261012f6020526040902054611b9f90856124a9565b611ba9919061246e565b90505b6001600160a01b038516637f3bd56e8583611bc786886123da565b611bd191906124c0565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611c1757600080fd5b505af1158015611c2b573d6000803e3d6000fd5b505050505050505050565b611c4082826109ef565b61071a57611c4d81611dd0565b611c58836020611de2565b604051602001611c699291906124f7565b60408051601f198184030181529082905262461bcd60e51b82526105359160040161256c565b611c9982826109ef565b61071a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cd13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109e8836001600160a01b038416611f7e565b611d3482826109ef565b1561071a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109e8836001600160a01b038416611fcd565b6000826000018281548110611dbd57611dbd6123ae565b9060005260206000200154905092915050565b606061049c6001600160a01b03831660145b60606000611df18360026124a9565b611dfc9060026123da565b67ffffffffffffffff811115611e1457611e1461259f565b6040519080825280601f01601f191660200182016040528015611e3e576020820181803683370190505b509050600360fc1b81600081518110611e5957611e596123ae565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e8857611e886123ae565b60200101906001600160f81b031916908160001a9053506000611eac8460026124a9565b611eb79060016123da565b90505b6001811115611f2f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611eeb57611eeb6123ae565b1a60f81b828281518110611f0157611f016123ae565b60200101906001600160f81b031916908160001a90535060049490941c93611f28816125b5565b9050611eba565b5083156109e85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610535565b6000818152600183016020526040812054611fc55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561049c565b50600061049c565b600081815260018301602052604081205480156120b6576000611ff16001836124c0565b8554909150600090612005906001906124c0565b905081811461206a576000866000018281548110612025576120256123ae565b9060005260206000200154905080876000018481548110612048576120486123ae565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061207b5761207b6125cc565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061049c565b600091505061049c565b6000602082840312156120d257600080fd5b81356001600160e01b0319811681146109e857600080fd5b6001600160a01b03811681146109cd57600080fd5b60006020828403121561211157600080fd5b81356109e8816120ea565b60008082840360a081121561213057600080fd5b833561213b816120ea565b92506080601f198201121561214f57600080fd5b506020830190509250929050565b60006020828403121561216f57600080fd5b5035919050565b6000806040838503121561218957600080fd5b82359150602083013561219b816120ea565b809150509250929050565b80151581146109cd57600080fd5b600080604083850312156121c757600080fd5b82356121d2816120ea565b9150602083013561219b816121a6565b600080604083850312156121f557600080fd5b8235612200816120ea565b946020939093013593505050565b6000806040838503121561222157600080fd5b50508035926020909101359150565b60008060006060848603121561224557600080fd5b8335612250816120ea565b95602085013595506040909401359392505050565b60008060006040848603121561227a57600080fd5b8335612285816120ea565b9250602084013567ffffffffffffffff808211156122a257600080fd5b818601915086601f8301126122b657600080fd5b8135818111156122c557600080fd5b87602060a0830285010111156122da57600080fd5b6020830194508093505050509250925092565b6000806040838503121561230057600080fd5b823561230b816120ea565b9150602083013561219b816120ea565b813581556020820135600182015560028101604083013561233b816121a6565b8154606085013561234b816121a6565b61ff0081151560081b1660ff8415151661ffff19841617178455505050505050565b6000806040838503121561238057600080fd5b505080516020909101519092909150565b6000602082840312156123a357600080fd5b81516109e8816120ea565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561049c5761049c6123c4565b6000600182016123ff576123ff6123c4565b5060010190565b60006020828403121561241857600080fd5b81516109e8816121a6565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008261248b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124a257600080fd5b5051919050565b808202811582820484141761049c5761049c6123c4565b8181038181111561049c5761049c6123c4565b60005b838110156124ee5781810151838201526020016124d6565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161252f8160178501602088016124d3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125608160288401602088016124d3565b01602801949350505050565b602081526000825180602084015261258b8160408501602087016124d3565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6000816125c4576125c46123c4565b506000190190565b634e487b7160e01b600052603160045260246000fdfe48c56c0d6590b6240b1a1005717522dced5c82a200c197c7d7ad7bf3660f4194a2646970667358221220296e0cf0dcd63611144d3bdfa5e72d8a05884af0f2d8de184185d57268d2416f64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "closeEpoch(address,uint256)": {
        "params": {
          "pool": "address of corresponding pool"
        }
      },
      "createOrder(address,(uint256,uint256,bool,bool))": {
        "params": {
          "order": "the information of the withdraw order",
          "pool": "address of the pool"
        }
      },
      "executeOrders(address,(address,uint256,uint256,uint256,uint256)[])": {
        "params": {
          "executionOrders": "batch of execution orders",
          "pool": "address of the target pool"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setFeeInfor(address,uint256,uint256)": {
        "params": {
          "_feePercentage": "the fee percentage that will be charge if user withdraw their capital before commitment period end",
          "_freeTimestamp": "the timestamp where commitment period end",
          "pool": "pool address"
        }
      },
      "setPoolRedeemDisabled(address,bool)": {
        "params": {
          "_redeemDisabled": "pool's redeemability",
          "pool": "pool address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeEpoch(address,uint256)": {
        "notice": "Close the epoch and snapshot the NoteToken prices at that moment"
      },
      "createOrder(address,(uint256,uint256,bool,bool))": {
        "notice": "Create an order in currency amount"
      },
      "executeOrders(address,(address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Receive the information and execution the epoch"
      },
      "setFeeInfor(address,uint256,uint256)": {
        "notice": "Set the parameter for fee calculation of a pool"
      },
      "setPoolRedeemDisabled(address,bool)": {
        "notice": "Set pool's availability to redeem"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1564,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 900,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1005,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1837,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3147_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 1089,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4591,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "orders",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Order)4552_storage))"
      },
      {
        "astId": 4596,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "epochInfor",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_struct(EpochInfor)4574_storage)"
      },
      {
        "astId": 4601,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "fees",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_struct(FeeInfor)4584_storage)"
      },
      {
        "astId": 4606,
        "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
        "label": "batchInfor",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_struct(BatchInfor)4579_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Order)4552_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct NoteTokenVault.Order))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Order)4552_storage)"
      },
      "t_mapping(t_address,t_struct(BatchInfor)4579_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NoteTokenVault.BatchInfor)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchInfor)4579_storage"
      },
      "t_mapping(t_address,t_struct(EpochInfor)4574_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NoteTokenVault.EpochInfor)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochInfor)4574_storage"
      },
      "t_mapping(t_address,t_struct(FeeInfor)4584_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NoteTokenVault.FeeInfor)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfor)4584_storage"
      },
      "t_mapping(t_address,t_struct(Order)4552_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NoteTokenVault.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)4552_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3147_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3147_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3147_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3146,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2832_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BatchInfor)4579_storage": {
        "encoding": "inplace",
        "label": "struct NoteTokenVault.BatchInfor",
        "members": [
          {
            "astId": 4576,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "batchSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4578,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "executed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(EpochInfor)4574_storage": {
        "encoding": "inplace",
        "label": "struct NoteTokenVault.EpochInfor",
        "members": [
          {
            "astId": 4565,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "sotPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4567,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "jotPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4569,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4571,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "redeemDisabled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4573,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "epochClosed",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FeeInfor)4584_storage": {
        "encoding": "inplace",
        "label": "struct NoteTokenVault.FeeInfor",
        "members": [
          {
            "astId": 4581,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "feePercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4583,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "freeTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Order)4552_storage": {
        "encoding": "inplace",
        "label": "struct NoteTokenVault.Order",
        "members": [
          {
            "astId": 4545,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "sotCurrencyAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4547,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "jotCurrencyAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4549,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "allSOTIncomeOnly",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4551,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "allJOTIncomeOnly",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2832_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2827,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2831,
            "contract": "contracts/protocol/pool/NoteTokenVault.sol:NoteTokenVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}