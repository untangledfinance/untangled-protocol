{
  "address": "0xcB61E96abc7fb5eD12073958109AD2f9636bf266",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "futureValue",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "risk",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termStartUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termEndUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum UnpackLoanParamtersLib.AmortizationUnitType",
              "name": "amortizationUnitType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "termLengthInAmortizationUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.NFTDetails",
          "name": "nftdetails",
          "type": "tuple"
        }
      ],
      "name": "AddLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate_",
          "type": "uint256"
        }
      ],
      "name": "SetLoanMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "risk",
          "type": "uint256"
        }
      ],
      "name": "UpdateAssetRiskScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "writeOffGroupsIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "override_",
          "type": "bool"
        }
      ],
      "name": "WriteOff",
      "type": "event"
    }
  ],
  "transactionHash": "0x7071cbcef4f435c91f02f89c751428384a53765fd14cc305f5791d66cc380552",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xcB61E96abc7fb5eD12073958109AD2f9636bf266",
    "transactionIndex": 0,
    "gasUsed": "3173527",
    "logsBloom": "0x
    "blockHash": "0x36a596b9ae3b9e39134326b4af6e4737f830e248d802cc26cd8f31c26421d53b",
    "transactionHash": "0x7071cbcef4f435c91f02f89c751428384a53765fd14cc305f5791d66cc380552",
    "logs": [],
    "blockNumber": 22657233,
    "cumulativeGasUsed": "3173527",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d0baee6f40bb1b66d70e754b821a78e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"futureValue\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"risk\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termStartUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum UnpackLoanParamtersLib.AmortizationUnitType\",\"name\":\"amortizationUnitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.NFTDetails\",\"name\":\"nftdetails\",\"type\":\"tuple\"}],\"name\":\"AddLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate_\",\"type\":\"uint256\"}],\"name\":\"SetLoanMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"name\":\"UpdateAssetRiskScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"writeOffGroupsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"override_\",\"type\":\"bool\"}],\"name\":\"WriteOff\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"kind\":\"dev\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"params\":{\"name\":\"name of the parameter\",\"value\":\"new value of the parameter\"}},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"name\":\"name of the parameter group\",\"overdueDays_\":\"the number of days after which a loan is considered overdue\",\"writeOffPercentage_\":\"the write off rate in percent\"}},\"repayLoan(DataTypes.Storage storage,uint256,uint256)\":{\"params\":{\"amount\":\"the amount repaid\",\"loan\":\"the id of the loan\"}},\"writeOff(DataTypes.Storage storage,uint256)\":{\"params\":{\"loan\":\"the id of the loan\"}}},\"title\":\"Untangled's SecuritizaionPoolNAV contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLoan(DataTypes.Storage storage,uint256,DataTypes.LoanEntry)\":{\"notice\":\"UTILITY FUNCTION \"},\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"repayLoan(DataTypes.Storage storage,uint256,uint256)\":{\"notice\":\"repay updates the NAV for a new repaid loan\"},\"writeOff(DataTypes.Storage storage,uint256)\":{\"notice\":\"writeOff writes off a loan if it is overdue\"}},\"notice\":\"Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/PoolNAVLogic.sol\":\"PoolNAVLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title Configuration\\n/// @author Untangled Team\\nlibrary Configuration {\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\n    // You can rename or append. But NEVER change the order.\\n    enum CONTRACT_TYPE {\\n        SECURITIZATION_MANAGER,\\n        SECURITIZATION_POOL,\\n        NOTE_TOKEN_FACTORY,\\n        TOKEN_GENERATION_EVENT_FACTORY,\\n        DISTRIBUTION_ASSESSOR,\\n        LOAN_ASSET_TOKEN,\\n        LOAN_KERNEL,\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\n        GO,\\n        NOTE_TOKEN_VAULT\\n    }\\n\\n    enum NOTE_TOKEN_TYPE {\\n        SENIOR,\\n        JUNIOR\\n    }\\n\\n    enum ASSET_PURPOSE {\\n        LOAN,\\n        INVOICE\\n    }\\n}\\n\",\"keccak256\":\"0x1874e4d4425c10a717621040e9da43851b9c9826211c9929cd21b701729dfe4e\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// import '../storage/Registry.sol';\\nimport './Configuration.sol';\\nimport './UnpackLoanParamtersLib.sol';\\n\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\nbytes32 constant POOL_ADMIN = keccak256('POOL_CREATOR');\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\n\\nbytes32 constant BACKEND_ADMIN = keccak256('BACKEND_ADMIN');\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\n\\n// In PoolNAV we use this\\nbytes32 constant POOL = keccak256('POOL');\\n\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\nuint256 constant ONE = 10 ** 27;\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\nbytes32 constant VALIDATOR_ADMIN_ROLE = keccak256('VALIDATOR_ADMIN_ROLE');\\n\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\nlibrary DataTypes {\\n    struct NoteToken {\\n        address poolAddress;\\n        address noteTokenAddress;\\n        uint256 balance;\\n        uint256 apy;\\n    }\\n    struct RiskScore {\\n        uint32 daysPastDue;\\n        uint32 advanceRate;\\n        uint32 penaltyRate;\\n        uint32 interestRate;\\n        uint32 probabilityOfDefault;\\n        uint32 lossGivenDefault;\\n        uint32 writeOffAfterGracePeriod;\\n        uint32 gracePeriod;\\n        uint32 collectionPeriod;\\n        uint32 writeOffAfterCollectionPeriod;\\n        uint32 discountRate;\\n    }\\n\\n    struct LoanEntry {\\n        address debtor;\\n        address principalTokenAddress;\\n        bytes32 termsParam; // actually inside this param was already included P token address\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        uint8 riskScore;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n    }\\n    struct NFTAsset {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    enum CycleState {\\n        INITIATED,\\n        CROWDSALE,\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    struct NewPoolParams {\\n        address currency;\\n        uint32 minFirstLossCushion;\\n        bool validatorRequired;\\n        uint256 debtCeiling;\\n    }\\n\\n    /// @notice details of the underlying collateral\\n    struct NFTDetails {\\n        uint128 futureValue;\\n        uint128 maturityDate;\\n        uint128 risk;\\n        address debtor;\\n        address principalTokenAddress;\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n        bytes32 termsParam;\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 interestRate;\\n    }\\n\\n    /// @notice stores all needed information of an interest rate group\\n    struct Rate {\\n        // total debt of all loans with this rate\\n        uint256 pie;\\n        // accumlated rate index over time\\n        uint256 chi;\\n        // interest rate per second\\n        uint256 ratePerSecond;\\n        // penalty rate per second\\n        uint256 penaltyRatePerSecond;\\n        // accumlated penalty rate index over time\\n        uint256 penaltyChi;\\n        // last time the rate was accumulated\\n        uint48 lastUpdated;\\n        // time start to penalty\\n        uint48 timeStartPenalty;\\n    }\\n\\n    /// @notice details of the loan\\n    struct LoanDetails {\\n        uint128 borrowed;\\n        // only auth calls can move loan into different writeOff group\\n        bool authWriteOff;\\n    }\\n\\n    /// @notice details of the write off group\\n    struct WriteOffGroup {\\n        // denominated in (10^27)\\n        uint128 percentage;\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\n        uint128 overdueDays;\\n        uint128 riskIndex;\\n    }\\n\\n    struct Storage {\\n        bool validatorRequired;\\n        uint64 firstAssetTimestamp;\\n        RiskScore[] riskScores;\\n        NFTAsset[] nftAssets;\\n        address[] tokenAssetAddresses;\\n        mapping(address => bool) existsTokenAssetAddress;\\n        // TGE\\n        address tgeAddress;\\n        address secondTGEAddress;\\n        address sotToken;\\n        address jotToken;\\n        address underlyingCurrency;\\n        uint256 reserve; // Money in pool\\n        uint32 minFirstLossCushion;\\n        uint64 openingBlockTimestamp;\\n        // by default it is address(this)\\n        address pot;\\n        // for base (sell-loan) operation\\n        uint256 paidPrincipalAmountSOT;\\n        uint32 interestRateSOT; // Annually, support 4 decimals num\\n        uint256 totalAssetRepaidCurrency;\\n        mapping(address => uint256) paidPrincipalAmountSOTByInvestor;\\n        uint256 debtCeiling;\\n        CycleState state;\\n        // lock distribution\\n        mapping(address => mapping(address => uint256)) lockedDistributeBalances;\\n        uint256 totalLockedDistributeBalance;\\n        mapping(address => mapping(address => uint256)) lockedRedeemBalances;\\n        // token address -> total locked\\n        mapping(address => uint256) totalLockedRedeemBalances;\\n        uint256 totalRedeemedCurrency; // Total $ (cUSD) has been redeemed\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\n        mapping(uint256 => Rate) rates;\\n        mapping(uint256 => uint256) pie;\\n        /// @notice mapping from loan => rate\\n        mapping(uint256 => uint256) loanRates;\\n        /// @notice mapping from loan => grace time\\n\\n        uint256 loanCount;\\n        mapping(uint256 => uint256) balances;\\n        uint256 balance;\\n        // nft => details\\n        mapping(bytes32 => NFTDetails) details;\\n        // loan => details\\n        mapping(uint256 => LoanDetails) loanDetails;\\n        // timestamp => bucket\\n        mapping(uint256 => uint256) buckets;\\n        WriteOffGroup[] writeOffGroups;\\n        // Write-off groups will be added as rate groups to the pile with their index\\n        // in the writeOffGroups array + this number\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\n        // The discount decreases with the maturityDate approaching.\\n        // denominated in (10^27)\\n        uint256 discountRate;\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\n        uint256 latestNAV;\\n        uint256 latestDiscount;\\n        uint256 lastNAVUpdate;\\n        // overdue loans are loans which passed the maturity date but are not written-off\\n        uint256 overdueLoans;\\n        // tokenId => latestDiscount\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\n        mapping(uint256 => bytes32) loanToNFT;\\n        // value to view\\n        uint256 totalPrincipalRepaid;\\n        uint256 totalInterestRepaid;\\n    }\\n    struct LoanAssetInfo {\\n        uint256[] tokenIds;\\n        uint256[] nonces;\\n        address validator;\\n        bytes validateSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xb7201503046da1524ef2a79b156eed5c0a91d713d5b77e0e0ac386d5d0399f8c\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport './Math.sol';\\n\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\nlibrary Discounting{\\n    /// @notice calculates the discount for a given loan\\n    /// @param discountRate the discount rate\\n    /// @param fv the future value of the loan\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\n    /// @param maturityDate the maturity date of the loan\\n    /// @return result discount for the loan\\n    function calcDiscount(\\n        uint256 discountRate,\\n        uint256 fv,\\n        uint256 normalizedBlockTimestamp,\\n        uint256 maturityDate\\n    ) internal pure returns (uint256 result) {\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\n    }\\n\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\n    /// @param loanInterestRate the interest rate of the loan\\n    /// @param amount of the loan (principal)\\n    /// @param maturityDate the maturity date of the loan\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\n    /// @return fv future value of the loan\\n    function calcFutureValue(\\n        uint256 loanInterestRate,\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 recoveryRatePD\\n    ) internal view returns (uint256 fv) {\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\n        uint256 timeRemaining = 0;\\n        if (maturityDate > nnow) {\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\n        }\\n\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\n    }\\n\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\n    /// @param x the first value (minuend)\\n    /// @param y the second value (subtrahend)\\n    /// @return result result of the subtraction\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (y > x) {\\n            return 0;\\n        }\\n        return Math.safeSub(x, y);\\n    }\\n\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\n    /// @param timestamp the timestamp which should be normalized\\n    /// @return nTimestamp normalized timestamp\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\n        return (1 days) * (timestamp / (1 days));\\n    }\\n\\n    /// @notice rpow peforms a math pow operation with fixed point number\\n    /// adopted from ds-math\\n    /// @param x the base for the pow operation\\n    /// @param n the exponent for the pow operation\\n    /// @param base the base of the fixed point number\\n    /// @return z the result of the pow operation\\n\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(base, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c09baef5bd2f51ed8e4bb1349e36311026fa024c0f78aab90a915f31a4b109f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// tinlake-math/math.sol -- Tinlake Math\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nlibrary Math {\\n    uint256 constant ONE = 10 ** 27;\\n\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'safe-add-failed');\\n    }\\n\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'safe-sub-failed');\\n    }\\n\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\n    }\\n\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\n        z = x / y;\\n    }\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = safeMul(x, y) / ONE;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        require(y > 0, 'division by zero');\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\n    }\\n\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\n        require(y > 0, 'division by zero');\\n        // always rounds up\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xe54a76a0187d338f79a8d84f2cfacda9473be91401dadbe5bcb7ae6e7b39c77b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.10;\\n\\nlibrary UnpackLoanParamtersLib {\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    /**\\n     *\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\n     */\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\n        return uint256(value) / 2 ** amount;\\n    }\\n\\n    /**\\n     * Unpack parameters from packed bytes32 data\\n     */\\n    function _unpackLoanTermsParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters &\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters &\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters &\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n            _bitShiftRight(principalAmountShifted, 152),\\n            _bitShiftRight(interestRateShifted, 128),\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\n        );\\n    }\\n\\n    /**\\n     * Unpack data from hex string which including informations about Loan\\n     */\\n    function unpackParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\n    }\\n}\\n\",\"keccak256\":\"0x2a8c8c03b60f1e569f20ef15c5439074ac43b6824bb143526f08a332447d0f54\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General internal License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General internal License for more details.\\n//\\n// You should have received a copy of the GNU Affero General internal License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\nimport '../UnpackLoanParamtersLib.sol';\\nimport {DataTypes} from '../DataTypes.sol';\\nimport {Math} from '../Math.sol';\\nimport {Discounting} from '../Discounting.sol';\\n/**\\n * @title Untangled's SecuritizaionPoolNAV contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Untangled Team\\n */\\nlibrary GenericLogic {\\n    uint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\n\\n    /** GETTER */\\n    /// @notice getter function for the maturityDate\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return maturityDate_ the maturityDate of the nft\\n    function maturityDate(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 nft_\\n    ) internal view returns (uint256 maturityDate_) {\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\n    }\\n\\n    /// @notice getter function for the risk group\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return risk_ the risk group of the nft\\n\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\n        return uint256(_poolStorage.details[nft_].risk);\\n    }\\n\\n    /// @notice getter function for the nft value\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return nftValue_ the value of the nft\\n\\n    /// @notice getter function for the future value\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return fv_ future value of the loan\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\n        return uint256(_poolStorage.details[nft_].futureValue);\\n    }\\n\\n    // function discountRate() internal view  returns (uint256) {\\n    //     return uint256(_getStorage().discountRate);\\n    // }\\n\\n    /// @notice getter function for the recovery rate PD\\n    /// @param riskID id of a risk group\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\n    function recoveryRatePD(\\n        DataTypes.RiskScore[] storage riskScores,\\n        uint256 riskID,\\n        uint256 termLength\\n    ) internal view returns (uint256 recoveryRatePD_) {\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\n        return\\n            Math.ONE -\\n            (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\n            (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\n    }\\n\\n    /// @notice getter function for the borrowed amount\\n    /// @param loan id of a loan\\n    /// @return borrowed_ borrowed amount of the loan\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\n    }\\n\\n    /** UTILITY FUNCTION */\\n    // TODO have to use modifier in main contract\\n    function getRiskScoreByIdx(\\n        DataTypes.RiskScore[] storage riskScores,\\n        uint256 idx\\n    ) internal view returns (DataTypes.RiskScore memory) {\\n        if (idx == 0 || riskScores.length == 0) {\\n            // Default risk score\\n            return\\n                DataTypes.RiskScore({\\n                    daysPastDue: 0,\\n                    advanceRate: 1000000,\\n                    penaltyRate: 0,\\n                    interestRate: 0,\\n                    probabilityOfDefault: 0,\\n                    lossGivenDefault: 0,\\n                    writeOffAfterGracePeriod: 0,\\n                    gracePeriod: 0,\\n                    collectionPeriod: 0,\\n                    writeOffAfterCollectionPeriod: 0,\\n                    discountRate: 0\\n                });\\n        }\\n        // Because risk score upload = risk score index onchain + 1\\n        idx = idx - 1;\\n        return riskScores[idx];\\n    }\\n\\n    /// @notice converts a uint256 to uint128\\n    /// @param value the value to be converted\\n    /// @return converted value to uint128\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n    // TODO have to use modifier in main contract\\n\\n    /// @notice returns if a loan is written off\\n    /// @param loan the id of the loan\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\n    }\\n\\n    /// @notice calculates and returns the current NAV\\n    /// @return nav_ current NAV\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\n    }\\n\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\n    }\\n\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\n    /// @return totalDiscount the present value of the loans\\n    /// @return overdue the present value of the overdue loans\\n    /// @return writeOffs the present value of the written off loans\\n    function currentPVs(\\n        DataTypes.Storage storage _poolStorage\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\n        uint256 latestDiscount;\\n        uint256 overdueLoans;\\n        uint256 discountRate;\\n        uint256 lastNAVUpdate;\\n        {\\n            latestDiscount = _poolStorage.latestDiscount;\\n            overdueLoans = _poolStorage.overdueLoans;\\n            discountRate = _poolStorage.discountRate;\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\n        }\\n        if (latestDiscount == 0) {\\n            // all loans are overdue or writtenOff\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\n        }\\n\\n        uint256 errPV = 0;\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // find all new overdue loans since the last update\\n        // calculate the discount of the overdue loans which is needed\\n        // for the total discount calculation\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\n            uint256 b = _poolStorage.buckets[i];\\n            if (b != 0) {\\n                errPV = Math.safeAdd(\\n                    errPV,\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\n                );\\n                overdue = Math.safeAdd(overdue, b);\\n            }\\n        }\\n\\n        return (\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\n            Discounting.secureSub(\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\n                errPV\\n            ),\\n            // current overdue loans not written off\\n            Math.safeAdd(overdueLoans, overdue),\\n            // current write-offs loans\\n            currentWriteOffs(_poolStorage)\\n        );\\n    }\\n\\n    function currentAV(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 tokenId\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\n        uint256 _currentWriteOffs = 0;\\n        uint256 discountRate;\\n        uint256 latestDiscountOfNavAssetsID;\\n        uint256 lastNAVUpdate;\\n        uint256 overdueLoansOfNavAssetsID;\\n        {\\n            discountRate = _poolStorage.discountRate;\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\n        }\\n\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\n            _currentWriteOffs = Math.rmul(\\n                debt(_poolStorage, uint256(tokenId)),\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\n            );\\n        }\\n\\n        if (latestDiscountOfNavAssetsID == 0) {\\n            // all loans are overdue or writtenOff\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\n        }\\n\\n        uint256 errPV = 0;\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // loan is overdue since lastNAVUpdate\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\n            uint256 b = futureValue(_poolStorage, tokenId);\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\n            overdue = b;\\n        }\\n\\n        return (\\n            Discounting.secureSub(\\n                Math.rmul(\\n                    latestDiscountOfNavAssetsID,\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\n                ),\\n                errPV\\n            ),\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\n            _currentWriteOffs\\n        );\\n    }\\n\\n    /// @notice returns the sum of all write off loans\\n    /// @return sum of all write off loans\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\n            // multiply writeOffGroupDebt with the writeOff rate\\n\\n            sum = Math.safeAdd(\\n                sum,\\n                Math.rmul(\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\n                )\\n            );\\n        }\\n        return sum;\\n    }\\n\\n    /// @notice calculates and returns the current NAV and updates the state\\n    /// @return nav_ current NAV\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\n\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\n\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\n        }\\n\\n        _poolStorage.overdueLoans = overdue;\\n        _poolStorage.latestDiscount = totalDiscount;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\n        return _poolStorage.latestNAV;\\n    }\\n\\n    /// @notice re-calculates the nav in a non-optimized way\\n    ///  the method is not updating the NAV to latest block.timestamp\\n    /// @return nav_ current NAV\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\n        // reCalcTotalDiscount\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\n        /// @return latestDiscount_ returns the total discount of the active loans\\n        uint256 latestDiscount_ = 0;\\n        for (uint256 loanID = 1; loanID < _poolStorage.loanCount; loanID++) {\\n            bytes32 nftID_ = nftID(loanID);\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\n\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\n                continue;\\n            }\\n\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\n                _poolStorage.discountRate,\\n                futureValue(_poolStorage, nftID_),\\n                _poolStorage.lastNAVUpdate,\\n                maturityDate_\\n            );\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\n        }\\n\\n        _poolStorage.latestNAV = Math.safeAdd(\\n            latestDiscount_,\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\n        );\\n        _poolStorage.latestDiscount = latestDiscount_;\\n\\n        return _poolStorage.latestNAV;\\n    }\\n\\n    /// @notice returns the nftID for the underlying collateral nft\\n    /// @param loan the loan id\\n    /// @return nftID_ the nftID of the loan\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\n        return bytes32(loan);\\n    }\\n\\n    /// @notice returns the current valid write off group of a loan\\n    /// @param loan the loan id\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\n    function currentValidWriteOffGroup(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan\\n    ) internal view returns (uint256 writeOffGroup_) {\\n        bytes32 nftID_ = nftID(loan);\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\n\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\n\\n        uint128 lastValidWriteOff = type(uint128).max;\\n        uint128 highestOverdueDays = 0;\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\n            if (\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\n                overdueDays >= highestOverdueDays &&\\n                nnow >= maturityDate_ + overdueDays * 1 days\\n            ) {\\n                lastValidWriteOff = i;\\n                highestOverdueDays = overdueDays;\\n            }\\n        }\\n\\n        // returns type(uint128).max if no write-off group is valid for this loan\\n        return lastValidWriteOff;\\n    }\\n\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\n            chi_ = chargeInterest(\\n                _poolStorage.rates[rate_].chi,\\n                _poolStorage.rates[rate_].ratePerSecond,\\n                _poolStorage.rates[rate_].lastUpdated\\n            );\\n            penaltyChi_ = chargeInterest(\\n                _poolStorage.rates[rate_].penaltyChi,\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\n                _poolStorage.rates[rate_].lastUpdated\\n            );\\n        }\\n\\n        if (penaltyChi_ == 0) {\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\n        } else {\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\n        }\\n    }\\n\\n    function debtWithChi(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 chi,\\n        uint256 penaltyChi\\n    ) internal view returns (uint256 loanDebt) {\\n        if (penaltyChi == 0) {\\n            return toAmount(chi, _poolStorage.pie[loan]);\\n        } else {\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\n        }\\n    }\\n\\n    function chiAndPenaltyChi(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\n        chi = _poolStorage.rates[rate_].chi;\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\n    }\\n\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\n\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\n            chi_ = chargeInterest(\\n                _poolStorage.rates[rate].chi,\\n                _poolStorage.rates[rate].ratePerSecond,\\n                _poolStorage.rates[rate].lastUpdated\\n            );\\n            penaltyChi_ = chargeInterest(\\n                _poolStorage.rates[rate].penaltyChi,\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\n                _poolStorage.rates[rate].lastUpdated\\n            );\\n        }\\n\\n        if (penaltyChi_ == 0) {\\n            return toAmount(chi_, pie_);\\n        } else {\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\n        }\\n    }\\n\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\n        // rate category has to be initiated\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\n        _poolStorage.loanRates[loan] = rate;\\n        emit SetRate(nftID(loan), rate);\\n    }\\n\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\n        }\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\n        drip(_poolStorage, currentRate);\\n        drip(_poolStorage, newRate);\\n        uint256 pie_ = _poolStorage.pie[loan];\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\n        _poolStorage.loanRates[loan] = newRate;\\n        emit ChangeRate(nftID(loan), newRate);\\n    }\\n\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\n    }\\n\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\n            (uint256 chi, ) = compounding(\\n                _poolStorage.rates[rate].chi,\\n                _poolStorage.rates[rate].ratePerSecond,\\n                _poolStorage.rates[rate].lastUpdated,\\n                _poolStorage.rates[rate].pie\\n            );\\n            _poolStorage.rates[rate].chi = chi;\\n            if (\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\n            ) {\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\n                    ? _poolStorage.rates[rate].lastUpdated\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\n                (uint256 penaltyChi, ) = compounding(\\n                    _poolStorage.rates[rate].penaltyChi,\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\n                    lastUpdated_,\\n                    _poolStorage.rates[rate].pie\\n                );\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\n            }\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n        }\\n    }\\n\\n    /// Interest functions\\n    // @notice This function provides compounding in seconds\\n    // @param chi Accumulated interest rate over time\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\n    // @param lastUpdated When the interest rate was last updated\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\n        require(chi != 0);\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\n    }\\n\\n    // @notice This function charge interest on a interestBearingAmount\\n    // @param interestBearingAmount is the interest bearing amount\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\n    // @param lastUpdated last time the interest has been charged\\n    // @return interestBearingAmount + interest\\n    function chargeInterest(\\n        uint interestBearingAmount,\\n        uint ratePerSecond,\\n        uint lastUpdated\\n    ) internal view returns (uint) {\\n        if (block.timestamp >= lastUpdated) {\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\n        }\\n        return interestBearingAmount;\\n    }\\n\\n    function _chargeInterest(\\n        uint interestBearingAmount,\\n        uint ratePerSecond,\\n        uint lastUpdated,\\n        uint current\\n    ) internal pure returns (uint) {\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\n    }\\n\\n    // convert pie to debt/savings amount\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\n        return Math.rmul(_pie, chi);\\n    }\\n\\n    // convert debt/savings amount to pie\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\n        return Math.rdivup(amount, chi);\\n    }\\n\\n    function getAsset(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 agreementId\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\n        return _poolStorage.details[agreementId];\\n    }\\n\\n    /// @param amortizationUnitType AmortizationUnitType enum\\n    /// @return the corresponding length of the unit in seconds\\n    function _getAmortizationUnitLengthInSeconds(\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\n    ) private pure returns (uint256) {\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\n            return 1 minutes;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\n            return 1 hours;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\n            return 1 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\n            return 7 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\n            return 30 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\n            return 365 days;\\n        } else {\\n            revert('Unknown amortization unit type.');\\n        }\\n    }\\n\\n    /**\\n     *   Get parameters by Agreement ID (commitment hash)\\n     */\\n    function unpackParamsForAgreementID(\\n        DataTypes.LoanEntry calldata loan\\n    ) internal pure returns (UnpackLoanParamtersLib.InterestParams memory params) {\\n        // The principal amount denominated in the aforementioned token.\\n        uint256 principalAmount;\\n        // The interest rate accrued per amortization unit.\\n        uint256 interestRate;\\n        // The amortization unit in which the repayments installments schedule is defined.\\n        uint256 rawAmortizationUnitType;\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 gracePeriodInDays;\\n\\n        (\\n            principalAmount,\\n            interestRate,\\n            rawAmortizationUnitType,\\n            termLengthInAmortizationUnits,\\n            gracePeriodInDays\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\n\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\n            rawAmortizationUnitType\\n        );\\n\\n        // Calculate term length base on Amortization Unit and number\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\n\\n        return\\n            UnpackLoanParamtersLib.InterestParams({\\n                principalAmount: principalAmount,\\n                interestRate: interestRate,\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\n                amortizationUnitType: amortizationUnitType,\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x961698fbff71a03ccba3404aee806cad6ab41a70d6328e6cc155d594c4032dbf\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\nimport '../UnpackLoanParamtersLib.sol';\\nimport {DataTypes} from '../DataTypes.sol';\\nimport {Math} from '../Math.sol';\\nimport {Discounting} from '../Discounting.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\n\\n/**\\n * @title Untangled's SecuritizaionPoolNAV contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Untangled Team\\n */\\nlibrary PoolNAVLogic {\\n    uint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\n\\n    // events\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\n\\n    /** UTILITY FUNCTION */\\n\\n    function addLoan(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        DataTypes.LoanEntry calldata loanEntry\\n    ) public returns (uint256) {\\n        bytes32 _tokenId = bytes32(loan);\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\n\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\n\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\n\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\n            _poolStorage.riskScores,\\n            loanEntry.riskScore\\n        );\\n        uint256 principalAmount = loanParam.principalAmount;\\n        uint256 _convertedInterestRate;\\n\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\n        _poolStorage.loanCount++;\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\n            // If interest rate is not set\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\n        }\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\n        GenericLogic.accrue(_poolStorage, loan);\\n\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\n\\n        // increase NAV\\n        borrow(_poolStorage, loan, principalAmount);\\n        _incDebt(_poolStorage, loan, principalAmount);\\n\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\n\\n        return principalAmount;\\n    }\\n\\n    function setLoanMaturityDate(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 nftID_,\\n        uint256 maturityDate_\\n    ) internal {\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\n\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\n        );\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\n    }\\n\\n    /// @notice file allows governance to change parameters of the contract\\n    /// @param name name of the parameter\\n    /// @param value new value of the parameter\\n\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\n        if (name == 'discountRate') {\\n            uint256 oldDiscountRate = _poolStorage.discountRate;\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n            // the nav needs to be re-calculated based on the new discount rate\\n            // no need to recalculate it if initialized the first time\\n            if (oldDiscountRate != 0) {\\n                GenericLogic.reCalcNAV(_poolStorage);\\n            }\\n        } else {\\n            revert('unknown config parameter');\\n        }\\n    }\\n\\n    /// @notice file allows governance to change parameters of the contract\\n    /// @param name name of the parameter group\\n    /// @param writeOffPercentage_ the write off rate in percent\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\n\\n    function file(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 name,\\n        uint256 rate_,\\n        uint256 writeOffPercentage_,\\n        uint256 overdueDays_,\\n        uint256 penaltyRate_,\\n        uint256 riskIndex\\n    ) public {\\n        if (name == 'writeOffGroup') {\\n            uint256 index = _poolStorage.writeOffGroups.length;\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\n            uint256 _convertedPenaltyRate = Math.ONE +\\n                (Math.ONE * penaltyRate_ * rate_) /\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\n            _poolStorage.writeOffGroups.push(\\n                DataTypes.WriteOffGroup(\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\n                    GenericLogic.toUint128(riskIndex)\\n                )\\n            );\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\n        } else {\\n            revert('unknown name');\\n        }\\n    }\\n\\n    /// @notice file manages different state configs for the pile\\n    /// only a ward can call this function\\n    /// @param what what config to change\\n    /// @param rate the interest rate group\\n    /// @param value the value to change\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\n        if (what == 'rate') {\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\n            if (_poolStorage.rates[rate].chi == 0) {\\n                _poolStorage.rates[rate].chi = Math.ONE;\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n            } else {\\n                GenericLogic.drip(_poolStorage, rate);\\n            }\\n            _poolStorage.rates[rate].ratePerSecond = value;\\n        } else if (what == 'penalty') {\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n            } else {\\n                GenericLogic.drip(_poolStorage, rate);\\n            }\\n\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\n        } else {\\n            revert('unknown parameter');\\n        }\\n    }\\n\\n    /// @notice borrow updates the NAV for a new borrowed loan\\n    /// @param loan the id of the loan\\n    /// @param amount the amount borrowed\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\n    function borrow(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 amount\\n    ) private returns (uint256 navIncrease) {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\n\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        // uint256 beforeNAV = latestNAV;\\n\\n        // calculate amount including fixed fee if applicatable\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n\\n        // calculate future value FV\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        uint256 fv = Discounting.calcFutureValue(\\n            _rate.ratePerSecond,\\n            amount,\\n            maturityDate_,\\n            GenericLogic.recoveryRatePD(\\n                _poolStorage.riskScores,\\n                nftDetail.risk,\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n            )\\n        );\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\n        );\\n\\n        // add future value to the bucket of assets with the same maturity date\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\n\\n        // increase borrowed amount for future ceiling computations\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\n        );\\n\\n        // return increase NAV amount\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\n\\n        return navIncrease;\\n    }\\n\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\n        _poolStorage.latestNAV = Discounting.secureSub(\\n            _poolStorage.latestNAV,\\n            Math.rmul(\\n                amount,\\n                GenericLogic.toUint128(\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\n                )\\n            )\\n        );\\n        decDebt(_poolStorage, loan, amount);\\n    }\\n\\n    function _calcFutureValue(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 _debt,\\n        uint256 _maturityDate\\n    ) private view returns (uint256) {\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\n        uint256 fv = Discounting.calcFutureValue(\\n            _rate.ratePerSecond,\\n            _debt,\\n            _maturityDate,\\n            GenericLogic.recoveryRatePD(\\n                _poolStorage.riskScores,\\n                nftDetail.risk,\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n            )\\n        );\\n        return fv;\\n    }\\n\\n    /// @notice repay updates the NAV for a new repaid loan\\n    /// @param loan the id of the loan\\n    /// @param amount the amount repaid\\n    function repayLoan(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 amount\\n    ) external returns (uint256, uint256) {\\n        GenericLogic.accrue(_poolStorage, loan);\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        // In case of successful repayment the latestNAV is decreased by the repaid amount\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n\\n        uint256 _currentDebt = GenericLogic.debt(_poolStorage, loan);\\n        if (amount > _currentDebt) {\\n            amount = _currentDebt;\\n        }\\n        // case 1: repayment of a written-off loan\\n        if (GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\n            // update nav with write-off decrease\\n            _decreaseLoan(_poolStorage, loan, amount);\\n            return (amount, _currentDebt);\\n        }\\n        uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\n        uint256 preFV = GenericLogic.futureValue(_poolStorage, nftID_);\\n        // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\n        uint256 fv = 0;\\n        uint256 fvDecrease = preFV;\\n        if (_debt != 0) {\\n            fv = _calcFutureValue(_poolStorage, loan, _debt, maturityDate_);\\n            if (preFV >= fv) {\\n                fvDecrease = Math.safeSub(preFV, fv);\\n            } else {\\n                fvDecrease = 0;\\n            }\\n        }\\n\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(fv);\\n\\n        // case 2: repayment of a loan before or on maturity date\\n        if (maturityDate_ >= nnow) {\\n            // remove future value decrease from bucket\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\n\\n            uint256 discountDecrease = Discounting.calcDiscount(\\n                _poolStorage.discountRate,\\n                fvDecrease,\\n                nnow,\\n                maturityDate_\\n            );\\n\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, discountDecrease);\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\n                _poolStorage.latestDiscountOfNavAssets[nftID_],\\n                discountDecrease\\n            );\\n\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, discountDecrease);\\n        } else {\\n            // case 3: repayment of an overdue loan\\n            _poolStorage.overdueLoans = Math.safeSub(_poolStorage.overdueLoans, fvDecrease);\\n            _poolStorage.overdueLoansOfNavAssets[nftID_] = Math.safeSub(\\n                _poolStorage.overdueLoansOfNavAssets[nftID_],\\n                fvDecrease\\n            );\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, fvDecrease);\\n        }\\n\\n        decDebt(_poolStorage, loan, amount);\\n\\n        emit Repay(nftID_, amount);\\n        return (amount, _currentDebt);\\n    }\\n\\n    /// @notice writeOff writes off a loan if it is overdue\\n    /// @param loan the id of the loan\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\n\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\n\\n        // can not write-off healthy loans\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\n        // check the writeoff group based on the amount of days overdue\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\n\\n        if (\\n            writeOffGroupIndex_ < type(uint128).max &&\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\n        ) {\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\n        }\\n    }\\n\\n    /// @notice internal function for the write off\\n    /// @param loan the id of the loan\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\n    /// @param nftID_ the nftID of the loan\\n    /// @param maturityDate_ the maturity date of the loan\\n    function _writeOff(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 writeOffGroupIndex_,\\n        bytes32 nftID_,\\n        uint256 maturityDate_\\n    ) internal {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        // Ensure we have an up to date NAV\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\n\\n        // first time written-off\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\n                // write off after the maturity date\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\n                    fv\\n                );\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\n            } else {\\n                // write off before or on the maturity date\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\n\\n                uint256 pv = Math.rmul(\\n                    fv,\\n                    Discounting.rpow(\\n                        _poolStorage.discountRate,\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\n                        Math.ONE\\n                    )\\n                );\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\n                    pv\\n                );\\n\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\n            }\\n        }\\n\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\n        _poolStorage.latestNAV = Math.safeAdd(\\n            latestNAV_,\\n            Math.rmul(\\n                GenericLogic.debt(_poolStorage, loan),\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\n            )\\n        );\\n    }\\n\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // no change in risk group\\n        if (risk_ == GenericLogic.risk(_poolStorage, nftID_)) {\\n            return;\\n        }\\n\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\n\\n        // update nav -> latestNAVUpdate = now\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\n        // change to new rate interestRate immediately in pile if loan debt exists\\n        uint256 loan = uint256(nftID_);\\n        if (_poolStorage.pie[loan] != 0) {\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\n            uint256 _convertedInterestRate = Math.ONE +\\n                (riskParam.interestRate * Math.ONE) /\\n                (ONE_HUNDRED_PERCENT * 365 days);\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\n                // If interest rate is not set\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\n            }\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\n        }\\n\\n        // no currencyAmount borrowed yet\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\n            return;\\n        }\\n\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\n        // New interest rate leads to a future value.\\n        // recalculation required\\n        {\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\n\\n            uint256 navDecrease = Discounting.calcDiscount(_poolStorage.discountRate, fvDecrease, nnow, maturityDate_);\\n\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\n\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\n                _poolStorage.latestDiscountOfNavAssets[nftID_],\\n                navDecrease\\n            );\\n\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\n        }\\n\\n        // update latest NAV\\n        // update latest Discount\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\n            Discounting.calcFutureValue(\\n                _rate.ratePerSecond,\\n                GenericLogic.debt(_poolStorage, loan),\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\n                GenericLogic.recoveryRatePD(\\n                    _poolStorage.riskScores,\\n                    risk_,\\n                    nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n                )\\n            )\\n        );\\n\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\n        uint256 navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fvIncrease, nnow, maturityDate_);\\n\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\n\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\n    }\\n\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\n        uint256 rate = _poolStorage.loanRates[loan];\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\n\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\n\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\n    }\\n\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\n        uint256 rate = _poolStorage.loanRates[loan];\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\n        if (penaltyChi_ > 0) {\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\n        }\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\n\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\n\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c50cb121da3ce8e17dfb5faa74f066df3e17d2df28f90c6995c09ef6b7563e8\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61387161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806356a5a29914610071578063a2cfdc9b14610093578063a4571bbc146100c6578063b77604c5146100e6578063ca3c20f114610106578063d580a21a1461013b575b600080fd5b81801561007d57600080fd5b5061009161008c3660046133c3565b61015b565b005b81801561009f57600080fd5b506100b36100ae3660046133ef565b61056f565b6040519081526020015b60405180910390f35b8180156100d257600080fd5b506100916100e1366004613432565b61090b565b8180156100f257600080fd5b50610091610101366004613454565b610b0b565b81801561011257600080fd5b506101266101213660046133c3565b610d98565b604080519283526020830191909152016100bd565b81801561014757600080fd5b506100916101563660046133c3565b610ff8565b6000610166426110cb565b6000848152601d860160205260409020600101549091506001600160801b031682036101925750505050565b61019b826110ed565b6000848152601d86016020526040902060010180546001600160801b0319166001600160801b039290921691909117905560248401548111156101e3576101e18461115a565b505b60008381526018850160205260409020548390156102c757600061020a8660010185611216565b9050600061021b61271060646134b6565b610229906301e133806134b6565b676765c793fa10079d601b1b836060015163ffffffff1661024a91906134b6565b61025491906134cd565b61026990676765c793fa10079d601b1b6134ef565b6000818152601789016020526040812060020154919250036102985761029887637261746560e01b83846113c6565b6102a38784836115bf565b50606001516000858152601d87016020526040902063ffffffff909116600e909101555b6102d18585611796565b6000036102df575050505050565b60006102eb86866117b5565b905060006102f98787611796565b9050600061030d88602101548387866117db565b6000848152601f8a01602052604090205490915061032b908361180e565b6000848152601f8a016020526040902055602388015461034b908261185e565b6023890155600087815260268901602052604090205461036b908261185e565b600088815260268a016020526040902055602288015461038b908261185e565b6022890155505060008281526019870160209081526040808320548352601789018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906104158885611881565b905061046161045c836040015161042c8b886119be565b6104368c8c6117b5565b6104578d6001018c8860c001518960e001516104529190613502565b611ac1565b611b62565b6110ed565b6000888152601d8a016020526040812080546001600160801b0319166001600160801b03939093169290921790915561049a8989611796565b905060006104ae8a602101548389886117db565b6000868152601f8c0160205260409020549091506104cc9083611bba565b6000868152601f8c01602052604090205560238a01546104ec9082611bba565b60238b0155600089815260268b016020526040812080548392906105119084906134ef565b909155505060228a01546105259082611bba565b60228b0155604080518a8152602081018a90527ff51d891f73afa0326444ca250f11a78ec4ede8d4beaf8c2cfe9f29d5f9e5629c910160405180910390a150505050505050505050565b6000828161057c84611c0a565b905061058e60e0850160c08601613515565b6000838152601d88016020908152604090912060010180546001600160801b03191660ff93909316929092179091556105c990850185613538565b6000838152601d880160209081526040918290206002810180546001600160a01b0319166001600160a01b03959095169490941790935560a087013560069093019290925561061d91908601908601613538565b6000838152601d8801602052604090206003810180546001600160a01b0319166001600160a01b039390931692909217909155606085013560048201556080850135600590910155610676610100850160e08601613561565b6000838152601d880160205260409020600701805460ff1916600183818111156106a2576106a2613582565b02179055506000828152601d870160209081526040918290208287013560088201558351600982015590830151600a82015590820151600b8201556060820151600c909101805460ff1916600183600581111561070157610701613582565b021790555060808101516000838152601d880160205260408120600d81019290925560a0830151600e909201919091556107506001880161074860e0880160c08901613515565b60ff16611216565b8251909150600061076461271060646134b6565b60208401516107799063ffffffff16846134b6565b61078391906134cd565b915061079261271060646134b6565b6107a0906301e133806134b6565b676765c793fa10079d601b1b846060015163ffffffff166107c191906134b6565b6107cb91906134cd565b6107e090676765c793fa10079d601b1b6134ef565b601a8a018054600090815260288c0160205260408120889055815492935061080783613598565b919050555061081b89868660400151611cbf565b600081815260178a01602052604081206002015490036108485761084889637261746560e01b83846113c6565b610853898983611da4565b61085d8989611e8d565b6000888152601b8a0160205260409020546108789083611bba565b6000898152601b8b016020526040902055601c8901546108989083611bba565b601c8a01556108a8898984611ead565b506108b489898461212f565b6000858152601d8a01602052604090819020905186917f22998f2397a6b1e965f5fdc5684d29ab2c2ebff824295de89aab9465b66822cd916108f79186916135d5565b60405180910390a250979650505050505050565b6000818152601e83016020526040902054600160801b900460ff161561096e5760405162461bcd60e51b815260206004820152601360248201527237b7363c96b0baba3416bbb934ba3296b7b33360691b60448201526064015b60405180910390fd5b80600061097b84836117b5565b9050600081116109c35760405162461bcd60e51b81526020600482015260136024820152721b1bd85b8b591bd95ccb5b9bdd0b595e1a5cdd606a1b6044820152606401610965565b60006109ce426110cb565b905060006109dc8686611881565b905060006109fa8760010183604001516001600160801b0316611216565b9050828160e0015163ffffffff1685610a1391906134ef565b1115610a615760405162461bcd60e51b815260206004820152601b60248201527f6d617475726974792d646174652d696e2d7468652d66757475726500000000006044820152606401610965565b6000610a6d8888612257565b90506001600160801b0381108015610ab6575080610a98676765c793fa10079d601b1b6103e86134b6565b610aa291906134ef565b600088815260198a01602052604090205414155b15610b0157610ac888888389896123c4565b60405160008152819087907fa0d657cd77a4a207fbc8f50dcd70ea7d5bb4a07cbb549bf7ec75a5768a30e6f99060200160405180910390a35b5050505050505050565b856c077726974654f666647726f757609c1b03610d585760208701546000610b3661271060646134b6565b610b44906301e133806134b6565b610b59676765c793fa10079d601b1b896134b6565b610b6391906134cd565b610b7890676765c793fa10079d601b1b6134ef565b90506000610b8961271060646134b6565b610b9e676765c793fa10079d601b1b896134b6565b610ba891906134cd565b610bbd90676765c793fa10079d601b1b613502565b90506000610bce61271060646134b6565b610bdb61271060646134b6565b610be591906134b6565b610bf3906301e133806134b6565b89610c0988676765c793fa10079d601b1b6134b6565b610c1391906134b6565b610c1d91906134cd565b610c3290676765c793fa10079d601b1b6134ef565b90506000610c4362015180896134cd565b90508b6020016040518060600160405280610c5d866110ed565b6001600160801b03168152602001610c74846110ed565b6001600160801b03168152602001610c8b896110ed565b6001600160801b0390811690915282546001818101855560009485526020948590208451958501518416600160801b02958416959095176002909202909401908155604090920151919092018054919092166001600160801b031991909116179055610d1f8c637261746560e01b610d19610d13676765c793fa10079d601b1b6103e86134b6565b89611bba565b876113c6565b610d4e8c6670656e616c747960c81b610d48610d13676765c793fa10079d601b1b6103e86134b6565b856113c6565b5050505050610d8f565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e206e616d6560a01b6044820152606401610965565b50505050505050565b600080610da58585611e8d565b6000610db0426110cb565b90508560240154811115610dc957610dc78661115a565b505b846000610dd688836117b5565b90506000610de489896119be565b905080871115610df2578096505b610dfc898961259a565b15610e1a57610e0c8989896125cc565b8695509350610ff092505050565b6000610e26828961180e565b90506000610e348b86611796565b90506000818315610e6957610e4b8d8d8689612664565b9150818310610e6557610e5e838361180e565b9050610e69565b5060005b610e72826110ed565b6000888152601d8f016020526040902080546001600160801b0319166001600160801b0392909216919091179055878610610f49576000868152601f8e016020526040902054610ec2908261180e565b6000878152601f8f01602052604081209190915560218e0154610ee790838b8a6117db565b9050610ef78e602301548261185e565b60238f0155600088815260268f016020526040902054610f17908261185e565b8e60260160008a815260200190815260200160002081905550610f3e8e602201548261185e565b60228f015550610f9d565b610f578d602501548261180e565b60258e0155600087815260278e016020526040902054610f77908261180e565b600088815260278f01602052604090205560228d0154610f97908261185e565b60228e01555b610fa88d8d8d61272a565b867f59454c2c3385a95399182e59da91521ee5621f0211b9f016ff08b2e8e5fc98438c604051610fda91815260200190565b60405180910390a2508998509296505050505050505b935093915050565b816b646973636f756e745261746560a01b0361107e57602183015461102061271060646134b6565b61102e906301e133806134b6565b611043676765c793fa10079d601b1b846134b6565b61104d91906134cd565b61106290676765c793fa10079d601b1b6134ef565b60218501558015611078576110768461286f565b505b50505050565b60405162461bcd60e51b815260206004820152601860248201527f756e6b6e6f776e20636f6e66696720706172616d6574657200000000000000006044820152606401610965565b505050565b60006110da62015180836134cd565b6110e790620151806134b6565b92915050565b60006001600160801b038211156111565760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610965565b5090565b6000806000806111698561291e565b92509250925060005b85601a01548110156111d3576000818152602887016020526040812054908061119b8984612a0c565b50600094855260278b01602090815260408087209290925560268c01905290932092909255506111cc905081613598565b9050611172565b5060258501829055602385018390556111f56111ef8484611bba565b82611bba565b6022860155611203426110cb565b6024860155505050602290910154919050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915281158061127b57508254155b156112e1575060408051610160810182526000808252620f42406020830152918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526110e7565b6112ec600183613502565b9150828281548110611300576113006136bd565b600091825260209182902060408051610160810182526002909302909101805463ffffffff808216855264010000000080830482169686019690965268010000000000000000808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e085015260019091015480821661010085015293840481166101208401529204909116610140820152905092915050565b82637261746560e01b036114a357806000036114245760405162461bcd60e51b815260206004820152601c60248201527f726174652d7065722d7365636f6e642d63616e2d6e6f742d62652d30000000006044820152606401610965565b6000828152601785016020526040812060010154900361147e5760008281526017850160205260409020676765c793fa10079d601b1b6001820155600501805465ffffffffffff19164265ffffffffffff16179055611488565b6114888483612b35565b60008281526017850160205260409020600201819055611078565b826670656e616c747960c81b0361158357806000036115045760405162461bcd60e51b815260206004820152601f60248201527f70656e616c74792d7065722d7365636f6e642d63616e2d6e6f742d62652d30006044820152606401610965565b6000828152601785016020526040812060040154900361155e5760008281526017850160205260409020676765c793fa10079d601b1b6004820155600501805465ffffffffffff19164265ffffffffffff16179055611568565b6115688483612b35565b60008281526017850160205260409020600301819055611078565b60405162461bcd60e51b81526020600482015260116024820152703ab735b737bbb7103830b930b6b2ba32b960791b6044820152606401610965565b600081815260178401602052604081206001015490036116165760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610965565b61162d676765c793fa10079d601b1b6103e86134b6565b811061166a576000818152601784016020526040902060050180546bffffffffffff0000000000001916600160301b4265ffffffffffff16021790555b60008281526019840160205260409020546116858482612b35565b61168f8483612b35565b6000838152601885016020908152604080832054848452601788019092528220600101549091906116c09083612cfa565b60008481526017880160205260409020549091506116de908361180e565b60008481526017880160205260408082209290925585815220600101546117059082612d06565b6000868152601888016020818152604080842085905588845260178b018252832054928990525261173591611bba565b600085815260178801602090815260408083209390935587825260198901905220849055846040518581527f8e2ce1fcb819c387686609f23cdd597abcdd18b0a3bcf284394b65c74101f8c4906020015b60405180910390a2505050505050565b6000908152601d9190910160205260409020546001600160801b031690565b6000908152601d919091016020526040902054600160801b90046001600160801b031690565b600061180584611800876117ef868861180e565b676765c793fa10079d601b1b612d12565b612dd0565b95945050505050565b60008261181b8382613502565b91508111156110e75760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610965565b600082821115611870575060006110e7565b61187a838361180e565b9392505050565b61188961330c565b6000828152601d8401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff169081111561193457611934613582565b600181111561194557611945613582565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff16600581111561198e5761198e613582565b600581111561199f5761199f613582565b8152600d8201546020820152600e909101546040909101529392505050565b60008181526019830160209081526040808320548084526017860190925282206001810154600482015460059092015490919065ffffffffffff164210611a6b576000838152601787016020526040902060018101546002820154600590920154611a31929065ffffffffffff16612e42565b6000848152601788016020526040902060048101546003820154600590920154929450611a689290919065ffffffffffff16612e42565b90505b80600003611a99576000858152601887016020526040902054611a8f908390612cfa565b93505050506110e7565b611a8f81611abc848960180160008a815260200190815260200160002054612cfa565b612cfa565b600080611ace8585611216565b9050611add61271060646134b6565b611aea61271060646134b6565b611af491906134b6565b611b02906301e133806134b6565b838260a0015163ffffffff16836080015163ffffffff16676765c793fa10079d601b1b611b2f91906134b6565b611b3991906134b6565b611b4391906134b6565b611b4d91906134cd565b61180590676765c793fa10079d601b1b613502565b600080611b6e426110cb565b9050600081851115611b8757611b84858361180e565b90505b611baf611ba9611ba38984676765c793fa10079d601b1b612d12565b88612e62565b85612e62565b979650505050505050565b600082611bc783826134ef565b91508110156110e75760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610965565b611c12613390565b6000806000806000611c278760400135612e7a565b9398509196509450925090506000836005811115611c4757611c47613582565b90506000611c5482612e9d565b611c5e90856134b6565b90506040518060c001604052808881526020018a6080013581526020018a6080013583611c8b91906134ef565b8152602001836005811115611ca257611ca2613582565b815260200185815260200187815250975050505050505050919050565b611cc98383611796565b15611d2b5760405162461bcd60e51b815260206004820152602c60248201527f63616e2d6e6f742d6368616e67652d6d61747572697479446174652d6f75747360448201526b1d185b991a5b99cb5919589d60a21b6064820152608401610965565b611d3761045c826110cb565b6000838152601d850160205260409081902080546001600160801b03938416600160801b029316929092179091555182907fe4cc80f41f018b5290a16d068ce1312611f47f682daaa056e36456c59f853d5a90611d979084815260200190565b60405180910390a2505050565b600082815260188401602052604090205415611df25760405162461bcd60e51b815260206004820152600d60248201526c1b9bdb8b5e995c9bcb5919589d609a1b6044820152606401610965565b60008181526017840160205260408120600101549003611e495760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610965565b60008281526019840160205260409020819055816040518281527f502a7eca8a181ab7f1fac839ea906869797df68c21326b477c0da6e7f962fbc990602001611d97565b6000818152601983016020526040902054611ea9908390612b35565b5050565b600080611eb9426110cb565b9050836000611ec887836117b5565b9050828111611f245760405162461bcd60e51b815260206004820152602260248201527f6d617475726974792d646174652d69732d6e6f742d696e2d7468652d66757475604482015261726560f01b6064820152608401610965565b8660240154831115611f3b57611f398761115a565b505b6000868152601988016020908152604080832054835260178a018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c082015290611fbe8989611881565b90506000611ff5836040015189866104578e60010187604001516001600160801b03168860c001518960e001516104529190613502565b905061200d61045c6120078c88611796565b83611bba565b6000868152601d8c016020908152604080832080546001600160801b0319166001600160801b039590951694909417909355868252601f8d01905220546120549082611bba565b6000858152601f8c01602052604090205561209561045c61208f8c8c6000908152601e9190910160205260409020546001600160801b031690565b8a611bba565b60008a8152601e8c016020526040902080546001600160801b0319166001600160801b039290921691909117905560218a01546120d4908288876117db565b96506120e48a6023015488611bba565b60238b0155600085815260268b016020526040812080548992906121099084906134ef565b909155505060228a015461211d9088611bba565b60228b01555050505050509392505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff1642146121a35760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610965565b60008181526017850160205260408120600101546121c19084612d06565b60008581526018870160205260409020549091506121df9082611bba565b6000858152601887016020908152604080832093909355848252601788019052205461220b9082611bba565b6000838152601787016020526040902055836040518481527f025cdc0b70e4d52ce267700d2925d12f1f4046b82d6eea316cb83391813f1c479060200160405180910390a25050505050565b6000818161226585836117b5565b90506000612272426110cb565b905060006122808785611881565b905060006001826040015161229591906136d3565b90506001600160801b036000805b60208b01546001600160801b03821610156123ad5760008b602001826001600160801b0316815481106122d8576122d86136bd565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c602001836001600160801b031681548110612327576123276136bd565b60009182526020909120600160029092020101546001600160801b03161480156123635750826001600160801b0316816001600160801b031610155b801561238e575061237781620151806136fa565b61238a906001600160801b0316896134ef565b8710155b1561239a578193508092505b50806123a581613725565b9150506122a3565b50506001600160801b031698975050505050505050565b60006123cf426110cb565b905085602401548111156123e8576123e68661115a565b505b60228601546123f7878761259a565b6125135760006124078886611796565b90508361241789602401546110cb565b111561246d5761242b88602501548261185e565b6025890155600085815260278901602052604090205461244b908261185e565b600086815260278a016020526040902055612466828261185e565b9150612511565b6000848152601f89016020526040902054612488908261180e565b6000858152601f8a01602052604081209190915560218901546124c29083906124bd906117ef6124b78a6110cb565b8961180e565b612e62565b90506124d289602301548261185e565b60238a0155600086815260268a0160205260409020546124f2908261185e565b600087815260268b01602052604090205561250d838261185e565b9250505b505b61253f878787612530676765c793fa10079d601b1b6103e86134b6565b61253a91906134ef565b6115bf565b612589816125846125508a8a6119be565b8a6020018981548110612565576125656136bd565b60009182526020909120600290910201546001600160801b0316612e62565b611bba565b876022018190555050505050505050565b60006125b3676765c793fa10079d601b1b6103e86134b6565b6000928352601993909301602052506040902054101590565b60228301546126549061264f83612641602088016125f7676765c793fa10079d601b1b6103e86134b6565b600089815260198b0160205260409020546126129190613502565b81548110612622576126226136bd565b60009182526020909120600290910201546001600160801b03166110ed565b6001600160801b0316612e62565b61185e565b60228401556110c683838361272a565b60008381526019850160209081526040808320548352601787018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152816126e78787611881565b9050600061271e836040015187876104578c60010187604001516001600160801b03168860c001518960e001516104529190613502565b98975050505050505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff16421461279e5760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610965565b600081815260178501602052604090206004015480156127c5576127c28184612d06565b92505b60008281526017860160205260408120600101546127e39085612d06565b6000868152601888016020526040902054909150612801908261180e565b6000868152601888016020908152604080832093909355858252601789019052205461282d908261180e565b6000848152601788016020526040902055846040518581527f9d36b5b661e3fc41681961cd76e4b5de0b5f8c5af42446cf86f291efa1363fe690602001611786565b60008060015b83601a01548110156128f65780600061288e86836117b5565b905085602401548110156128a35750506128e4565b60006128c287602101546128b78986611796565b8960240154856117db565b90506128ce8582611bba565b6000938452602688016020526040909320555091505b806128ee81613598565b915050612875565b5061290d816125848560220154866023015461180e565b602284018190556023909301555090565b6023810154602582015460218301546024840154600093849384939192909190838503612960576000836129518a612fb6565b96509650965050505050612a05565b60008061296c426110cb565b9050825b818110156129c9576000818152601f8c01602052604090205480156129b4576129a584612584836124bd8a6117ef898961180e565b93506129b18a82611bba565b99505b506129c281620151806134ef565b9050612970565b506129e56129df876124bd876117ef868961180e565b8361185e565b6129ef868a611bba565b6129f88c612fb6565b9850985098505050505050505b9193909250565b6021820154600082815260268401602090815260408083205460248701546027880190935290832054929384938493849391612a488a8a61259a565b15612a81576000612a598b8b612257565b9050612a7d612a688c8c6119be565b8c6020018381548110612565576125656136bd565b9550505b82600003612a9b57600097509550929350612b2e92505050565b600080612aa7426110cb565b90506000612abd612ab88e8e6117b5565b6110cb565b9050848110158015612ace57508181105b15612af9576000612adf8e8e611796565b9050612af3816124bd8a6117ef878761180e565b909a5092505b612b14612b0e876124bd8a6117ef878b61180e565b8461185e565b612b1e858c611bba565b899a509a509a5050505050505050505b9250925092565b600081815260178301602052604090206005015465ffffffffffff164210611ea957600081815260178301602052604081206001810154600282015460058301549254612b8a9365ffffffffffff1690613027565b5060008381526017850160205260409020600181018290556003015490915015801590612bd857506000828152601784016020526040902060050154600160301b900465ffffffffffff1615155b8015612c0657506000828152601784016020526040902060050154600160301b900465ffffffffffff164210155b15612ccb57600082815260178401602052604081206005015465ffffffffffff600160301b82048116911611612c5e576000838152601785016020526040902060050154600160301b900465ffffffffffff16612c7b565b600083815260178501602052604090206005015465ffffffffffff165b6000848152601786016020526040812060048101546003820154915465ffffffffffff9490941694509192612cb39291908590613027565b50600085815260178701602052604090206004015550505b50600090815260179190910160205260409020600501805465ffffffffffff19164265ffffffffffff16179055565b600061187a8284612e62565b600061187a82846130c2565b6000838015612db257600184168015612d2d57859250612d31565b8392505b50600283046002850494505b8415612dac578586028687820414612d5457600080fd5b81810181811015612d6457600080fd5b8590049650506001851615612da1578583028387820414158715151615612d8a57600080fd5b81810181811015612d9a57600080fd5b8590049350505b600285049450612d3d565b50612dc8565b838015612dc25760009250612dc6565b8392505b505b509392505050565b6000808211612e145760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610965565b81612e38612e2d85676765c793fa10079d601b1b61312a565b6125846002866134cd565b61187a91906134cd565b6000814210612e5a57612e578484844261318c565b93505b509192915050565b6000676765c793fa10079d601b1b612e38848461312a565b6000806000806000612e8b866131a5565b939a9299509097509550909350915050565b600080826005811115612eb257612eb2613582565b03612ebf5750603c919050565b6001826005811115612ed357612ed3613582565b03612ee15750610e10919050565b6002826005811115612ef557612ef5613582565b03612f04575062015180919050565b6003826005811115612f1857612f18613582565b03612f27575062093a80919050565b6004826005811115612f3b57612f3b613582565b03612f4a575062278d00919050565b6005826005811115612f5e57612f5e613582565b03612f6e57506301e13380919050565b60405162461bcd60e51b815260206004820152601f60248201527f556e6b6e6f776e20616d6f7274697a6174696f6e20756e697420747970652e006044820152606401610965565b6000805b60208301548110156130215761300d82612584612ff88685612fe9676765c793fa10079d601b1b6103e86134b6565b612ff391906134ef565b613235565b866020018581548110612565576125656136bd565b91508061301981613598565b915050612fba565b50919050565b6000808342101561307a5760405162461bcd60e51b815260206004820152601e60248201527f74696e6c616b652d6d6174682f696e76616c69642d74696d657374616d7000006044820152606401610965565b8560000361308757600080fd5b60006130958787874261318c565b9050806130b46130a58387612e62565b6130af8a88612e62565b61180e565b925092505094509492505050565b60008082116131065760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610965565b81612e3861311f85676765c793fa10079d601b1b61312a565b61258485600161180e565b600081158061314e5750828261314081836134b6565b925061314c90836134cd565b145b6110e75760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610965565b600061180561319f856117ef8686613502565b86612e62565b6000808080806bffffffffffffffffffffffff60981b861662ffffff60801b8716600f607c1b88166f0ffffffffffffffffffffffff00000008916630ff000008a166131f28560986132f5565b6131fd8560806132f5565b61320885607c6132f5565b61321385601c6132f5565b61321e8560146132f5565b939f929e50909c509a509098509650505050505050565b600081815260178301602052604081206001810154600482015482546005909301549192909165ffffffffffff1642106132d557600085815260178701602052604090206001810154600282015460059092015461329b929065ffffffffffff16612e42565b60008681526017880160205260409020600481015460038201546005909201549295506132d29290919065ffffffffffff16612e42565b91505b816000036132e757611a8f8382612cfa565b611a8f82611abc8584612cfa565b600061330282600261382f565b61187a90846134cd565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a08201905b815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000600581111561337c5761337c613582565b6000806000606084860312156133d857600080fd5b505081359360208301359350604090920135919050565b600080600083850361014081121561340657600080fd5b8435935060208501359250610100603f198201121561342457600080fd5b506040840190509250925092565b6000806040838503121561344557600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561346f57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176110e7576110e76134a0565b6000826134ea57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156110e7576110e76134a0565b818103818111156110e7576110e76134a0565b60006020828403121561352757600080fd5b813560ff8116811461187a57600080fd5b60006020828403121561354a57600080fd5b81356001600160a01b038116811461187a57600080fd5b60006020828403121561357357600080fd5b81356002811061187a57600080fd5b634e487b7160e01b600052602160045260246000fd5b6000600182016135aa576135aa6134a0565b5060010190565b600281106135c1576135c1613582565b9052565b600681106135c1576135c1613582565b82815281546001600160801b038082166020840152608091821c6040840152600184015416606083015260028301546001600160a01b039081169183019190915260038301541660a0820152600482015460c0820152600582015460e08201526006820154610100820152600782015461022082019060ff1661365c6101208401826135b1565b5060088301546101408301526009830154610160830152600a830154610180830152600b8301546101a0830152600c83015460ff1661369f6101c08401826135c5565b50600d8301546101e0830152600e8301546102008301529392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160801b038281168282160390808211156136f3576136f36134a0565b5092915050565b6001600160801b0381811683821602808216919082811461371d5761371d6134a0565b505092915050565b60006001600160801b03808316818103613741576137416134a0565b6001019392505050565b600181815b8085111561378657816000190482111561376c5761376c6134a0565b8085161561377957918102915b93841c9390800290613750565b509250929050565b60008261379d575060016110e7565b816137aa575060006110e7565b81600181146137c057600281146137ca576137e6565b60019150506110e7565b60ff8411156137db576137db6134a0565b50506001821b6110e7565b5060208310610133831016604e8410600b8410161715613809575081810a6110e7565b613813838361374b565b8060001904821115613827576138276134a0565b029392505050565b600061187a838361378e56fea2646970667358221220c70b20487fb51589cb98ea7dbb750cdf049fb377d04bf10c1e1f74637209534d64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Untangled Team",
    "kind": "dev",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "params": {
          "name": "name of the parameter",
          "value": "new value of the parameter"
        }
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "name": "name of the parameter group",
          "overdueDays_": "the number of days after which a loan is considered overdue",
          "writeOffPercentage_": "the write off rate in percent"
        }
      },
      "repayLoan(DataTypes.Storage storage,uint256,uint256)": {
        "params": {
          "amount": "the amount repaid",
          "loan": "the id of the loan"
        }
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "params": {
          "loan": "the id of the loan"
        }
      }
    },
    "title": "Untangled's SecuritizaionPoolNAV contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLoan(DataTypes.Storage storage,uint256,DataTypes.LoanEntry)": {
        "notice": "UTILITY FUNCTION "
      },
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "repayLoan(DataTypes.Storage storage,uint256,uint256)": {
        "notice": "repay updates the NAV for a new repaid loan"
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "notice": "writeOff writes off a loan if it is overdue"
      }
    },
    "notice": "Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}