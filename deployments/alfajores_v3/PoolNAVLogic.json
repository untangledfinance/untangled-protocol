{
  "address": "0xbC2190277F5Ad0fD00e91a0176380e1Fb74a3080",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "futureValue",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "risk",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termStartUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termEndUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum UnpackLoanParamtersLib.AmortizationUnitType",
              "name": "amortizationUnitType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "termLengthInAmortizationUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.NFTDetails",
          "name": "nftdetails",
          "type": "tuple"
        }
      ],
      "name": "AddLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate_",
          "type": "uint256"
        }
      ],
      "name": "SetLoanMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "risk",
          "type": "uint256"
        }
      ],
      "name": "UpdateAssetRiskScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "writeOffGroupsIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "override_",
          "type": "bool"
        }
      ],
      "name": "WriteOff",
      "type": "event"
    }
  ],
  "transactionHash": "0x6ade0e4923ec26816cafcd17ec6c6b1d788656645642e52c15bebf3d42517643",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xbC2190277F5Ad0fD00e91a0176380e1Fb74a3080",
    "transactionIndex": 0,
    "gasUsed": "3349683",
    "logsBloom": "0x
    "blockHash": "0x58964ed5cdba95003c51cbc87cfadb249ed803e6dc5988a3fdf0f4607a20da29",
    "transactionHash": "0x6ade0e4923ec26816cafcd17ec6c6b1d788656645642e52c15bebf3d42517643",
    "logs": [],
    "blockNumber": 22765682,
    "cumulativeGasUsed": "3349683",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "deed048fa3beb16e6c43cf148788f147",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"futureValue\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"risk\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termStartUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum UnpackLoanParamtersLib.AmortizationUnitType\",\"name\":\"amortizationUnitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.NFTDetails\",\"name\":\"nftdetails\",\"type\":\"tuple\"}],\"name\":\"AddLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate_\",\"type\":\"uint256\"}],\"name\":\"SetLoanMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"name\":\"UpdateAssetRiskScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"writeOffGroupsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"override_\",\"type\":\"bool\"}],\"name\":\"WriteOff\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"kind\":\"dev\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"params\":{\"name\":\"name of the parameter\",\"value\":\"new value of the parameter\"}},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"name\":\"name of the parameter group\",\"overdueDays_\":\"the number of days after which a loan is considered overdue\",\"writeOffPercentage_\":\"the write off rate in percent\"}},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"params\":{\"amounts\":\"the amounts repaid\",\"loans\":\"the ids of the loan\"}},\"writeOff(DataTypes.Storage storage,uint256)\":{\"params\":{\"loan\":\"the id of the loan\"}}},\"title\":\"Untangled's SecuritizaionPoolNAV contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLoan(DataTypes.Storage storage,uint256,DataTypes.LoanEntry)\":{\"notice\":\"UTILITY FUNCTION \"},\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"notice\":\"repay updates the NAV for a new repaid loan\"},\"writeOff(DataTypes.Storage storage,uint256)\":{\"notice\":\"writeOff writes off a loan if it is overdue\"}},\"notice\":\"Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/PoolNAVLogic.sol\":\"PoolNAVLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @title Configuration\\n/// @author Untangled Team\\nlibrary Configuration {\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\n    // You can rename or append. But NEVER change the order.\\n    enum CONTRACT_TYPE {\\n        SECURITIZATION_MANAGER,\\n        SECURITIZATION_POOL,\\n        NOTE_TOKEN_FACTORY,\\n        TOKEN_GENERATION_EVENT_FACTORY,\\n        DISTRIBUTION_ASSESSOR,\\n        LOAN_ASSET_TOKEN,\\n        LOAN_KERNEL,\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\n        GO,\\n        NOTE_TOKEN_VAULT\\n    }\\n\\n    enum NOTE_TOKEN_TYPE {\\n        SENIOR,\\n        JUNIOR\\n    }\\n\\n    enum ASSET_PURPOSE {\\n        LOAN,\\n        INVOICE\\n    }\\n}\\n\",\"keccak256\":\"0x1874e4d4425c10a717621040e9da43851b9c9826211c9929cd21b701729dfe4e\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// import '../storage/Registry.sol';\\nimport './Configuration.sol';\\nimport './UnpackLoanParamtersLib.sol';\\n\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\nbytes32 constant POOL_ADMIN = keccak256('POOL_CREATOR');\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\n\\nbytes32 constant BACKEND_ADMIN = keccak256('BACKEND_ADMIN');\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\n\\n// In PoolNAV we use this\\nbytes32 constant POOL = keccak256('POOL');\\n\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\nuint256 constant ONE = 10 ** 27;\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\nbytes32 constant VALIDATOR_ADMIN_ROLE = keccak256('VALIDATOR_ADMIN_ROLE');\\n\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\nlibrary DataTypes {\\n    enum CycleState {\\n        INITIATED,\\n        CROWDSALE,\\n        CLOSED\\n    }\\n\\n    struct NoteToken {\\n        address poolAddress;\\n        address noteTokenAddress;\\n        uint256 balance;\\n        uint256 apy;\\n    }\\n    struct RiskScore {\\n        uint32 daysPastDue;\\n        uint32 advanceRate;\\n        uint32 penaltyRate;\\n        uint32 interestRate;\\n        uint32 probabilityOfDefault;\\n        uint32 lossGivenDefault;\\n        uint32 writeOffAfterGracePeriod;\\n        uint32 gracePeriod;\\n        uint32 collectionPeriod;\\n        uint32 writeOffAfterCollectionPeriod;\\n        uint32 discountRate;\\n    }\\n\\n    struct LoanEntry {\\n        address debtor;\\n        address principalTokenAddress;\\n        bytes32 termsParam; // actually inside this param was already included P token address\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        uint8 riskScore;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n    }\\n    struct NFTAsset {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    struct NewPoolParams {\\n        address currency;\\n        uint32 minFirstLossCushion;\\n        bool validatorRequired;\\n        uint256 debtCeiling;\\n    }\\n\\n    /// @notice details of the underlying collateral\\n    struct NFTDetails {\\n        uint128 futureValue;\\n        uint128 maturityDate;\\n        uint128 risk;\\n        address debtor;\\n        address principalTokenAddress;\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 expirationTimestamp;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n        bytes32 termsParam;\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 interestRate;\\n    }\\n\\n    /// @notice stores all needed information of an interest rate group\\n    struct Rate {\\n        // total debt of all loans with this rate\\n        uint256 pie;\\n        // accumlated rate index over time\\n        uint256 chi;\\n        // interest rate per second\\n        uint256 ratePerSecond;\\n        // penalty rate per second\\n        uint256 penaltyRatePerSecond;\\n        // accumlated penalty rate index over time\\n        uint256 penaltyChi;\\n        // last time the rate was accumulated\\n        uint48 lastUpdated;\\n        // time start to penalty\\n        uint48 timeStartPenalty;\\n    }\\n\\n    /// @notice details of the loan\\n    struct LoanDetails {\\n        uint128 borrowed;\\n        // only auth calls can move loan into different writeOff group\\n        bool authWriteOff;\\n    }\\n\\n    /// @notice details of the write off group\\n    struct WriteOffGroup {\\n        // denominated in (10^27)\\n        uint128 percentage;\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\n        uint128 overdueDays;\\n        uint128 riskIndex;\\n    }\\n\\n    struct Storage {\\n        bool validatorRequired;\\n        uint64 firstAssetTimestamp;\\n        RiskScore[] riskScores;\\n        NFTAsset[] nftAssets;\\n        address[] tokenAssetAddresses;\\n        mapping(address => bool) existsTokenAssetAddress;\\n        // TGE\\n        address tgeAddress;\\n        address secondTGEAddress;\\n        address sotToken;\\n        address jotToken;\\n        address underlyingCurrency;\\n        uint256 reserve; // Money in pool\\n        uint32 minFirstLossCushion;\\n        uint64 openingBlockTimestamp;\\n        // by default it is address(this)\\n        address pot;\\n        // for base (sell-loan) operation\\n        uint256 paidPrincipalAmountSOT;\\n        uint32 interestRateSOT; // Annually, support 4 decimals num\\n        uint256 totalAssetRepaidCurrency;\\n        mapping(address => uint256) paidPrincipalAmountSOTByInvestor;\\n        uint256 debtCeiling;\\n        CycleState state;\\n        // lock distribution\\n        mapping(address => mapping(address => uint256)) lockedDistributeBalances;\\n        uint256 totalLockedDistributeBalance;\\n        mapping(address => mapping(address => uint256)) lockedRedeemBalances;\\n        // token address -> total locked\\n        mapping(address => uint256) totalLockedRedeemBalances;\\n        uint256 totalRedeemedCurrency; // Total $ (cUSD) has been redeemed\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\n        mapping(uint256 => Rate) rates;\\n        mapping(uint256 => uint256) pie;\\n        /// @notice mapping from loan => rate\\n        mapping(uint256 => uint256) loanRates;\\n        /// @notice mapping from loan => grace time\\n\\n        uint256 loanCount;\\n        mapping(uint256 => uint256) balances;\\n        uint256 balance;\\n        // nft => details\\n        mapping(bytes32 => NFTDetails) details;\\n        // loan => details\\n        mapping(uint256 => LoanDetails) loanDetails;\\n        // timestamp => bucket\\n        mapping(uint256 => uint256) buckets;\\n        WriteOffGroup[] writeOffGroups;\\n        // Write-off groups will be added as rate groups to the pile with their index\\n        // in the writeOffGroups array + this number\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\n        // The discount decreases with the maturityDate approaching.\\n        // denominated in (10^27)\\n        uint256 discountRate;\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\n        uint256 latestNAV;\\n        uint256 latestDiscount;\\n        uint256 lastNAVUpdate;\\n        // overdue loans are loans which passed the maturity date but are not written-off\\n        uint256 overdueLoans;\\n        // tokenId => latestDiscount\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\n        mapping(uint256 => bytes32) loanToNFT;\\n        // value to view\\n        uint256 totalPrincipalRepaid;\\n        uint256 totalInterestRepaid;\\n        // value to calculate rebase\\n        uint256 seniorDebt;\\n        uint256 seniorBalance;\\n        uint64 lastUpdateSeniorInterest;\\n    }\\n\\n    struct LoanAssetInfo {\\n        uint256[] tokenIds;\\n        uint256[] nonces;\\n        address validator;\\n        bytes validateSignature;\\n    }\\n}\\n\",\"keccak256\":\"0xffad2ea8c49aaf6e3cbe843558f7a36ccb3973c8a0440e6d8cb6bb6ad744f7ab\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport './Math.sol';\\n\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\nlibrary Discounting{\\n    /// @notice calculates the discount for a given loan\\n    /// @param discountRate the discount rate\\n    /// @param fv the future value of the loan\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\n    /// @param maturityDate the maturity date of the loan\\n    /// @return result discount for the loan\\n    function calcDiscount(\\n        uint256 discountRate,\\n        uint256 fv,\\n        uint256 normalizedBlockTimestamp,\\n        uint256 maturityDate\\n    ) internal pure returns (uint256 result) {\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\n    }\\n\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\n    /// @param loanInterestRate the interest rate of the loan\\n    /// @param amount of the loan (principal)\\n    /// @param maturityDate the maturity date of the loan\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\n    /// @return fv future value of the loan\\n    function calcFutureValue(\\n        uint256 loanInterestRate,\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 recoveryRatePD\\n    ) internal view returns (uint256 fv) {\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\n        uint256 timeRemaining = 0;\\n        if (maturityDate > nnow) {\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\n        }\\n\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\n    }\\n\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\n    /// @param x the first value (minuend)\\n    /// @param y the second value (subtrahend)\\n    /// @return result result of the subtraction\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (y > x) {\\n            return 0;\\n        }\\n        return Math.safeSub(x, y);\\n    }\\n\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\n    /// @param timestamp the timestamp which should be normalized\\n    /// @return nTimestamp normalized timestamp\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\n        return (1 days) * (timestamp / (1 days));\\n    }\\n\\n    /// @notice rpow peforms a math pow operation with fixed point number\\n    /// adopted from ds-math\\n    /// @param x the base for the pow operation\\n    /// @param n the exponent for the pow operation\\n    /// @param base the base of the fixed point number\\n    /// @return z the result of the pow operation\\n\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(base, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7c09baef5bd2f51ed8e4bb1349e36311026fa024c0f78aab90a915f31a4b109f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// tinlake-math/math.sol -- Tinlake Math\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nlibrary Math {\\n    uint256 constant ONE = 10 ** 27;\\n\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'safe-add-failed');\\n    }\\n\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'safe-sub-failed');\\n    }\\n\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\n    }\\n\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\n        z = x / y;\\n    }\\n\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = safeMul(x, y) / ONE;\\n    }\\n\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        require(y > 0, 'division by zero');\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\n    }\\n\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\n        require(y > 0, 'division by zero');\\n        // always rounds up\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xe54a76a0187d338f79a8d84f2cfacda9473be91401dadbe5bcb7ae6e7b39c77b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.5.10;\\n\\nlibrary UnpackLoanParamtersLib {\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    /**\\n     *\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\n     */\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\n        return uint256(value) / 2 ** amount;\\n    }\\n\\n    /**\\n     * Unpack parameters from packed bytes32 data\\n     */\\n    function _unpackLoanTermsParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters &\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters &\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters &\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n            _bitShiftRight(principalAmountShifted, 152),\\n            _bitShiftRight(interestRateShifted, 128),\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\n        );\\n    }\\n\\n    /**\\n     * Unpack data from hex string which including informations about Loan\\n     */\\n    function unpackParametersFromBytes(\\n        bytes32 parameters\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\n    }\\n}\\n\",\"keccak256\":\"0x2a8c8c03b60f1e569f20ef15c5439074ac43b6824bb143526f08a332447d0f54\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General internal License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General internal License for more details.\\n//\\n// You should have received a copy of the GNU Affero General internal License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\nimport '../UnpackLoanParamtersLib.sol';\\nimport {DataTypes} from '../DataTypes.sol';\\nimport {Math} from '../Math.sol';\\nimport {Discounting} from '../Discounting.sol';\\n\\nimport 'hardhat/console.sol';\\n\\n/**\\n * @title Untangled's SecuritizaionPoolNAV contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Untangled Team\\n */\\nlibrary GenericLogic {\\n    uint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\n\\n    /** GETTER */\\n    /// @notice getter function for the maturityDate\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return maturityDate_ the maturityDate of the nft\\n    function maturityDate(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 nft_\\n    ) internal view returns (uint256 maturityDate_) {\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\n    }\\n\\n    /// @notice getter function for the risk group\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return risk_ the risk group of the nft\\n\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\n        return uint256(_poolStorage.details[nft_].risk);\\n    }\\n\\n    /// @notice getter function for the nft value\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return nftValue_ the value of the nft\\n\\n    /// @notice getter function for the future value\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\n    /// @return fv_ future value of the loan\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\n        return uint256(_poolStorage.details[nft_].futureValue);\\n    }\\n\\n    // function discountRate() internal view  returns (uint256) {\\n    //     return uint256(_getStorage().discountRate);\\n    // }\\n\\n    /// @notice getter function for the recovery rate PD\\n    /// @param riskID id of a risk group\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\n    function recoveryRatePD(\\n        DataTypes.RiskScore[] storage riskScores,\\n        uint256 riskID,\\n        uint256 termLength\\n    ) internal view returns (uint256 recoveryRatePD_) {\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\n        return\\n            Math.ONE -\\n            (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\n            (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\n    }\\n\\n    /// @notice getter function for the borrowed amount\\n    /// @param loan id of a loan\\n    /// @return borrowed_ borrowed amount of the loan\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\n    }\\n\\n    /** UTILITY FUNCTION */\\n    // TODO have to use modifier in main contract\\n    function getRiskScoreByIdx(\\n        DataTypes.RiskScore[] storage riskScores,\\n        uint256 idx\\n    ) internal view returns (DataTypes.RiskScore memory) {\\n        if (idx == 0 || riskScores.length == 0) {\\n            // Default risk score\\n            return\\n                DataTypes.RiskScore({\\n                    daysPastDue: 0,\\n                    advanceRate: 1000000,\\n                    penaltyRate: 0,\\n                    interestRate: 0,\\n                    probabilityOfDefault: 0,\\n                    lossGivenDefault: 0,\\n                    writeOffAfterGracePeriod: 0,\\n                    gracePeriod: 0,\\n                    collectionPeriod: 0,\\n                    writeOffAfterCollectionPeriod: 0,\\n                    discountRate: 0\\n                });\\n        }\\n        // Because risk score upload = risk score index onchain + 1\\n        idx = idx - 1;\\n        return riskScores[idx];\\n    }\\n\\n    /// @notice converts a uint256 to uint128\\n    /// @param value the value to be converted\\n    /// @return converted value to uint128\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    // TODO have to use modifier in main contract\\n\\n    /// @notice returns if a loan is written off\\n    /// @param loan the id of the loan\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\n    }\\n\\n    /// @notice calculates and returns the current NAV\\n    /// @return nav_ current NAV\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\n    }\\n\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\n    }\\n\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\n    /// @return totalDiscount the present value of the loans\\n    /// @return overdue the present value of the overdue loans\\n    /// @return writeOffs the present value of the written off loans\\n    function currentPVs(\\n        DataTypes.Storage storage _poolStorage\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\n        uint256 latestDiscount;\\n        uint256 overdueLoans;\\n        uint256 discountRate;\\n        uint256 lastNAVUpdate;\\n        {\\n            latestDiscount = _poolStorage.latestDiscount;\\n            overdueLoans = _poolStorage.overdueLoans;\\n            discountRate = _poolStorage.discountRate;\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\n        }\\n        if (latestDiscount == 0) {\\n            // all loans are overdue or writtenOff\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\n        }\\n\\n        uint256 errPV = 0;\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // find all new overdue loans since the last update\\n        // calculate the discount of the overdue loans which is needed\\n        // for the total discount calculation\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\n            uint256 b = _poolStorage.buckets[i];\\n            if (b != 0) {\\n                errPV = Math.safeAdd(\\n                    errPV,\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\n                );\\n                overdue = Math.safeAdd(overdue, b);\\n            }\\n        }\\n\\n        return (\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\n            Discounting.secureSub(\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\n                errPV\\n            ),\\n            // current overdue loans not written off\\n            Math.safeAdd(overdueLoans, overdue),\\n            // current write-offs loans\\n            currentWriteOffs(_poolStorage)\\n        );\\n    }\\n\\n    function currentAV(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 tokenId\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\n        uint256 _currentWriteOffs = 0;\\n        uint256 discountRate;\\n        uint256 latestDiscountOfNavAssetsID;\\n        uint256 lastNAVUpdate;\\n        uint256 overdueLoansOfNavAssetsID;\\n        {\\n            discountRate = _poolStorage.discountRate;\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\n        }\\n\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\n            _currentWriteOffs = Math.rmul(\\n                debt(_poolStorage, uint256(tokenId)),\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\n            );\\n        }\\n\\n        if (latestDiscountOfNavAssetsID == 0) {\\n            // all loans are overdue or writtenOff\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\n        }\\n\\n        uint256 errPV = 0;\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // loan is overdue since lastNAVUpdate\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\n            uint256 b = futureValue(_poolStorage, tokenId);\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\n            overdue = b;\\n        }\\n\\n        return (\\n            Discounting.secureSub(\\n                Math.rmul(\\n                    latestDiscountOfNavAssetsID,\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\n                ),\\n                errPV\\n            ),\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\n            _currentWriteOffs\\n        );\\n    }\\n\\n    /// @notice returns the sum of all write off loans\\n    /// @return sum of all write off loans\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\n            // multiply writeOffGroupDebt with the writeOff rate\\n\\n            sum = Math.safeAdd(\\n                sum,\\n                Math.rmul(\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\n                )\\n            );\\n        }\\n        return sum;\\n    }\\n\\n    /// @notice calculates and returns the current NAV and updates the state\\n    /// @return nav_ current NAV\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\n\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\n\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\n        }\\n\\n        _poolStorage.overdueLoans = overdue;\\n        _poolStorage.latestDiscount = totalDiscount;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\n        return _poolStorage.latestNAV;\\n    }\\n\\n    /// @notice re-calculates the nav in a non-optimized way\\n    ///  the method is not updating the NAV to latest block.timestamp\\n    /// @return nav_ current NAV\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\n        // reCalcTotalDiscount\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\n        /// @return latestDiscount_ returns the total discount of the active loans\\n        uint256 latestDiscount_ = 0;\\n        for (uint256 loanID = 1; loanID < _poolStorage.loanCount; loanID++) {\\n            bytes32 nftID_ = nftID(loanID);\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\n\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\n                continue;\\n            }\\n\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\n                _poolStorage.discountRate,\\n                futureValue(_poolStorage, nftID_),\\n                _poolStorage.lastNAVUpdate,\\n                maturityDate_\\n            );\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\n        }\\n\\n        _poolStorage.latestNAV = Math.safeAdd(\\n            latestDiscount_,\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\n        );\\n        _poolStorage.latestDiscount = latestDiscount_;\\n\\n        return _poolStorage.latestNAV;\\n    }\\n\\n    /// @notice returns the nftID for the underlying collateral nft\\n    /// @param loan the loan id\\n    /// @return nftID_ the nftID of the loan\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\n        return bytes32(loan);\\n    }\\n\\n    /// @notice returns the current valid write off group of a loan\\n    /// @param loan the loan id\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\n    function currentValidWriteOffGroup(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan\\n    ) internal view returns (uint256 writeOffGroup_) {\\n        bytes32 nftID_ = nftID(loan);\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\n\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\n\\n        uint128 lastValidWriteOff = type(uint128).max;\\n        uint128 highestOverdueDays = 0;\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\n            if (\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\n                overdueDays >= highestOverdueDays &&\\n                nnow >= maturityDate_ + overdueDays * 1 days\\n            ) {\\n                lastValidWriteOff = i;\\n                highestOverdueDays = overdueDays;\\n            }\\n        }\\n\\n        // returns type(uint128).max if no write-off group is valid for this loan\\n        return lastValidWriteOff;\\n    }\\n\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\n            chi_ = chargeInterest(\\n                _poolStorage.rates[rate_].chi,\\n                _poolStorage.rates[rate_].ratePerSecond,\\n                _poolStorage.rates[rate_].lastUpdated\\n            );\\n            penaltyChi_ = chargeInterest(\\n                _poolStorage.rates[rate_].penaltyChi,\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\n                _poolStorage.rates[rate_].lastUpdated\\n            );\\n        }\\n\\n        if (penaltyChi_ == 0) {\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\n        } else {\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\n        }\\n    }\\n\\n    function debtWithChi(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 chi,\\n        uint256 penaltyChi\\n    ) internal view returns (uint256 loanDebt) {\\n        if (penaltyChi == 0) {\\n            return toAmount(chi, _poolStorage.pie[loan]);\\n        } else {\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\n        }\\n    }\\n\\n    function chiAndPenaltyChi(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\n        chi = _poolStorage.rates[rate_].chi;\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\n    }\\n\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\n\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\n            chi_ = chargeInterest(\\n                _poolStorage.rates[rate].chi,\\n                _poolStorage.rates[rate].ratePerSecond,\\n                _poolStorage.rates[rate].lastUpdated\\n            );\\n            penaltyChi_ = chargeInterest(\\n                _poolStorage.rates[rate].penaltyChi,\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\n                _poolStorage.rates[rate].lastUpdated\\n            );\\n        }\\n\\n        if (penaltyChi_ == 0) {\\n            return toAmount(chi_, pie_);\\n        } else {\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\n        }\\n    }\\n\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\n        // rate category has to be initiated\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\n        _poolStorage.loanRates[loan] = rate;\\n        emit SetRate(nftID(loan), rate);\\n    }\\n\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\n        }\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\n        drip(_poolStorage, currentRate);\\n        drip(_poolStorage, newRate);\\n        uint256 pie_ = _poolStorage.pie[loan];\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\n        _poolStorage.loanRates[loan] = newRate;\\n        emit ChangeRate(nftID(loan), newRate);\\n    }\\n\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\n    }\\n\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\n            (uint256 chi, ) = compounding(\\n                _poolStorage.rates[rate].chi,\\n                _poolStorage.rates[rate].ratePerSecond,\\n                _poolStorage.rates[rate].lastUpdated,\\n                _poolStorage.rates[rate].pie\\n            );\\n            _poolStorage.rates[rate].chi = chi;\\n            if (\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\n            ) {\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\n                    ? _poolStorage.rates[rate].lastUpdated\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\n                (uint256 penaltyChi, ) = compounding(\\n                    _poolStorage.rates[rate].penaltyChi,\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\n                    lastUpdated_,\\n                    _poolStorage.rates[rate].pie\\n                );\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\n            }\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n        }\\n    }\\n\\n    /// Interest functions\\n    // @notice This function provides compounding in seconds\\n    // @param chi Accumulated interest rate over time\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\n    // @param lastUpdated When the interest rate was last updated\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\n        require(chi != 0);\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\n    }\\n\\n    // @notice This function charge interest on a interestBearingAmount\\n    // @param interestBearingAmount is the interest bearing amount\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\n    // @param lastUpdated last time the interest has been charged\\n    // @return interestBearingAmount + interest\\n    function chargeInterest(\\n        uint interestBearingAmount,\\n        uint ratePerSecond,\\n        uint lastUpdated\\n    ) internal view returns (uint) {\\n        if (block.timestamp >= lastUpdated) {\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\n        }\\n        return interestBearingAmount;\\n    }\\n\\n    function _chargeInterest(\\n        uint interestBearingAmount,\\n        uint ratePerSecond,\\n        uint lastUpdated,\\n        uint current\\n    ) internal pure returns (uint) {\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\n    }\\n\\n    // convert pie to debt/savings amount\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\n        return Math.rmul(_pie, chi);\\n    }\\n\\n    // convert debt/savings amount to pie\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\n        return Math.rdivup(amount, chi);\\n    }\\n\\n    function getAsset(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 agreementId\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\n        return _poolStorage.details[agreementId];\\n    }\\n\\n    /// @param amortizationUnitType AmortizationUnitType enum\\n    /// @return the corresponding length of the unit in seconds\\n    function _getAmortizationUnitLengthInSeconds(\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\n    ) private pure returns (uint256) {\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\n            return 1 minutes;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\n            return 1 hours;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\n            return 1 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\n            return 7 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\n            return 30 days;\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\n            return 365 days;\\n        } else {\\n            revert('Unknown amortization unit type.');\\n        }\\n    }\\n\\n    /**\\n     *   Get parameters by Agreement ID (commitment hash)\\n     */\\n    function unpackParamsForAgreementID(\\n        DataTypes.LoanEntry calldata loan\\n    ) internal pure returns (UnpackLoanParamtersLib.InterestParams memory params) {\\n        // The principal amount denominated in the aforementioned token.\\n        uint256 principalAmount;\\n        // The interest rate accrued per amortization unit.\\n        uint256 interestRate;\\n        // The amortization unit in which the repayments installments schedule is defined.\\n        uint256 rawAmortizationUnitType;\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\n        uint256 termLengthInAmortizationUnits;\\n        uint256 gracePeriodInDays;\\n\\n        (\\n            principalAmount,\\n            interestRate,\\n            rawAmortizationUnitType,\\n            termLengthInAmortizationUnits,\\n            gracePeriodInDays\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\n\\n        console.log('interestRate: ', interestRate);\\n\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\n            rawAmortizationUnitType\\n        );\\n\\n        // Calculate term length base on Amortization Unit and number\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\n\\n        return\\n            UnpackLoanParamtersLib.InterestParams({\\n                principalAmount: principalAmount,\\n                interestRate: interestRate,\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\n                amortizationUnitType: amortizationUnitType,\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xb58c8d4e37a21efee1638e5559f6c50218959b9e5a0e84a1162c4db5a767d470\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// https://github.com/centrifuge/tinlake\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\n\\n// Copyright (C) 2022 Centrifuge\\n// Copyright (C) 2023 Untangled.Finance\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\nimport '../UnpackLoanParamtersLib.sol';\\nimport {DataTypes} from '../DataTypes.sol';\\nimport {Math} from '../Math.sol';\\nimport {Discounting} from '../Discounting.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\n\\n/**\\n * @title Untangled's SecuritizaionPoolNAV contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Untangled Team\\n */\\nlibrary PoolNAVLogic {\\n    uint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\n\\n    uint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\n\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\n\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\n\\n    // events\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\n\\n    /** UTILITY FUNCTION */\\n\\n    function addLoan(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        DataTypes.LoanEntry calldata loanEntry\\n    ) public returns (uint256) {\\n        bytes32 _tokenId = bytes32(loan);\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\n\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\n\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\n\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\n            _poolStorage.riskScores,\\n            loanEntry.riskScore\\n        );\\n        uint256 principalAmount = loanParam.principalAmount;\\n        uint256 _convertedInterestRate;\\n\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\n        _poolStorage.loanCount++;\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\n            // If interest rate is not set\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\n        }\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\n        GenericLogic.accrue(_poolStorage, loan);\\n\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\n\\n        // increase NAV\\n        borrow(_poolStorage, loan, principalAmount);\\n        _incDebt(_poolStorage, loan, principalAmount);\\n\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\n\\n        return principalAmount;\\n    }\\n\\n    function setLoanMaturityDate(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 nftID_,\\n        uint256 maturityDate_\\n    ) internal {\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\n\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\n        );\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\n    }\\n\\n    /// @notice file allows governance to change parameters of the contract\\n    /// @param name name of the parameter\\n    /// @param value new value of the parameter\\n\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\n        if (name == 'discountRate') {\\n            uint256 oldDiscountRate = _poolStorage.discountRate;\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n            // the nav needs to be re-calculated based on the new discount rate\\n            // no need to recalculate it if initialized the first time\\n            if (oldDiscountRate != 0) {\\n                GenericLogic.reCalcNAV(_poolStorage);\\n            }\\n        } else {\\n            revert('unknown config parameter');\\n        }\\n    }\\n\\n    /// @notice file allows governance to change parameters of the contract\\n    /// @param name name of the parameter group\\n    /// @param writeOffPercentage_ the write off rate in percent\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\n\\n    function file(\\n        DataTypes.Storage storage _poolStorage,\\n        bytes32 name,\\n        uint256 rate_,\\n        uint256 writeOffPercentage_,\\n        uint256 overdueDays_,\\n        uint256 penaltyRate_,\\n        uint256 riskIndex\\n    ) public {\\n        if (name == 'writeOffGroup') {\\n            uint256 index = _poolStorage.writeOffGroups.length;\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\n            uint256 _convertedPenaltyRate = Math.ONE +\\n                (Math.ONE * penaltyRate_ * rate_) /\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\n            _poolStorage.writeOffGroups.push(\\n                DataTypes.WriteOffGroup(\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\n                    GenericLogic.toUint128(riskIndex)\\n                )\\n            );\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\n        } else {\\n            revert('unknown name');\\n        }\\n    }\\n\\n    /// @notice file manages different state configs for the pile\\n    /// only a ward can call this function\\n    /// @param what what config to change\\n    /// @param rate the interest rate group\\n    /// @param value the value to change\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\n        if (what == 'rate') {\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\n            if (_poolStorage.rates[rate].chi == 0) {\\n                _poolStorage.rates[rate].chi = Math.ONE;\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n            } else {\\n                GenericLogic.drip(_poolStorage, rate);\\n            }\\n            _poolStorage.rates[rate].ratePerSecond = value;\\n        } else if (what == 'penalty') {\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\n            } else {\\n                GenericLogic.drip(_poolStorage, rate);\\n            }\\n\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\n        } else {\\n            revert('unknown parameter');\\n        }\\n    }\\n\\n    /// @notice borrow updates the NAV for a new borrowed loan\\n    /// @param loan the id of the loan\\n    /// @param amount the amount borrowed\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\n    function borrow(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 amount\\n    ) private returns (uint256 navIncrease) {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\n\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        // uint256 beforeNAV = latestNAV;\\n\\n        // calculate amount including fixed fee if applicatable\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n\\n        // calculate future value FV\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        uint256 fv = Discounting.calcFutureValue(\\n            _rate.ratePerSecond,\\n            amount,\\n            maturityDate_,\\n            GenericLogic.recoveryRatePD(\\n                _poolStorage.riskScores,\\n                nftDetail.risk,\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n            )\\n        );\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\n        );\\n\\n        // add future value to the bucket of assets with the same maturity date\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\n\\n        // increase borrowed amount for future ceiling computations\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\n        );\\n\\n        // return increase NAV amount\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\n\\n        return navIncrease;\\n    }\\n\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\n        _poolStorage.latestNAV = Discounting.secureSub(\\n            _poolStorage.latestNAV,\\n            Math.rmul(\\n                amount,\\n                GenericLogic.toUint128(\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\n                )\\n            )\\n        );\\n        decDebt(_poolStorage, loan, amount);\\n    }\\n\\n    function _calcFutureValue(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 _debt,\\n        uint256 _maturityDate\\n    ) private view returns (uint256) {\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\n        uint256 fv = Discounting.calcFutureValue(\\n            _rate.ratePerSecond,\\n            _debt,\\n            _maturityDate,\\n            GenericLogic.recoveryRatePD(\\n                _poolStorage.riskScores,\\n                nftDetail.risk,\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n            )\\n        );\\n        return fv;\\n    }\\n\\n    /// @notice repay updates the NAV for a new repaid loan\\n    /// @param loans the ids of the loan\\n    /// @param amounts the amounts repaid\\n    function repayLoan(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256[] calldata loans,\\n        uint256[] calldata amounts\\n    ) external returns (uint256[] memory, uint256[] memory) {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        uint256 numberOfLoans = loans.length;\\n\\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\\n\\n        for (uint256 i; i < numberOfLoans; i++) {\\n            uint256 loan = loans[i];\\n            uint256 amount = amounts[i];\\n\\n            // re-define: prevent stack too deep\\n            DataTypes.Storage storage __poolStorage = _poolStorage;\\n\\n            GenericLogic.accrue(__poolStorage, loan);\\n\\n            if (nnow > __poolStorage.lastNAVUpdate) {\\n                GenericLogic.calcUpdateNAV(__poolStorage);\\n            }\\n\\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\\n\\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\\n            if (amount > _currentDebt) {\\n                amount = _currentDebt;\\n            }\\n\\n            repayAmounts[i] = amount;\\n            previousDebts[i] = _currentDebt;\\n\\n            // case 1: repayment of a written-off loan\\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\\n                // update nav with write-off decrease\\n                _decreaseLoan(__poolStorage, loan, amount);\\n                continue;\\n            }\\n\\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\n            uint256 fvDecrease = preFV;\\n\\n            // prevent stack too deep\\n            {\\n                uint256 fv = 0;\\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\n                if (_debt != 0) {\\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\\n                    if (preFV >= fv) {\\n                        fvDecrease = Math.safeSub(preFV, fv);\\n                    } else {\\n                        fvDecrease = 0;\\n                    }\\n                }\\n\\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\\n            }\\n\\n            // case 2: repayment of a loan before or on maturity date\\n            if (maturityDate_ >= nnow) {\\n                // remove future value decrease from bucket\\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\\n\\n                uint256 discountDecrease = Discounting.calcDiscount(\\n                    __poolStorage.discountRate,\\n                    fvDecrease,\\n                    nnow,\\n                    maturityDate_\\n                );\\n\\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\\n                    discountDecrease\\n                );\\n\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\\n            } else {\\n                // case 3: repayment of an overdue loan\\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\\n                    fvDecrease\\n                );\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\\n            }\\n\\n            decDebt(__poolStorage, loan, amount);\\n            emit Repay(bytes32(loan), amount);\\n        }\\n        return (repayAmounts, previousDebts);\\n    }\\n\\n    /// @notice writeOff writes off a loan if it is overdue\\n    /// @param loan the id of the loan\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\n\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\n\\n        // can not write-off healthy loans\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\n        // check the writeoff group based on the amount of days overdue\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\n\\n        if (\\n            writeOffGroupIndex_ < type(uint128).max &&\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\n        ) {\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\n        }\\n    }\\n\\n    /// @notice internal function for the write off\\n    /// @param loan the id of the loan\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\n    /// @param nftID_ the nftID of the loan\\n    /// @param maturityDate_ the maturity date of the loan\\n    function _writeOff(\\n        DataTypes.Storage storage _poolStorage,\\n        uint256 loan,\\n        uint256 writeOffGroupIndex_,\\n        bytes32 nftID_,\\n        uint256 maturityDate_\\n    ) internal {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n        // Ensure we have an up to date NAV\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\n\\n        // first time written-off\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\n                // write off after the maturity date\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\n                    fv\\n                );\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\n            } else {\\n                // write off before or on the maturity date\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\n\\n                uint256 pv = Math.rmul(\\n                    fv,\\n                    Discounting.rpow(\\n                        _poolStorage.discountRate,\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\n                        Math.ONE\\n                    )\\n                );\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\n                    pv\\n                );\\n\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\n            }\\n        }\\n\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\n        _poolStorage.latestNAV = Math.safeAdd(\\n            latestNAV_,\\n            Math.rmul(\\n                GenericLogic.debt(_poolStorage, loan),\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\n            )\\n        );\\n    }\\n\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\n\\n        // no change in risk group\\n        if (risk_ == GenericLogic.risk(_poolStorage, nftID_)) {\\n            return;\\n        }\\n\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\n\\n        // update nav -> latestNAVUpdate = now\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\n        }\\n\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\n        // change to new rate interestRate immediately in pile if loan debt exists\\n        uint256 loan = uint256(nftID_);\\n        if (_poolStorage.pie[loan] != 0) {\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\n            uint256 _convertedInterestRate = Math.ONE +\\n                (riskParam.interestRate * Math.ONE) /\\n                (ONE_HUNDRED_PERCENT * 365 days);\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\n                // If interest rate is not set\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\n            }\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\n        }\\n\\n        // no currencyAmount borrowed yet\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\n            return;\\n        }\\n\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\n\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\n        // New interest rate leads to a future value.\\n        // recalculation required\\n        {\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\n\\n            uint256 navDecrease = Discounting.calcDiscount(_poolStorage.discountRate, fvDecrease, nnow, maturityDate_);\\n\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\n\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\n                _poolStorage.latestDiscountOfNavAssets[nftID_],\\n                navDecrease\\n            );\\n\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\n        }\\n\\n        // update latest NAV\\n        // update latest Discount\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\n            Discounting.calcFutureValue(\\n                _rate.ratePerSecond,\\n                GenericLogic.debt(_poolStorage, loan),\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\n                GenericLogic.recoveryRatePD(\\n                    _poolStorage.riskScores,\\n                    risk_,\\n                    nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\n                )\\n            )\\n        );\\n\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\n        uint256 navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fvIncrease, nnow, maturityDate_);\\n\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\n\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\n\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\n    }\\n\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\n        uint256 rate = _poolStorage.loanRates[loan];\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\n\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\n\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\n    }\\n\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\n        uint256 rate = _poolStorage.loanRates[loan];\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\n        if (penaltyChi_ > 0) {\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\n        }\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\n\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\n\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x98382ec098a95273fb8623681978513fdbcbd6a1f42797b38d4147ab13724147\",\"license\":\"AGPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613b9f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632f3e0ce01461007157806356a5a299146100a8578063a2cfdc9b146100ca578063a4571bbc146100f8578063b77604c514610118578063d580a21a14610138575b600080fd5b81801561007d57600080fd5b5061009161008c3660046134c7565b610158565b60405161009f92919061357b565b60405180910390f35b8180156100b457600080fd5b506100c86100c33660046135a0565b6104d3565b005b8180156100d657600080fd5b506100ea6100e53660046135cc565b6108e7565b60405190815260200161009f565b81801561010457600080fd5b506100c861011336600461360f565b610c83565b81801561012457600080fd5b506100c8610133366004613631565b610e81565b81801561014457600080fd5b506100c86101533660046135a0565b61110e565b6060806000610166426111dc565b9050856000816001600160401b038111156101835761018361367d565b6040519080825280602002602001820160405280156101ac578160200160208202803683370190505b5090506000826001600160401b038111156101c9576101c961367d565b6040519080825280602002602001820160405280156101f2578160200160208202803683370190505b50905060005b838110156104c25760008b8b8381811061021457610214613693565b90506020020135905060008a8a8481811061023157610231613693565b90506020020135905060008e905061024981846111fe565b80602401548811156102605761025e8161121e565b505b600061026c82856112da565b9050600061027a8386611301565b905080841115610288578093505b8388878151811061029b5761029b613693565b602002602001018181525050808787815181106102ba576102ba613693565b6020026020010181815250506102d08386611404565b156102ea576102e0838686611436565b50505050506104b0565b60006102f684876114ce565b90508060008061030685896114ed565b905080156103395761031a878a838961153d565b91508184106103345761032d84836114ed565b9250610339565b600092505b61034282611603565b60008a8152601d89016020526040902080546001600160801b0319166001600160801b039290921691909117905550508b8410610414576000848152601f8601602052604090205461039490826114ed565b6000858152601f8701602052604081209190915560218601546103b990838f88611670565b90506103c98660230154826116a3565b602387015560008881526026870160205260409020546103e990826116a3565b6000898152602688016020526040902055602286015461040990826116a3565b602287015550610468565b6104228560250154826114ed565b6025860155600087815260278601602052604090205461044290826114ed565b6000888152602787016020526040902055602285015461046290826116a3565b60228601555b6104738588886116c6565b60405186815287907f59454c2c3385a95399182e59da91521ee5621f0211b9f016ff08b2e8e5fc98439060200160405180910390a2505050505050505b806104ba816136bf565b9150506101f8565b50909a909950975050505050505050565b60006104de426111dc565b6000848152601d860160205260409020600101549091506001600160801b0316820361050a5750505050565b61051382611603565b6000848152601d86016020526040902060010180546001600160801b0319166001600160801b0392909216919091179055602484015481111561055b576105598461121e565b505b600083815260188501602052604090205483901561063f57600061058286600101856117ee565b9050600061059361271060646136d8565b6105a1906301e133806136d8565b676765c793fa10079d601b1b836060015163ffffffff166105c291906136d8565b6105cc91906136ef565b6105e190676765c793fa10079d601b1b613711565b6000818152601789016020526040812060020154919250036106105761061087637261746560e01b8384611998565b61061b878483611b90565b50606001516000858152601d87016020526040902063ffffffff909116600e909101555b61064985856114ce565b600003610657575050505050565b600061066386866112da565b9050600061067187876114ce565b905060006106858860210154838786611670565b6000848152601f8a0160205260409020549091506106a390836114ed565b6000848152601f8a01602052604090205560238801546106c390826116a3565b602389015560008781526026890160205260409020546106e390826116a3565b600088815260268a016020526040902055602288015461070390826116a3565b6022890155505060008281526019870160209081526040808320548352601789018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c08201529061078d8885611d33565b90506107d96107d483604001516107a48b88611301565b6107ae8c8c6112da565b6107cf8d6001018c8860c001518960e001516107ca9190613724565b611e70565b611f11565b611603565b6000888152601d8a016020526040812080546001600160801b0319166001600160801b03939093169290921790915561081289896114ce565b905060006108268a60210154838988611670565b6000868152601f8c0160205260409020549091506108449083611f69565b6000868152601f8c01602052604090205560238a01546108649082611f69565b60238b0155600089815260268b01602052604081208054839290610889908490613711565b909155505060228a015461089d9082611f69565b60228b0155604080518a8152602081018a90527ff51d891f73afa0326444ca250f11a78ec4ede8d4beaf8c2cfe9f29d5f9e5629c910160405180910390a150505050505050505050565b600082816108f484611fb9565b905061090660e0850160c08601613737565b6000838152601d88016020908152604090912060010180546001600160801b03191660ff93909316929092179091556109419085018561375a565b6000838152601d880160209081526040918290206002810180546001600160a01b0319166001600160a01b03959095169490941790935560a08701356006909301929092556109959190860190860161375a565b6000838152601d8801602052604090206003810180546001600160a01b0319166001600160a01b0393909316929092179091556060850135600482015560808501356005909101556109ee610100850160e08601613783565b6000838152601d880160205260409020600701805460ff191660018381811115610a1a57610a1a6137a4565b02179055506000828152601d870160209081526040918290208287013560088201558351600982015590830151600a82015590820151600b8201556060820151600c909101805460ff19166001836005811115610a7957610a796137a4565b021790555060808101516000838152601d880160205260408120600d81019290925560a0830151600e90920191909155610ac860018801610ac060e0880160c08901613737565b60ff166117ee565b82519091506000610adc61271060646136d8565b6020840151610af19063ffffffff16846136d8565b610afb91906136ef565b9150610b0a61271060646136d8565b610b18906301e133806136d8565b676765c793fa10079d601b1b846060015163ffffffff16610b3991906136d8565b610b4391906136ef565b610b5890676765c793fa10079d601b1b613711565b601a8a018054600090815260288c01602052604081208890558154929350610b7f836136bf565b9190505550610b938986866040015161209e565b600081815260178a0160205260408120600201549003610bc057610bc089637261746560e01b8384611998565b610bcb898983612183565b610bd589896111fe565b6000888152601b8a016020526040902054610bf09083611f69565b6000898152601b8b016020526040902055601c890154610c109083611f69565b601c8a0155610c20898984612247565b50610c2c8989846124c9565b6000858152601d8a01602052604090819020905186917f22998f2397a6b1e965f5fdc5684d29ab2c2ebff824295de89aab9465b66822cd91610c6f918691613804565b60405180910390a250979650505050505050565b6000818152601e83016020526040902054600160801b900460ff1615610ce65760405162461bcd60e51b815260206004820152601360248201527237b7363c96b0baba3416bbb934ba3296b7b33360691b60448201526064015b60405180910390fd5b806000610cf384836112da565b905060008111610d3b5760405162461bcd60e51b81526020600482015260136024820152721b1bd85b8b591bd95ccb5b9bdd0b595e1a5cdd606a1b6044820152606401610cdd565b6000610d46426111dc565b90506000610d548686611d33565b90506000610d728760010183604001516001600160801b03166117ee565b9050828160e0015163ffffffff1685610d8b9190613711565b1115610dd75760405162461bcd60e51b815260206004820152601b60248201527a6d617475726974792d646174652d696e2d7468652d66757475726560281b6044820152606401610cdd565b6000610de388886125c8565b90506001600160801b0381108015610e2c575080610e0e676765c793fa10079d601b1b6103e86136d8565b610e189190613711565b600088815260198a01602052604090205414155b15610e7757610e3e8888838989612735565b60405160008152819087907fa0d657cd77a4a207fbc8f50dcd70ea7d5bb4a07cbb549bf7ec75a5768a30e6f99060200160405180910390a35b5050505050505050565b856c077726974654f666647726f757609c1b036110ce5760208701546000610eac61271060646136d8565b610eba906301e133806136d8565b610ecf676765c793fa10079d601b1b896136d8565b610ed991906136ef565b610eee90676765c793fa10079d601b1b613711565b90506000610eff61271060646136d8565b610f14676765c793fa10079d601b1b896136d8565b610f1e91906136ef565b610f3390676765c793fa10079d601b1b613724565b90506000610f4461271060646136d8565b610f5161271060646136d8565b610f5b91906136d8565b610f69906301e133806136d8565b89610f7f88676765c793fa10079d601b1b6136d8565b610f8991906136d8565b610f9391906136ef565b610fa890676765c793fa10079d601b1b613711565b90506000610fb962015180896136ef565b90508b6020016040518060600160405280610fd386611603565b6001600160801b03168152602001610fea84611603565b6001600160801b0316815260200161100189611603565b6001600160801b0390811690915282546001818101855560009485526020948590208451958501518416600160801b02958416959095176002909202909401908155604090920151919092018054919092166001600160801b0319919091161790556110958c637261746560e01b61108f611089676765c793fa10079d601b1b6103e86136d8565b89611f69565b87611998565b6110c48c6670656e616c747960c81b6110be611089676765c793fa10079d601b1b6103e86136d8565b85611998565b5050505050611105565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e206e616d6560a01b6044820152606401610cdd565b50505050505050565b816b646973636f756e745261746560a01b0361119457602183015461113661271060646136d8565b611144906301e133806136d8565b611159676765c793fa10079d601b1b846136d8565b61116391906136ef565b61117890676765c793fa10079d601b1b613711565b6021850155801561118e5761118c8461290b565b505b50505050565b60405162461bcd60e51b81526020600482015260186024820152773ab735b737bbb71031b7b73334b3903830b930b6b2ba32b960411b6044820152606401610cdd565b505050565b60006111eb62015180836136ef565b6111f890620151806136d8565b92915050565b600081815260198301602052604090205461121a9083906129ba565b5050565b60008060008061122d85612b7f565b92509250925060005b85601a0154811015611297576000818152602887016020526040812054908061125f8984612c6d565b50600094855260278b01602090815260408087209290925560268c01905290932092909255506112909050816136bf565b9050611236565b5060258501829055602385018390556112b96112b38484611f69565b82611f69565b60228601556112c7426111dc565b6024860155505050602290910154919050565b6000818152601d83016020526040902054600160801b90046001600160801b031692915050565b60008181526019830160209081526040808320548084526017860190925282206001810154600482015460059092015490919065ffffffffffff1642106113ae576000838152601787016020526040902060018101546002820154600590920154611374929065ffffffffffff16612d96565b60008481526017880160205260409020600481015460038201546005909201549294506113ab9290919065ffffffffffff16612d96565b90505b806000036113dc5760008581526018870160205260409020546113d2908390612db6565b93505050506111f8565b6113d2816113ff848960180160008a815260200190815260200160002054612db6565b612db6565b600061141d676765c793fa10079d601b1b6103e86136d8565b6000928352601993909301602052506040902054101590565b60228301546114be906114b9836114ab60208801611461676765c793fa10079d601b1b6103e86136d8565b600089815260198b01602052604090205461147c9190613724565b8154811061148c5761148c613693565b60009182526020909120600290910201546001600160801b0316611603565b6001600160801b0316612dbe565b6116a3565b60228401556111d78383836116c6565b6000908152601d9190910160205260409020546001600160801b031690565b6000826114fa8382613724565b91508111156111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610cdd565b60008381526019850160209081526040808320548352601787018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152816115c08787611d33565b905060006115f7836040015187876107cf8c60010187604001516001600160801b03168860c001518960e001516107ca9190613724565b98975050505050505050565b60006001600160801b0382111561166c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610cdd565b5090565b600061169a846116958761168486886114ed565b676765c793fa10079d601b1b612de0565b612e9e565b95945050505050565b6000828211156116b5575060006111f8565b6116bf83836114ed565b9392505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff1642146117115760405162461bcd60e51b8152600401610cdd9061391e565b60008181526017850160205260409020600401548015611738576117358184612ee3565b92505b60008281526017860160205260408120600101546117569085612ee3565b600086815260188801602052604090205490915061177490826114ed565b600086815260188801602090815260408083209390935585825260178901905220546117a090826114ed565b6000848152601788016020526040902055846040518581527f9d36b5b661e3fc41681961cd76e4b5de0b5f8c5af42446cf86f291efa1363fe6906020015b60405180910390a2505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915281158061185357508254155b156118b9575060408051610160810182526000808252620f42406020830152918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526111f8565b6118c4600183613724565b91508282815481106118d8576118d8613693565b600091825260209182902060408051610160810182526002909302909101805463ffffffff8082168552600160201b808304821696860196909652600160401b808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e085015260019091015480821661010085015293840481166101208401529204909116610140820152905092915050565b82637261746560e01b03611a7457806000036119f55760405162461bcd60e51b815260206004820152601c60248201527b0726174652d7065722d7365636f6e642d63616e2d6e6f742d62652d360241b6044820152606401610cdd565b60008281526017850160205260408120600101549003611a4f5760008281526017850160205260409020676765c793fa10079d601b1b6001820155600501805465ffffffffffff19164265ffffffffffff16179055611a59565b611a5984836129ba565b6000828152601785016020526040902060020181905561118e565b826670656e616c747960c81b03611b545780600003611ad55760405162461bcd60e51b815260206004820152601f60248201527f70656e616c74792d7065722d7365636f6e642d63616e2d6e6f742d62652d30006044820152606401610cdd565b60008281526017850160205260408120600401549003611b2f5760008281526017850160205260409020676765c793fa10079d601b1b6004820155600501805465ffffffffffff19164265ffffffffffff16179055611b39565b611b3984836129ba565b6000828152601785016020526040902060030181905561118e565b60405162461bcd60e51b81526020600482015260116024820152703ab735b737bbb7103830b930b6b2ba32b960791b6044820152606401610cdd565b60008181526017840160205260408120600101549003611bc25760405162461bcd60e51b8152600401610cdd9061394e565b611bd9676765c793fa10079d601b1b6103e86136d8565b8110611c135760008181526017840160205260409020600501805465ffffffffffff60301b1916600160301b4265ffffffffffff16021790555b6000828152601984016020526040902054611c2e84826129ba565b611c3884836129ba565b600083815260188501602090815260408083205484845260178801909252822060010154909190611c699083612db6565b6000848152601788016020526040902054909150611c8790836114ed565b6000848152601788016020526040808220929092558581522060010154611cae9082612ee3565b6000868152601888016020818152604080842085905588845260178b0182528320549289905252611cde91611f69565b600085815260178801602090815260408083209390935587825260198901905220849055846040518581527f8e2ce1fcb819c387686609f23cdd597abcdd18b0a3bcf284394b65c74101f8c4906020016117de565b611d3b6133c5565b6000828152601d8401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff1690811115611de657611de66137a4565b6001811115611df757611df76137a4565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff166005811115611e4057611e406137a4565b6005811115611e5157611e516137a4565b8152600d8201546020820152600e909101546040909101529392505050565b600080611e7d85856117ee565b9050611e8c61271060646136d8565b611e9961271060646136d8565b611ea391906136d8565b611eb1906301e133806136d8565b838260a0015163ffffffff16836080015163ffffffff16676765c793fa10079d601b1b611ede91906136d8565b611ee891906136d8565b611ef291906136d8565b611efc91906136ef565b61169a90676765c793fa10079d601b1b613724565b600080611f1d426111dc565b9050600081851115611f3657611f3385836114ed565b90505b611f5e611f58611f528984676765c793fa10079d601b1b612de0565b88612dbe565b85612dbe565b979650505050505050565b600082611f768382613711565b91508110156111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610cdd565b611fc1613449565b6000806000806000611fd68760400135612eef565b60408051808201909152600e81526d034b73a32b932b9ba2930ba329d160951b6020820152949950929750909550935091506120129085612f12565b6000836005811115612026576120266137a4565b9050600061203382612f57565b61203d90856136d8565b90506040518060c001604052808881526020018a6080013581526020018a608001358361206a9190613711565b8152602001836005811115612081576120816137a4565b815260200185815260200187815250975050505050505050919050565b6120a883836114ce565b1561210a5760405162461bcd60e51b815260206004820152602c60248201527f63616e2d6e6f742d6368616e67652d6d61747572697479446174652d6f75747360448201526b1d185b991a5b99cb5919589d60a21b6064820152608401610cdd565b6121166107d4826111dc565b6000838152601d850160205260409081902080546001600160801b03938416600160801b029316929092179091555182907fe4cc80f41f018b5290a16d068ce1312611f47f682daaa056e36456c59f853d5a906121769084815260200190565b60405180910390a2505050565b6000828152601884016020526040902054156121d15760405162461bcd60e51b815260206004820152600d60248201526c1b9bdb8b5e995c9bcb5919589d609a1b6044820152606401610cdd565b600081815260178401602052604081206001015490036122035760405162461bcd60e51b8152600401610cdd9061394e565b60008281526019840160205260409020819055816040518281527f502a7eca8a181ab7f1fac839ea906869797df68c21326b477c0da6e7f962fbc990602001612176565b600080612253426111dc565b905083600061226287836112da565b90508281116122be5760405162461bcd60e51b815260206004820152602260248201527f6d617475726974792d646174652d69732d6e6f742d696e2d7468652d66757475604482015261726560f01b6064820152608401610cdd565b86602401548311156122d5576122d38761121e565b505b6000868152601988016020908152604080832054835260178a018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906123588989611d33565b9050600061238f836040015189866107cf8e60010187604001516001600160801b03168860c001518960e001516107ca9190613724565b90506123a76107d46123a18c886114ce565b83611f69565b6000868152601d8c016020908152604080832080546001600160801b0319166001600160801b039590951694909417909355868252601f8d01905220546123ee9082611f69565b6000858152601f8c01602052604090205561242f6107d46124298c8c6000908152601e9190910160205260409020546001600160801b031690565b8a611f69565b60008a8152601e8c016020526040902080546001600160801b0319166001600160801b039290921691909117905560218a015461246e90828887611670565b965061247e8a6023015488611f69565b60238b0155600085815260268b016020526040812080548992906124a3908490613711565b909155505060228a01546124b79088611f69565b60228b01555050505050509392505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff1642146125145760405162461bcd60e51b8152600401610cdd9061391e565b60008181526017850160205260408120600101546125329084612ee3565b60008581526018870160205260409020549091506125509082611f69565b6000858152601887016020908152604080832093909355848252601788019052205461257c9082611f69565b6000838152601787016020526040902055836040518481527f025cdc0b70e4d52ce267700d2925d12f1f4046b82d6eea316cb83391813f1c479060200160405180910390a25050505050565b600081816125d685836112da565b905060006125e3426111dc565b905060006125f18785611d33565b9050600060018260400151612606919061397a565b90506001600160801b036000805b60208b01546001600160801b038216101561271e5760008b602001826001600160801b03168154811061264957612649613693565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c602001836001600160801b03168154811061269857612698613693565b60009182526020909120600160029092020101546001600160801b03161480156126d45750826001600160801b0316816001600160801b031610155b80156126ff57506126e881620151806139a1565b6126fb906001600160801b031689613711565b8710155b1561270b578193508092505b5080612716816139cc565b915050612614565b50506001600160801b031698975050505050505050565b6000612740426111dc565b90508560240154811115612759576127578661121e565b505b60228601546127688787611404565b61288457600061277888866114ce565b90508361278889602401546111dc565b11156127de5761279c8860250154826116a3565b602589015560008581526027890160205260409020546127bc90826116a3565b600086815260278a0160205260409020556127d782826116a3565b9150612882565b6000848152601f890160205260409020546127f990826114ed565b6000858152601f8a016020526040812091909155602189015461283390839061282e906116846128288a6111dc565b896114ed565b612dbe565b90506128438960230154826116a3565b60238a0155600086815260268a01602052604090205461286390826116a3565b600087815260268b01602052604090205561287e83826116a3565b9250505b505b6128b08787876128a1676765c793fa10079d601b1b6103e86136d8565b6128ab9190613711565b611b90565b6128fa816128f56128c18a8a611301565b8a60200189815481106128d6576128d6613693565b60009182526020909120600290910201546001600160801b0316612dbe565b611f69565b876022018190555050505050505050565b60008060015b83601a01548110156129925780600061292a86836112da565b9050856024015481101561293f575050612980565b600061295e876021015461295389866114ce565b896024015485611670565b905061296a8582611f69565b6000938452602688016020526040909320555091505b8061298a816136bf565b915050612911565b506129a9816128f5856022015486602301546114ed565b602284018190556023909301555090565b600081815260178301602052604090206005015465ffffffffffff16421061121a57600081815260178301602052604081206001810154600282015460058301549254612a0f9365ffffffffffff1690613070565b5060008381526017850160205260409020600181018290556003015490915015801590612a5d57506000828152601784016020526040902060050154600160301b900465ffffffffffff1615155b8015612a8b57506000828152601784016020526040902060050154600160301b900465ffffffffffff164210155b15612b5057600082815260178401602052604081206005015465ffffffffffff600160301b82048116911611612ae3576000838152601785016020526040902060050154600160301b900465ffffffffffff16612b00565b600083815260178501602052604090206005015465ffffffffffff165b6000848152601786016020526040812060048101546003820154915465ffffffffffff9490941694509192612b389291908590613070565b50600085815260178701602052604090206004015550505b50600090815260179190910160205260409020600501805465ffffffffffff19164265ffffffffffff16179055565b6023810154602582015460218301546024840154600093849384939192909190838503612bc157600083612bb28a61310b565b96509650965050505050612c66565b600080612bcd426111dc565b9050825b81811015612c2a576000818152601f8c0160205260409020548015612c1557612c06846128f58361282e8a61168489896114ed565b9350612c128a82611f69565b99505b50612c238162015180613711565b9050612bd1565b50612c46612c408761282e8761168486896114ed565b836116a3565b612c50868a611f69565b612c598c61310b565b9850985098505050505050505b9193909250565b6021820154600082815260268401602090815260408083205460248701546027880190935290832054929384938493849391612ca98a8a611404565b15612ce2576000612cba8b8b6125c8565b9050612cde612cc98c8c611301565b8c60200183815481106128d6576128d6613693565b9550505b82600003612cfc57600097509550929350612d8f92505050565b600080612d08426111dc565b90506000612d1e612d198e8e6112da565b6111dc565b9050848110158015612d2f57508181105b15612d5a576000612d408e8e6114ce565b9050612d548161282e8a61168487876114ed565b909a5092505b612d75612d6f8761282e8a611684878b6114ed565b846116a3565b612d7f858c611f69565b899a509a509a5050505050505050505b9250925092565b6000814210612dae57612dab8484844261317c565b93505b509192915050565b60006116bf82845b6000676765c793fa10079d601b1b612dd68484613195565b6116bf91906136ef565b6000838015612e8057600184168015612dfb57859250612dff565b8392505b50600283046002850494505b8415612e7a578586028687820414612e2257600080fd5b81810181811015612e3257600080fd5b8590049650506001851615612e6f578583028387820414158715151615612e5857600080fd5b81810181811015612e6857600080fd5b8590049350505b600285049450612e0b565b50612e96565b838015612e905760009250612e94565b8392505b505b509392505050565b6000808211612ebf5760405162461bcd60e51b8152600401610cdd906139fa565b81612dd6612ed885676765c793fa10079d601b1b613195565b6128f56002866136ef565b60006116bf82846131f7565b6000806000806000612f008661323c565b939a9299509097509550909350915050565b61121a8282604051602401612f28929190613a24565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526132c1565b600080826005811115612f6c57612f6c6137a4565b03612f795750603c919050565b6001826005811115612f8d57612f8d6137a4565b03612f9b5750610e10919050565b6002826005811115612faf57612faf6137a4565b03612fbe575062015180919050565b6003826005811115612fd257612fd26137a4565b03612fe1575062093a80919050565b6004826005811115612ff557612ff56137a4565b03613004575062278d00919050565b6005826005811115613018576130186137a4565b0361302857506301e13380919050565b60405162461bcd60e51b815260206004820152601f60248201527f556e6b6e6f776e20616d6f7274697a6174696f6e20756e697420747970652e006044820152606401610cdd565b600080834210156130c35760405162461bcd60e51b815260206004820152601e60248201527f74696e6c616b652d6d6174682f696e76616c69642d74696d657374616d7000006044820152606401610cdd565b856000036130d057600080fd5b60006130de8787874261317c565b9050806130fd6130ee8387612dbe565b6130f88a88612dbe565b6114ed565b925092505094509492505050565b6000805b602083015481101561317657613162826128f561314d868561313e676765c793fa10079d601b1b6103e86136d8565b6131489190613711565b6132cd565b8660200185815481106128d6576128d6613693565b91508061316e816136bf565b91505061310f565b50919050565b600061169a61318f856116848686613724565b86612dbe565b60008115806131b9575082826131ab81836136d8565b92506131b790836136ef565b145b6111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610cdd565b60008082116132185760405162461bcd60e51b8152600401610cdd906139fa565b81612dd661323185676765c793fa10079d601b1b613195565b6128f58560016114ed565b600080808080600160981b600160f81b03861662ffffff60801b8716600f607c1b881663100000006001607c1b038916630ff000008a1661327e85609861338d565b61328985608061338d565b61329485607c61338d565b61329f85601c61338d565b6132aa85601461338d565b939f929e50909c509a509098509650505050505050565b6132ca816133a4565b50565b600081815260178301602052604081206001810154600482015482546005909301549192909165ffffffffffff16421061336d576000858152601787016020526040902060018101546002820154600590920154613333929065ffffffffffff16612d96565b600086815260178801602052604090206004810154600382015460059092015492955061336a9290919065ffffffffffff16612d96565b91505b8160000361337f576113d28382612db6565b6113d2826113ff8584612db6565b600061339a826002613b5d565b6116bf90846136ef565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a08201905b815260200160008152602001600081525090565b6040518060c0016040528060008152602001600081526020016000815260200160006005811115613435576134356137a4565b60008083601f84011261348e57600080fd5b5081356001600160401b038111156134a557600080fd5b6020830191508360208260051b85010111156134c057600080fd5b9250929050565b6000806000806000606086880312156134df57600080fd5b8535945060208601356001600160401b03808211156134fd57600080fd5b61350989838a0161347c565b9096509450604088013591508082111561352257600080fd5b5061352f8882890161347c565b969995985093965092949392505050565b600081518084526020808501945080840160005b8381101561357057815187529582019590820190600101613554565b509495945050505050565b60408152600061358e6040830185613540565b828103602084015261169a8185613540565b6000806000606084860312156135b557600080fd5b505081359360208301359350604090920135919050565b60008060008385036101408112156135e357600080fd5b8435935060208501359250610100603f198201121561360157600080fd5b506040840190509250925092565b6000806040838503121561362257600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561364c57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016136d1576136d16136a9565b5060010190565b80820281158282048414176111f8576111f86136a9565b60008261370c57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111f8576111f86136a9565b818103818111156111f8576111f86136a9565b60006020828403121561374957600080fd5b813560ff811681146116bf57600080fd5b60006020828403121561376c57600080fd5b81356001600160a01b03811681146116bf57600080fd5b60006020828403121561379557600080fd5b8135600281106116bf57600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160801b03169052565b6001600160a01b031690565b6001600160a01b03169052565b600281106137f0576137f06137a4565b9052565b600681106137f0576137f06137a4565b8281528154610220820190613825602084016001600160801b0383166137ba565b613835604084018260801c6137ba565b5060018301546001600160801b031661385160608401826137ba565b5061385f60028401546137c7565b61386c60808401826137d3565b5061387a60038401546137c7565b61388760a08401826137d3565b50600483015460c0830152600583015460e08301526006830154610100830152600783015460ff166138bd6101208401826137e0565b5060088301546101408301526009830154610160830152600a830154610180830152600b8301546101a0830152600c83015460ff166139006101c08401826137f4565b50600d8301546101e0830152600e8301546102008301529392505050565b6020808252601690820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b604082015260600190565b6020808252601290820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b604082015260600190565b6001600160801b0382811682821603908082111561399a5761399a6136a9565b5092915050565b6001600160801b038181168382160280821691908281146139c4576139c46136a9565b505092915050565b60006001600160801b038281166002600160801b031981016139f0576139f06136a9565b6001019392505050565b60208082526010908201526f6469766973696f6e206279207a65726f60801b604082015260600190565b604081526000835180604084015260005b81811015613a525760208187018101516060868401015201613a35565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b600181815b80851115613ab4578160001904821115613a9a57613a9a6136a9565b80851615613aa757918102915b93841c9390800290613a7e565b509250929050565b600082613acb575060016111f8565b81613ad8575060006111f8565b8160018114613aee5760028114613af857613b14565b60019150506111f8565b60ff841115613b0957613b096136a9565b50506001821b6111f8565b5060208310610133831016604e8410600b8410161715613b37575081810a6111f8565b613b418383613a79565b8060001904821115613b5557613b556136a9565b029392505050565b60006116bf8383613abc56fea2646970667358221220db20c94015b42d04796f1b7f268560e1d84796d2896ab27da13257f7a2aa276d64736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80632f3e0ce01461007157806356a5a299146100a8578063a2cfdc9b146100ca578063a4571bbc146100f8578063b77604c514610118578063d580a21a14610138575b600080fd5b81801561007d57600080fd5b5061009161008c3660046134c7565b610158565b60405161009f92919061357b565b60405180910390f35b8180156100b457600080fd5b506100c86100c33660046135a0565b6104d3565b005b8180156100d657600080fd5b506100ea6100e53660046135cc565b6108e7565b60405190815260200161009f565b81801561010457600080fd5b506100c861011336600461360f565b610c83565b81801561012457600080fd5b506100c8610133366004613631565b610e81565b81801561014457600080fd5b506100c86101533660046135a0565b61110e565b6060806000610166426111dc565b9050856000816001600160401b038111156101835761018361367d565b6040519080825280602002602001820160405280156101ac578160200160208202803683370190505b5090506000826001600160401b038111156101c9576101c961367d565b6040519080825280602002602001820160405280156101f2578160200160208202803683370190505b50905060005b838110156104c25760008b8b8381811061021457610214613693565b90506020020135905060008a8a8481811061023157610231613693565b90506020020135905060008e905061024981846111fe565b80602401548811156102605761025e8161121e565b505b600061026c82856112da565b9050600061027a8386611301565b905080841115610288578093505b8388878151811061029b5761029b613693565b602002602001018181525050808787815181106102ba576102ba613693565b6020026020010181815250506102d08386611404565b156102ea576102e0838686611436565b50505050506104b0565b60006102f684876114ce565b90508060008061030685896114ed565b905080156103395761031a878a838961153d565b91508184106103345761032d84836114ed565b9250610339565b600092505b61034282611603565b60008a8152601d89016020526040902080546001600160801b0319166001600160801b039290921691909117905550508b8410610414576000848152601f8601602052604090205461039490826114ed565b6000858152601f8701602052604081209190915560218601546103b990838f88611670565b90506103c98660230154826116a3565b602387015560008881526026870160205260409020546103e990826116a3565b6000898152602688016020526040902055602286015461040990826116a3565b602287015550610468565b6104228560250154826114ed565b6025860155600087815260278601602052604090205461044290826114ed565b6000888152602787016020526040902055602285015461046290826116a3565b60228601555b6104738588886116c6565b60405186815287907f59454c2c3385a95399182e59da91521ee5621f0211b9f016ff08b2e8e5fc98439060200160405180910390a2505050505050505b806104ba816136bf565b9150506101f8565b50909a909950975050505050505050565b60006104de426111dc565b6000848152601d860160205260409020600101549091506001600160801b0316820361050a5750505050565b61051382611603565b6000848152601d86016020526040902060010180546001600160801b0319166001600160801b0392909216919091179055602484015481111561055b576105598461121e565b505b600083815260188501602052604090205483901561063f57600061058286600101856117ee565b9050600061059361271060646136d8565b6105a1906301e133806136d8565b676765c793fa10079d601b1b836060015163ffffffff166105c291906136d8565b6105cc91906136ef565b6105e190676765c793fa10079d601b1b613711565b6000818152601789016020526040812060020154919250036106105761061087637261746560e01b8384611998565b61061b878483611b90565b50606001516000858152601d87016020526040902063ffffffff909116600e909101555b61064985856114ce565b600003610657575050505050565b600061066386866112da565b9050600061067187876114ce565b905060006106858860210154838786611670565b6000848152601f8a0160205260409020549091506106a390836114ed565b6000848152601f8a01602052604090205560238801546106c390826116a3565b602389015560008781526026890160205260409020546106e390826116a3565b600088815260268a016020526040902055602288015461070390826116a3565b6022890155505060008281526019870160209081526040808320548352601789018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c08201529061078d8885611d33565b90506107d96107d483604001516107a48b88611301565b6107ae8c8c6112da565b6107cf8d6001018c8860c001518960e001516107ca9190613724565b611e70565b611f11565b611603565b6000888152601d8a016020526040812080546001600160801b0319166001600160801b03939093169290921790915561081289896114ce565b905060006108268a60210154838988611670565b6000868152601f8c0160205260409020549091506108449083611f69565b6000868152601f8c01602052604090205560238a01546108649082611f69565b60238b0155600089815260268b01602052604081208054839290610889908490613711565b909155505060228a015461089d9082611f69565b60228b0155604080518a8152602081018a90527ff51d891f73afa0326444ca250f11a78ec4ede8d4beaf8c2cfe9f29d5f9e5629c910160405180910390a150505050505050505050565b600082816108f484611fb9565b905061090660e0850160c08601613737565b6000838152601d88016020908152604090912060010180546001600160801b03191660ff93909316929092179091556109419085018561375a565b6000838152601d880160209081526040918290206002810180546001600160a01b0319166001600160a01b03959095169490941790935560a08701356006909301929092556109959190860190860161375a565b6000838152601d8801602052604090206003810180546001600160a01b0319166001600160a01b0393909316929092179091556060850135600482015560808501356005909101556109ee610100850160e08601613783565b6000838152601d880160205260409020600701805460ff191660018381811115610a1a57610a1a6137a4565b02179055506000828152601d870160209081526040918290208287013560088201558351600982015590830151600a82015590820151600b8201556060820151600c909101805460ff19166001836005811115610a7957610a796137a4565b021790555060808101516000838152601d880160205260408120600d81019290925560a0830151600e90920191909155610ac860018801610ac060e0880160c08901613737565b60ff166117ee565b82519091506000610adc61271060646136d8565b6020840151610af19063ffffffff16846136d8565b610afb91906136ef565b9150610b0a61271060646136d8565b610b18906301e133806136d8565b676765c793fa10079d601b1b846060015163ffffffff16610b3991906136d8565b610b4391906136ef565b610b5890676765c793fa10079d601b1b613711565b601a8a018054600090815260288c01602052604081208890558154929350610b7f836136bf565b9190505550610b938986866040015161209e565b600081815260178a0160205260408120600201549003610bc057610bc089637261746560e01b8384611998565b610bcb898983612183565b610bd589896111fe565b6000888152601b8a016020526040902054610bf09083611f69565b6000898152601b8b016020526040902055601c890154610c109083611f69565b601c8a0155610c20898984612247565b50610c2c8989846124c9565b6000858152601d8a01602052604090819020905186917f22998f2397a6b1e965f5fdc5684d29ab2c2ebff824295de89aab9465b66822cd91610c6f918691613804565b60405180910390a250979650505050505050565b6000818152601e83016020526040902054600160801b900460ff1615610ce65760405162461bcd60e51b815260206004820152601360248201527237b7363c96b0baba3416bbb934ba3296b7b33360691b60448201526064015b60405180910390fd5b806000610cf384836112da565b905060008111610d3b5760405162461bcd60e51b81526020600482015260136024820152721b1bd85b8b591bd95ccb5b9bdd0b595e1a5cdd606a1b6044820152606401610cdd565b6000610d46426111dc565b90506000610d548686611d33565b90506000610d728760010183604001516001600160801b03166117ee565b9050828160e0015163ffffffff1685610d8b9190613711565b1115610dd75760405162461bcd60e51b815260206004820152601b60248201527a6d617475726974792d646174652d696e2d7468652d66757475726560281b6044820152606401610cdd565b6000610de388886125c8565b90506001600160801b0381108015610e2c575080610e0e676765c793fa10079d601b1b6103e86136d8565b610e189190613711565b600088815260198a01602052604090205414155b15610e7757610e3e8888838989612735565b60405160008152819087907fa0d657cd77a4a207fbc8f50dcd70ea7d5bb4a07cbb549bf7ec75a5768a30e6f99060200160405180910390a35b5050505050505050565b856c077726974654f666647726f757609c1b036110ce5760208701546000610eac61271060646136d8565b610eba906301e133806136d8565b610ecf676765c793fa10079d601b1b896136d8565b610ed991906136ef565b610eee90676765c793fa10079d601b1b613711565b90506000610eff61271060646136d8565b610f14676765c793fa10079d601b1b896136d8565b610f1e91906136ef565b610f3390676765c793fa10079d601b1b613724565b90506000610f4461271060646136d8565b610f5161271060646136d8565b610f5b91906136d8565b610f69906301e133806136d8565b89610f7f88676765c793fa10079d601b1b6136d8565b610f8991906136d8565b610f9391906136ef565b610fa890676765c793fa10079d601b1b613711565b90506000610fb962015180896136ef565b90508b6020016040518060600160405280610fd386611603565b6001600160801b03168152602001610fea84611603565b6001600160801b0316815260200161100189611603565b6001600160801b0390811690915282546001818101855560009485526020948590208451958501518416600160801b02958416959095176002909202909401908155604090920151919092018054919092166001600160801b0319919091161790556110958c637261746560e01b61108f611089676765c793fa10079d601b1b6103e86136d8565b89611f69565b87611998565b6110c48c6670656e616c747960c81b6110be611089676765c793fa10079d601b1b6103e86136d8565b85611998565b5050505050611105565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e206e616d6560a01b6044820152606401610cdd565b50505050505050565b816b646973636f756e745261746560a01b0361119457602183015461113661271060646136d8565b611144906301e133806136d8565b611159676765c793fa10079d601b1b846136d8565b61116391906136ef565b61117890676765c793fa10079d601b1b613711565b6021850155801561118e5761118c8461290b565b505b50505050565b60405162461bcd60e51b81526020600482015260186024820152773ab735b737bbb71031b7b73334b3903830b930b6b2ba32b960411b6044820152606401610cdd565b505050565b60006111eb62015180836136ef565b6111f890620151806136d8565b92915050565b600081815260198301602052604090205461121a9083906129ba565b5050565b60008060008061122d85612b7f565b92509250925060005b85601a0154811015611297576000818152602887016020526040812054908061125f8984612c6d565b50600094855260278b01602090815260408087209290925560268c01905290932092909255506112909050816136bf565b9050611236565b5060258501829055602385018390556112b96112b38484611f69565b82611f69565b60228601556112c7426111dc565b6024860155505050602290910154919050565b6000818152601d83016020526040902054600160801b90046001600160801b031692915050565b60008181526019830160209081526040808320548084526017860190925282206001810154600482015460059092015490919065ffffffffffff1642106113ae576000838152601787016020526040902060018101546002820154600590920154611374929065ffffffffffff16612d96565b60008481526017880160205260409020600481015460038201546005909201549294506113ab9290919065ffffffffffff16612d96565b90505b806000036113dc5760008581526018870160205260409020546113d2908390612db6565b93505050506111f8565b6113d2816113ff848960180160008a815260200190815260200160002054612db6565b612db6565b600061141d676765c793fa10079d601b1b6103e86136d8565b6000928352601993909301602052506040902054101590565b60228301546114be906114b9836114ab60208801611461676765c793fa10079d601b1b6103e86136d8565b600089815260198b01602052604090205461147c9190613724565b8154811061148c5761148c613693565b60009182526020909120600290910201546001600160801b0316611603565b6001600160801b0316612dbe565b6116a3565b60228401556111d78383836116c6565b6000908152601d9190910160205260409020546001600160801b031690565b6000826114fa8382613724565b91508111156111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610cdd565b60008381526019850160209081526040808320548352601787018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152816115c08787611d33565b905060006115f7836040015187876107cf8c60010187604001516001600160801b03168860c001518960e001516107ca9190613724565b98975050505050505050565b60006001600160801b0382111561166c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610cdd565b5090565b600061169a846116958761168486886114ed565b676765c793fa10079d601b1b612de0565b612e9e565b95945050505050565b6000828211156116b5575060006111f8565b6116bf83836114ed565b9392505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff1642146117115760405162461bcd60e51b8152600401610cdd9061391e565b60008181526017850160205260409020600401548015611738576117358184612ee3565b92505b60008281526017860160205260408120600101546117569085612ee3565b600086815260188801602052604090205490915061177490826114ed565b600086815260188801602090815260408083209390935585825260178901905220546117a090826114ed565b6000848152601788016020526040902055846040518581527f9d36b5b661e3fc41681961cd76e4b5de0b5f8c5af42446cf86f291efa1363fe6906020015b60405180910390a2505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915281158061185357508254155b156118b9575060408051610160810182526000808252620f42406020830152918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526111f8565b6118c4600183613724565b91508282815481106118d8576118d8613693565b600091825260209182902060408051610160810182526002909302909101805463ffffffff8082168552600160201b808304821696860196909652600160401b808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e085015260019091015480821661010085015293840481166101208401529204909116610140820152905092915050565b82637261746560e01b03611a7457806000036119f55760405162461bcd60e51b815260206004820152601c60248201527b0726174652d7065722d7365636f6e642d63616e2d6e6f742d62652d360241b6044820152606401610cdd565b60008281526017850160205260408120600101549003611a4f5760008281526017850160205260409020676765c793fa10079d601b1b6001820155600501805465ffffffffffff19164265ffffffffffff16179055611a59565b611a5984836129ba565b6000828152601785016020526040902060020181905561118e565b826670656e616c747960c81b03611b545780600003611ad55760405162461bcd60e51b815260206004820152601f60248201527f70656e616c74792d7065722d7365636f6e642d63616e2d6e6f742d62652d30006044820152606401610cdd565b60008281526017850160205260408120600401549003611b2f5760008281526017850160205260409020676765c793fa10079d601b1b6004820155600501805465ffffffffffff19164265ffffffffffff16179055611b39565b611b3984836129ba565b6000828152601785016020526040902060030181905561118e565b60405162461bcd60e51b81526020600482015260116024820152703ab735b737bbb7103830b930b6b2ba32b960791b6044820152606401610cdd565b60008181526017840160205260408120600101549003611bc25760405162461bcd60e51b8152600401610cdd9061394e565b611bd9676765c793fa10079d601b1b6103e86136d8565b8110611c135760008181526017840160205260409020600501805465ffffffffffff60301b1916600160301b4265ffffffffffff16021790555b6000828152601984016020526040902054611c2e84826129ba565b611c3884836129ba565b600083815260188501602090815260408083205484845260178801909252822060010154909190611c699083612db6565b6000848152601788016020526040902054909150611c8790836114ed565b6000848152601788016020526040808220929092558581522060010154611cae9082612ee3565b6000868152601888016020818152604080842085905588845260178b0182528320549289905252611cde91611f69565b600085815260178801602090815260408083209390935587825260198901905220849055846040518581527f8e2ce1fcb819c387686609f23cdd597abcdd18b0a3bcf284394b65c74101f8c4906020016117de565b611d3b6133c5565b6000828152601d8401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff1690811115611de657611de66137a4565b6001811115611df757611df76137a4565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff166005811115611e4057611e406137a4565b6005811115611e5157611e516137a4565b8152600d8201546020820152600e909101546040909101529392505050565b600080611e7d85856117ee565b9050611e8c61271060646136d8565b611e9961271060646136d8565b611ea391906136d8565b611eb1906301e133806136d8565b838260a0015163ffffffff16836080015163ffffffff16676765c793fa10079d601b1b611ede91906136d8565b611ee891906136d8565b611ef291906136d8565b611efc91906136ef565b61169a90676765c793fa10079d601b1b613724565b600080611f1d426111dc565b9050600081851115611f3657611f3385836114ed565b90505b611f5e611f58611f528984676765c793fa10079d601b1b612de0565b88612dbe565b85612dbe565b979650505050505050565b600082611f768382613711565b91508110156111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610cdd565b611fc1613449565b6000806000806000611fd68760400135612eef565b60408051808201909152600e81526d034b73a32b932b9ba2930ba329d160951b6020820152949950929750909550935091506120129085612f12565b6000836005811115612026576120266137a4565b9050600061203382612f57565b61203d90856136d8565b90506040518060c001604052808881526020018a6080013581526020018a608001358361206a9190613711565b8152602001836005811115612081576120816137a4565b815260200185815260200187815250975050505050505050919050565b6120a883836114ce565b1561210a5760405162461bcd60e51b815260206004820152602c60248201527f63616e2d6e6f742d6368616e67652d6d61747572697479446174652d6f75747360448201526b1d185b991a5b99cb5919589d60a21b6064820152608401610cdd565b6121166107d4826111dc565b6000838152601d850160205260409081902080546001600160801b03938416600160801b029316929092179091555182907fe4cc80f41f018b5290a16d068ce1312611f47f682daaa056e36456c59f853d5a906121769084815260200190565b60405180910390a2505050565b6000828152601884016020526040902054156121d15760405162461bcd60e51b815260206004820152600d60248201526c1b9bdb8b5e995c9bcb5919589d609a1b6044820152606401610cdd565b600081815260178401602052604081206001015490036122035760405162461bcd60e51b8152600401610cdd9061394e565b60008281526019840160205260409020819055816040518281527f502a7eca8a181ab7f1fac839ea906869797df68c21326b477c0da6e7f962fbc990602001612176565b600080612253426111dc565b905083600061226287836112da565b90508281116122be5760405162461bcd60e51b815260206004820152602260248201527f6d617475726974792d646174652d69732d6e6f742d696e2d7468652d66757475604482015261726560f01b6064820152608401610cdd565b86602401548311156122d5576122d38761121e565b505b6000868152601988016020908152604080832054835260178a018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906123588989611d33565b9050600061238f836040015189866107cf8e60010187604001516001600160801b03168860c001518960e001516107ca9190613724565b90506123a76107d46123a18c886114ce565b83611f69565b6000868152601d8c016020908152604080832080546001600160801b0319166001600160801b039590951694909417909355868252601f8d01905220546123ee9082611f69565b6000858152601f8c01602052604090205561242f6107d46124298c8c6000908152601e9190910160205260409020546001600160801b031690565b8a611f69565b60008a8152601e8c016020526040902080546001600160801b0319166001600160801b039290921691909117905560218a015461246e90828887611670565b965061247e8a6023015488611f69565b60238b0155600085815260268b016020526040812080548992906124a3908490613711565b909155505060228a01546124b79088611f69565b60228b01555050505050509392505050565b6000828152601984016020908152604080832054808452601787019092529091206005015465ffffffffffff1642146125145760405162461bcd60e51b8152600401610cdd9061391e565b60008181526017850160205260408120600101546125329084612ee3565b60008581526018870160205260409020549091506125509082611f69565b6000858152601887016020908152604080832093909355848252601788019052205461257c9082611f69565b6000838152601787016020526040902055836040518481527f025cdc0b70e4d52ce267700d2925d12f1f4046b82d6eea316cb83391813f1c479060200160405180910390a25050505050565b600081816125d685836112da565b905060006125e3426111dc565b905060006125f18785611d33565b9050600060018260400151612606919061397a565b90506001600160801b036000805b60208b01546001600160801b038216101561271e5760008b602001826001600160801b03168154811061264957612649613693565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c602001836001600160801b03168154811061269857612698613693565b60009182526020909120600160029092020101546001600160801b03161480156126d45750826001600160801b0316816001600160801b031610155b80156126ff57506126e881620151806139a1565b6126fb906001600160801b031689613711565b8710155b1561270b578193508092505b5080612716816139cc565b915050612614565b50506001600160801b031698975050505050505050565b6000612740426111dc565b90508560240154811115612759576127578661121e565b505b60228601546127688787611404565b61288457600061277888866114ce565b90508361278889602401546111dc565b11156127de5761279c8860250154826116a3565b602589015560008581526027890160205260409020546127bc90826116a3565b600086815260278a0160205260409020556127d782826116a3565b9150612882565b6000848152601f890160205260409020546127f990826114ed565b6000858152601f8a016020526040812091909155602189015461283390839061282e906116846128288a6111dc565b896114ed565b612dbe565b90506128438960230154826116a3565b60238a0155600086815260268a01602052604090205461286390826116a3565b600087815260268b01602052604090205561287e83826116a3565b9250505b505b6128b08787876128a1676765c793fa10079d601b1b6103e86136d8565b6128ab9190613711565b611b90565b6128fa816128f56128c18a8a611301565b8a60200189815481106128d6576128d6613693565b60009182526020909120600290910201546001600160801b0316612dbe565b611f69565b876022018190555050505050505050565b60008060015b83601a01548110156129925780600061292a86836112da565b9050856024015481101561293f575050612980565b600061295e876021015461295389866114ce565b896024015485611670565b905061296a8582611f69565b6000938452602688016020526040909320555091505b8061298a816136bf565b915050612911565b506129a9816128f5856022015486602301546114ed565b602284018190556023909301555090565b600081815260178301602052604090206005015465ffffffffffff16421061121a57600081815260178301602052604081206001810154600282015460058301549254612a0f9365ffffffffffff1690613070565b5060008381526017850160205260409020600181018290556003015490915015801590612a5d57506000828152601784016020526040902060050154600160301b900465ffffffffffff1615155b8015612a8b57506000828152601784016020526040902060050154600160301b900465ffffffffffff164210155b15612b5057600082815260178401602052604081206005015465ffffffffffff600160301b82048116911611612ae3576000838152601785016020526040902060050154600160301b900465ffffffffffff16612b00565b600083815260178501602052604090206005015465ffffffffffff165b6000848152601786016020526040812060048101546003820154915465ffffffffffff9490941694509192612b389291908590613070565b50600085815260178701602052604090206004015550505b50600090815260179190910160205260409020600501805465ffffffffffff19164265ffffffffffff16179055565b6023810154602582015460218301546024840154600093849384939192909190838503612bc157600083612bb28a61310b565b96509650965050505050612c66565b600080612bcd426111dc565b9050825b81811015612c2a576000818152601f8c0160205260409020548015612c1557612c06846128f58361282e8a61168489896114ed565b9350612c128a82611f69565b99505b50612c238162015180613711565b9050612bd1565b50612c46612c408761282e8761168486896114ed565b836116a3565b612c50868a611f69565b612c598c61310b565b9850985098505050505050505b9193909250565b6021820154600082815260268401602090815260408083205460248701546027880190935290832054929384938493849391612ca98a8a611404565b15612ce2576000612cba8b8b6125c8565b9050612cde612cc98c8c611301565b8c60200183815481106128d6576128d6613693565b9550505b82600003612cfc57600097509550929350612d8f92505050565b600080612d08426111dc565b90506000612d1e612d198e8e6112da565b6111dc565b9050848110158015612d2f57508181105b15612d5a576000612d408e8e6114ce565b9050612d548161282e8a61168487876114ed565b909a5092505b612d75612d6f8761282e8a611684878b6114ed565b846116a3565b612d7f858c611f69565b899a509a509a5050505050505050505b9250925092565b6000814210612dae57612dab8484844261317c565b93505b509192915050565b60006116bf82845b6000676765c793fa10079d601b1b612dd68484613195565b6116bf91906136ef565b6000838015612e8057600184168015612dfb57859250612dff565b8392505b50600283046002850494505b8415612e7a578586028687820414612e2257600080fd5b81810181811015612e3257600080fd5b8590049650506001851615612e6f578583028387820414158715151615612e5857600080fd5b81810181811015612e6857600080fd5b8590049350505b600285049450612e0b565b50612e96565b838015612e905760009250612e94565b8392505b505b509392505050565b6000808211612ebf5760405162461bcd60e51b8152600401610cdd906139fa565b81612dd6612ed885676765c793fa10079d601b1b613195565b6128f56002866136ef565b60006116bf82846131f7565b6000806000806000612f008661323c565b939a9299509097509550909350915050565b61121a8282604051602401612f28929190613a24565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526132c1565b600080826005811115612f6c57612f6c6137a4565b03612f795750603c919050565b6001826005811115612f8d57612f8d6137a4565b03612f9b5750610e10919050565b6002826005811115612faf57612faf6137a4565b03612fbe575062015180919050565b6003826005811115612fd257612fd26137a4565b03612fe1575062093a80919050565b6004826005811115612ff557612ff56137a4565b03613004575062278d00919050565b6005826005811115613018576130186137a4565b0361302857506301e13380919050565b60405162461bcd60e51b815260206004820152601f60248201527f556e6b6e6f776e20616d6f7274697a6174696f6e20756e697420747970652e006044820152606401610cdd565b600080834210156130c35760405162461bcd60e51b815260206004820152601e60248201527f74696e6c616b652d6d6174682f696e76616c69642d74696d657374616d7000006044820152606401610cdd565b856000036130d057600080fd5b60006130de8787874261317c565b9050806130fd6130ee8387612dbe565b6130f88a88612dbe565b6114ed565b925092505094509492505050565b6000805b602083015481101561317657613162826128f561314d868561313e676765c793fa10079d601b1b6103e86136d8565b6131489190613711565b6132cd565b8660200185815481106128d6576128d6613693565b91508061316e816136bf565b91505061310f565b50919050565b600061169a61318f856116848686613724565b86612dbe565b60008115806131b9575082826131ab81836136d8565b92506131b790836136ef565b145b6111f85760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610cdd565b60008082116132185760405162461bcd60e51b8152600401610cdd906139fa565b81612dd661323185676765c793fa10079d601b1b613195565b6128f58560016114ed565b600080808080600160981b600160f81b03861662ffffff60801b8716600f607c1b881663100000006001607c1b038916630ff000008a1661327e85609861338d565b61328985608061338d565b61329485607c61338d565b61329f85601c61338d565b6132aa85601461338d565b939f929e50909c509a509098509650505050505050565b6132ca816133a4565b50565b600081815260178301602052604081206001810154600482015482546005909301549192909165ffffffffffff16421061336d576000858152601787016020526040902060018101546002820154600590920154613333929065ffffffffffff16612d96565b600086815260178801602052604090206004810154600382015460059092015492955061336a9290919065ffffffffffff16612d96565b91505b8160000361337f576113d28382612db6565b6113d2826113ff8584612db6565b600061339a826002613b5d565b6116bf90846136ef565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a08201905b815260200160008152602001600081525090565b6040518060c0016040528060008152602001600081526020016000815260200160006005811115613435576134356137a4565b60008083601f84011261348e57600080fd5b5081356001600160401b038111156134a557600080fd5b6020830191508360208260051b85010111156134c057600080fd5b9250929050565b6000806000806000606086880312156134df57600080fd5b8535945060208601356001600160401b03808211156134fd57600080fd5b61350989838a0161347c565b9096509450604088013591508082111561352257600080fd5b5061352f8882890161347c565b969995985093965092949392505050565b600081518084526020808501945080840160005b8381101561357057815187529582019590820190600101613554565b509495945050505050565b60408152600061358e6040830185613540565b828103602084015261169a8185613540565b6000806000606084860312156135b557600080fd5b505081359360208301359350604090920135919050565b60008060008385036101408112156135e357600080fd5b8435935060208501359250610100603f198201121561360157600080fd5b506040840190509250925092565b6000806040838503121561362257600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561364c57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016136d1576136d16136a9565b5060010190565b80820281158282048414176111f8576111f86136a9565b60008261370c57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111f8576111f86136a9565b818103818111156111f8576111f86136a9565b60006020828403121561374957600080fd5b813560ff811681146116bf57600080fd5b60006020828403121561376c57600080fd5b81356001600160a01b03811681146116bf57600080fd5b60006020828403121561379557600080fd5b8135600281106116bf57600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160801b03169052565b6001600160a01b031690565b6001600160a01b03169052565b600281106137f0576137f06137a4565b9052565b600681106137f0576137f06137a4565b8281528154610220820190613825602084016001600160801b0383166137ba565b613835604084018260801c6137ba565b5060018301546001600160801b031661385160608401826137ba565b5061385f60028401546137c7565b61386c60808401826137d3565b5061387a60038401546137c7565b61388760a08401826137d3565b50600483015460c0830152600583015460e08301526006830154610100830152600783015460ff166138bd6101208401826137e0565b5060088301546101408301526009830154610160830152600a830154610180830152600b8301546101a0830152600c83015460ff166139006101c08401826137f4565b50600d8301546101e0830152600e8301546102008301529392505050565b6020808252601690820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b604082015260600190565b6020808252601290820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b604082015260600190565b6001600160801b0382811682821603908082111561399a5761399a6136a9565b5092915050565b6001600160801b038181168382160280821691908281146139c4576139c46136a9565b505092915050565b60006001600160801b038281166002600160801b031981016139f0576139f06136a9565b6001019392505050565b60208082526010908201526f6469766973696f6e206279207a65726f60801b604082015260600190565b604081526000835180604084015260005b81811015613a525760208187018101516060868401015201613a35565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b600181815b80851115613ab4578160001904821115613a9a57613a9a6136a9565b80851615613aa757918102915b93841c9390800290613a7e565b509250929050565b600082613acb575060016111f8565b81613ad8575060006111f8565b8160018114613aee5760028114613af857613b14565b60019150506111f8565b60ff841115613b0957613b096136a9565b50506001821b6111f8565b5060208310610133831016604e8410600b8410161715613b37575081810a6111f8565b613b418383613a79565b8060001904821115613b5557613b556136a9565b029392505050565b60006116bf8383613abc56fea2646970667358221220db20c94015b42d04796f1b7f268560e1d84796d2896ab27da13257f7a2aa276d64736f6c63430008130033",
  "devdoc": {
    "author": "Untangled Team",
    "kind": "dev",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "params": {
          "name": "name of the parameter",
          "value": "new value of the parameter"
        }
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "name": "name of the parameter group",
          "overdueDays_": "the number of days after which a loan is considered overdue",
          "writeOffPercentage_": "the write off rate in percent"
        }
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "params": {
          "amounts": "the amounts repaid",
          "loans": "the ids of the loan"
        }
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "params": {
          "loan": "the id of the loan"
        }
      }
    },
    "title": "Untangled's SecuritizaionPoolNAV contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLoan(DataTypes.Storage storage,uint256,DataTypes.LoanEntry)": {
        "notice": "UTILITY FUNCTION "
      },
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "notice": "repay updates the NAV for a new repaid loan"
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "notice": "writeOff writes off a loan if it is overdue"
      }
    },
    "notice": "Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}