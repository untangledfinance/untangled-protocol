{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\n    function __ERC721Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"../extensions/ERC721BurnableUpgradeable.sol\";\nimport \"../extensions/ERC721PausableUpgradeable.sol\";\nimport \"../../../access/AccessControlEnumerableUpgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\n    Initializable, ContextUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ERC721EnumerableUpgradeable,\n    ERC721BurnableUpgradeable,\n    ERC721PausableUpgradeable\n{\n    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\n    }\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    CountersUpgradeable.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    function __ERC721PresetMinterPauserAutoId_init(string memory name, string memory symbol, string memory baseTokenURI) internal onlyInitializing {\n        __ERC721_init_unchained(name, symbol);\n        __Pausable_init_unchained();\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\n    }\n\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory, string memory, string memory baseTokenURI) internal onlyInitializing {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        return\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165CheckerUpgradeable {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/base/UntangledBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\nimport '../libraries/Configuration.sol';\nimport {OWNER_ROLE, ORIGINATOR_ROLE, VALIDATOR_ROLE, POOL_ADMIN_ROLE} from '../libraries/DataTypes.sol';\n/**\n * @title Untangled's SecuritizationPool contract\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\n *  It provides functionalities for contract initialization, pausing, and access control.\n * @author Untangled Team\n */\nabstract contract UntangledBase is\n    Initializable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    AccessControlEnumerableUpgradeable\n{\n    function isAdmin() public view virtual returns (bool) {\n        return hasRole(OWNER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\n        _;\n    }\n\n    function __UntangledBase__init(address owner) internal onlyInitializing {\n        __Pausable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __UntangledBase__init_unchained(owner);\n    }\n\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\n        if (owner == address(0)) owner = _msgSender();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(OWNER_ROLE, owner);\n\n        _setRoleAdmin(ORIGINATOR_ROLE, OWNER_ROLE);\n        _setRoleAdmin(VALIDATOR_ROLE, POOL_ADMIN_ROLE);\n    }\n\n    function getInitializedVersion() public view virtual returns (uint256) {\n        return _getInitializedVersion();\n    }\n\n    function pause() public virtual onlyAdmin {\n        _pause();\n    }\n\n    function unpause() public virtual onlyAdmin {\n        _unpause();\n    }\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setRoleAdmin(role, adminRole);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IERC5008.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// https://eips.ethereum.org/EIPS/eip-5008\n/// @dev the ERC-165 identifier for this interface is 0xce03fdab.\n/* is IERC165 */ interface IERC5008 {\n    /// @notice Emitted when the `nonce` of an NFT is changed\n    event NonceChanged(uint256 tokenId, uint256 nonce);\n\n    /// @notice Get the nonce of an NFT\n    /// Throws if `tokenId` is not a valid NFT\n    /// @param tokenId The id of the NFT\n    /// @return The nonce of the NFT\n    function nonce(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGo.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity 0.8.19;\n\nimport {IUniqueIdentity} from './IUniqueIdentity.sol';\n\ninterface IGo {\n    /// @notice Returns the address of the UniqueIdentity contract.\n    function uniqueIdentity() external returns (IUniqueIdentity);\n\n    function go(address account) external view returns (bool);\n\n    function goOnlyIdTypes(address account, uint256[] memory onlyIdTypes) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ILoanKernel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '../libraries/DataTypes.sol';\n\ninterface ILoanKernel {\n    /****************** */\n    // CONSTANTS\n    /****************** */\n\n    enum FillingAddressesIndex {\n        SECURITIZATION_POOL,\n        PRINCIPAL_TOKEN_ADDRESS,\n        REPAYMENT_ROUTER\n    }\n\n    enum FillingNumbersIndex {\n        CREDITOR_FEE,\n        ASSET_PURPOSE\n    }\n\n    //********************************************************* */\n\n    //****** */\n    // EVENTS\n    //****** */\n\n    event LogOutputSubmit(bytes32 indexed _agreementId, uint256 indexed _tokenIndex, uint256 _totalAmount);\n\n    event AssetRepay(\n        bytes32 indexed _agreementId,\n        address indexed _payer,\n        address indexed _pool,\n        uint256 _amount,\n        uint256 _outstandingAmount,\n        address _token\n    );\n\n    event BatchAssetRepay(bytes32[] _agreementIds, address _payer, uint256[] _amounts, address _token);\n\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\n\n    event DrawdownAsset(address indexed _poolAddress, uint256 _drawdownAmount);\n\n    //********************************************************* */\n\n    /*********** */\n    // STRUCTURES\n    /*********** */\n\n    struct LoanIssuance {\n        address version;\n        address[] debtors;\n        bytes32[] termsContractParameters; // for different loans\n        bytes32[] agreementIds;\n        uint256[] salts;\n    }\n\n    struct LoanOrder {\n        LoanIssuance issuance;\n        address principalTokenAddress;\n        uint256[] principalAmounts;\n        uint256 creditorFee;\n        uint256[] expirationTimestampInSecs;\n        bytes32[] debtOrderHashes;\n        uint8[] riskScores;\n        uint8 assetPurpose;\n    }\n\n    struct FillDebtOrderParam {\n        address[] orderAddresses; // 0-pool, 1-principal token address, 2-repayment router,...\n        uint256[] orderValues; //  0-creditorFee, 1-asset purpose,..., [x] principalAmounts, [x] expirationTimestampInSecs, [x] - salts, [x] - riskScores\n        bytes32[] termsContractParameters; // Term contract parameters from different farmers, encoded as hash strings\n        DataTypes.LoanAssetInfo[] latInfo;\n    }\n\n    /*********** */\n    // VARIABLES\n    /*********** */\n\n    /// @notice allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts\n    /// @dev calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment\n    function repayInBatch(\n        bytes32[] calldata agreementIds,\n        uint256[] calldata amounts,\n        address tokenAddress\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IMintedNormalTGE.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {Registry} from '../storage/Registry.sol';\n\ninterface IMintedNormalTGE {\n    event SetHasStarted(bool hasStarted);\n    event UpdateMinBidAmount(uint256 minBidAmount);\n    event UpdateTotalCap(uint256 totalCap);\n    event UpdateInitialAmount(uint256 initialAmount);\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    enum SaleType {\n        NORMAL_SALE\n    }\n\n    function initialize(\n        Registry _registry,\n        address _pool,\n        address _token,\n        address _currency,\n        uint256 _openingTime\n    ) external;\n\n    ///@notice investor bids for SOT/JOT token. Paid by pool's currency\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\n\n    function pool() external view returns (address);\n\n    function token() external view returns (address);\n\n    function initialAmount() external view returns (uint256);\n\n    function currencyRaisedByInvestor(address _investor) external view returns (uint256);\n\n    function currencyRaised() external view returns (uint256);\n\n    function firstNoteTokenMintedTimestamp() external view returns (uint256);\n\n    function setHasStarted(bool _hasStarted) external;\n\n    function setMinBidAmount(uint256 _minBidAmount) external;\n\n    function onRedeem(uint256 _currencyAmount) external;\n\n    function setInitialAmount(uint256 _initialAmount) external;\n\n    function setOpeningTime(uint256 _openingTime) external;\n\n    function setTotalCap(uint256 _cap) external;\n}\n"
    },
    "contracts/interfaces/INoteToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\nimport {IPauseable} from './IPauseable.sol';\n\ninterface INoteToken is IERC20Upgradeable, IERC20MetadataUpgradeable, IPauseable {\n\n    function poolAddress() external view returns (address);\n\n    function noteTokenType() external view returns (uint8);\n\n    function mint(address receiver, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/INoteTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '../storage/Registry.sol';\nimport './INoteToken.sol';\n\ninterface INoteTokenFactory {\n    event TokenCreated(\n        address indexed token,\n        address indexed poolAddress,\n        Configuration.NOTE_TOKEN_TYPE indexed tokenType,\n        uint8 decimals,\n        string ticker\n    );\n\n    event UpdateNoteTokenImplementation(address indexed newAddress);\n\n    function tokens(uint256 idx) external view returns (INoteToken);\n\n    function isExistingTokens(address tokenAddress) external view returns (bool);\n\n    function changeMinterRole(address token, address newController) external;\n\n    function setNoteTokenImplementation(address newAddress) external;\n\n    function noteTokenImplementation() external view returns (address);\n\n    /// @notice Creates a new NoteToken contract instance with the specified parameters\n    /// Initializes the token with the provided parameters, including the pool address and note token type\n    function createToken(\n        address poolAddress,\n        Configuration.NOTE_TOKEN_TYPE noteTokenType,\n        uint8 _nDecimals,\n        string calldata ticker\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/INoteTokenVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\ninterface INoteTokenVault {\n    event RedeemOrder(\n        address pool,\n        address noteTokenAddress,\n        address usr,\n        uint256 noteTokenRedeemAmount,\n        uint256 noteTokenPrice\n    );\n    event CancelOrder(address pool, address noteTokenAddress, address usr, uint256 noteTokenRedeemAmount);\n    event PreDistribute(\n        address pool,\n        EpochParam epochParam,\n        uint256 incomeAmount,\n        uint256 capitalAmount,\n        address[] noteTokenAddresses,\n        uint256[] totalRedeemedNoteAmounts\n    );\n    event DisburseOrder(\n        address pool,\n        EpochParam epochParams,\n        address noteTokenAddress,\n        address[] toAddresses,\n        uint256[] amounts,\n        uint256[] redeemedAmount\n    );\n    event SetRedeemDisabled(address pool, bool _redeemDisabled);\n\n    /// @title UserOrder\n    /// @dev Represents a user's order containing the amount of SOT and JOT to redeem.\n    struct UserOrder {\n        uint256 redeemSOTAmount;\n        uint256 redeemJOTAmount;\n    }\n\n    struct RedeemOrderParam {\n        address pool;\n        address noteTokenAddress;\n        uint256 noteTokenRedeemAmount;\n    }\n\n    struct CancelOrderParam {\n        address pool;\n        address noteTokenAddress;\n        uint256 maxTimestamp;\n    }\n\n    struct EpochParam {\n        address pool;\n        uint256 epochId;\n        uint256 batchId;\n    }\n\n    /// @notice redeemJOTOrder function can be used to place or revoke a redeem\n    function redeemOrder(RedeemOrderParam calldata redeemParam, bytes calldata signature) external;\n\n    /// @dev Disburses funds and handles JOT redemptions for a pool.\n    /// @param epochParam The information of the epoch params.\n    /// @param toAddresses An array of recipient addresses.\n    /// @param currencyAmounts An array of amounts to disburse to each recipient.\n    /// @param redeemedNoteAmounts An array of JOT amounts redeemed by each recipient.\n    /// @notice Only accessible by BACKEND_ADMIN role.\n    function disburseAll(\n        EpochParam calldata epochParam,\n        address noteTokenAddress,\n        address[] memory toAddresses,\n        uint256[] memory currencyAmounts,\n        uint256[] memory redeemedNoteAmounts\n    ) external;\n\n    function cancelOrder(CancelOrderParam memory cancelParam, bytes calldata signature) external;\n\n    /// @notice Pause redeem request\n    function setRedeemDisabled(address pool, bool _redeemDisabled) external;\n\n    /// @notice Total amount of SOT redeem order\n    function totalSOTRedeem(address pool) external view returns (uint256);\n\n    /// @notice Get redeem disabled\n    function redeemDisabled(address pool) external view returns (bool);\n\n    /// @notice Total amount of JOT redeem order\n    function totalJOTRedeem(address pool) external view returns (uint256);\n\n    /// @dev Retrieves the amount of JOT tokens that can be redeemed for the specified user.\n    /// @param usr The address of the user for which to retrieve the redeemable JOT amount.\n    /// @return The amount of JOT tokens that can be redeemed by the user.\n    function userRedeemJOTOrder(address pool, address usr) external view returns (uint256);\n\n    function userRedeemSOTOrder(address pool, address usr) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPauseable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity 0.8.19;\n\ninterface IPauseable {\n    function pause() external;\n\n    function unpause() external;\n\n    function paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.19;\n\nimport {DataTypes} from '../libraries/DataTypes.sol';\nimport {Configuration} from '../libraries/Configuration.sol';\nimport '../storage/Registry.sol';\n\ninterface IPool {\n    function calcJuniorRatio() external view returns (uint256 juniorRatio);\n\n    function calcTokenPrices() external view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice);\n\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external;\n\n    function getLoansValue(\n        uint256[] memory tokenIds,\n        DataTypes.LoanEntry[] memory loanEntries\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues);\n\n    function collectAssets(\n        uint256[] memory tokenIds,\n        DataTypes.LoanEntry[] memory loanEntries\n    ) external returns (uint256);\n\n    function currentNAV() external view returns (uint256 nav_);\n\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256);\n\n    function debt(uint256 loan) external view returns (uint256 loanDebt);\n\n    function debtCeiling() external view returns (uint256);\n\n    function decreaseCapitalReserve(uint256 currencyAmount) external;\n\n    function decreaseIncomeReserve(uint256 currencyAmount) external;\n\n    function disburse(address usr, uint256 currencyAmount) external;\n\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory);\n\n    function increaseCapitalReserve(uint256 currencyAmount) external;\n\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external;\n\n    function injectTGEAddress(address _tgeAddress, Configuration.NOTE_TOKEN_TYPE) external;\n\n    function interestRateSOT() external view returns (uint256);\n\n    function isDebtCeilingValid() external view returns (bool);\n\n    function isMinFirstLossValid() external view returns (bool);\n\n    function jotToken() external view returns (address);\n\n    function minFirstLossCushion() external view returns (uint32);\n\n    function openingBlockTimestamp() external view returns (uint64);\n\n    function pot() external view returns (address);\n\n    function rebase() external;\n\n    function repayLoan(\n        uint256[] calldata loans,\n        uint256[] calldata amounts\n    ) external returns (uint256[] memory, uint256[] memory);\n\n    function reserve() external view returns (uint256);\n\n    function registry() external returns (Registry);\n\n    function risk(bytes32 nft_) external view returns (uint256 risk_);\n\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory);\n\n    function secondTGEAddress() external view returns (address);\n\n    function seniorDebtAndBalance() external view returns (uint256, uint256);\n\n    function setDebtCeiling(uint256 _debtCeiling) external;\n\n    function setInterestRateSOT(uint32 _newRate) external;\n\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external;\n\n    function setUpOpeningBlockTimestamp() external;\n\n    function sotToken() external view returns (address);\n\n    function tgeAddress() external view returns (address);\n\n    function totalAssetRepaidCurrency() external view returns (uint256);\n\n    function underlyingCurrency() external view returns (address);\n\n    function validatorRequired() external view returns (bool);\n\n    function withdraw(address to, uint256 amount) external;\n\n    function withdrawAssets(\n        address[] memory tokenAddresses,\n        uint256[] memory tokenIds,\n        address[] memory recipients\n    ) external;\n}\n"
    },
    "contracts/interfaces/ISecuritizationManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '../storage/Registry.sol';\nimport './IPool.sol';\nimport {DataTypes} from '../libraries/DataTypes.sol';\n\ninterface ISecuritizationManager {\n    event NewPoolCreated(address indexed instanceAddress);\n    event NewPoolDeployed(address indexed instanceAddress, address poolOwner, DataTypes.NewPoolParams newPoolParams);\n    event UpdatePotToPool(address indexed pot, address indexed pool);\n    event SotDeployed(address indexed sotAddress, address tgeAddress, address poolAddress);\n    event JotDeployed(address indexed jotAddress, address tgeAddress, address poolAddress);\n\n    event SetupSot(address indexed sotAddress, address tgeAddress, TGEParam tgeParam, uint256 interestRate);\n    event SetupJot(address indexed jotAddress, address tgeAddress, TGEParam tgeParam, uint256 initialJOTAmount);\n\n    event UpdateAllowedUIDTypes(uint256[] uids);\n    event TokensPurchased(address indexed investor, address indexed tgeAddress, uint256 amount, uint256 tokenAmount);\n    event NoteTokenPurchased(\n        address indexed investor,\n        address indexed tgeAddress,\n        address poolAddress,\n        uint256 amount,\n        uint256 tokenAmount\n    );\n\n    event UpdateTGEInfo(TGEInfoParam[] tgeInfos);\n\n    struct TGEParam {\n        address issuerTokenController;\n        address pool;\n        uint256 minBidAmount;\n        uint256 totalCap;\n        uint256 openingTime;\n        string ticker;\n        uint8 saleType;\n    }\n\n    struct TGEInfoParam {\n        address tgeAddress;\n        uint256 totalCap;\n        uint256 minBidAmount;\n    }\n\n    function registry() external view returns (Registry);\n\n    function isExistingPools(address pool) external view returns (bool);\n\n    function pools(uint256 idx) external view returns (address);\n\n    function potToPool(address pot) external view returns (address);\n\n    function isExistingTGEs(address tge) external view returns (bool);\n\n    function hasAllowedUID(address sender) external view returns (bool);\n\n    /// @dev Register pot to pool instance\n    /// @param pot Pool linked wallet\n    function registerPot(address pot) external;\n}\n"
    },
    "contracts/interfaces/ISecuritizationPoolValueService.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\nimport '../libraries/DataTypes.sol';\n\ninterface ISecuritizationPoolValueService {\n    /// @notice calculates the total expected value of all assets in the securitization pool at a given timestamp\n    /// @dev iterates over the NFT assets and token assets in the pool, calling getExpectedAssetValue\n    /// or getExpectedERC20AssetValue for each asset and summing up the values\n    function getExpectedAssetsValue(address poolAddress) external view returns (uint256 expectedAssetsValue);\n\n    /// @notice returns the rate that belongs to Junior investors at the current time\n    function getJuniorRatio(address poolAddress) external view returns (uint256);\n\n    function getPoolValue(address poolAddress) external view returns (uint256);\n\n    /// @notice current individual asset price for the \"SOT\" tranche at the current timestamp\n    function getSOTTokenPrice(address securitizationPool) external view returns (uint256);\n\n    /// @notice calculates the token price for the \"JOT\" tranche at the current timestamp\n    function getJOTTokenPrice(address securitizationPool) external view returns (uint256);\n\n    /// @notice calculates the token price for a specific token address in the securitization pool\n    function calcTokenPrice(address pool, address tokenAddress) external view returns (uint256);\n\n    function getTokenValues(\n        address[] calldata tokenAddresses,\n        address[] calldata investors\n    ) external view returns (uint256[] memory);\n\n    function getTokenPrices(\n        address[] calldata pools,\n        address[] calldata tokenAddresses\n    ) external view returns (uint256[] memory);\n\n    /// @notice the available cash balance in the securitization pool\n    function getCashBalance(address pool) external view returns (uint256);\n\n    /// @notice calculates the corresponding total asset value for a specific token address, investor, and end time\n    function calcCorrespondingTotalAssetValue(address tokenAddress, address investor) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITokenGenerationEventFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '../storage/Registry.sol';\nimport './INoteToken.sol';\n\ninterface ITokenGenerationEventFactory {\n    enum SaleType {\n        NORMAL_SALE_JOT,\n        NORMAL_SALE_SOT\n    }\n\n    event UpdateTGEImplAddress(SaleType indexed tgeType, address newImpl);\n    event TokenGenerationEventCreated(address indexed tgeInstance);\n\n    /// @notice creates a new TGE instance based on the provided parameters and the sale type\n    function createNewSaleInstance(\n        address issuerTokenController,\n        address token,\n        address currency,\n        uint8 saleType,\n        uint256 openingTime\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IUniqueIdentity.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\n\ninterface IUniqueIdentity is IERC1155Upgradeable {\n    /// @notice Mint a new UniqueIdentity token to the msgSender\n    /// @param id The id representing the KYC type of the UniqueIdentity\n    /// @param expiresAt The expiration time of the signature\n    /// @param signature An EIP-191 signature of the corresponding mint params:\n    ///                  account, id, expiresAt, address(this), nonces[account], block.chainid\n    ///                  from an address with the SIGNER_ROLE.\n    function mint(uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\n\n    /// @notice Mint a new UniqueIdentity token to the `recipient`\n    /// @param recipient The recipient address to be minted to.\n    /// @param id The id representing the KYC type of the UniqueIdentity\n    /// @param expiresAt The expiration time of the signature\n    /// @param signature An EIP-191 signature of the corresponding mintTo params:\n    ///                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)\n    ///                  from an address with the SIGNER_ROLE.\n    function mintTo(address recipient, uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\n\n    /// @notice Burn a UniqueIdentity token of `id` from the `account`\n    /// @param account The account which currently owns the UID\n    /// @param id The id representing the KYC type of the UniqueIdentity\n    /// @param expiresAt The expiration time of the signature\n    /// @param signature An EIP-191 signature of the corresponding burn params:\n    ///                  (account, id, expiresAt, address(this), nonces[account], block.chainid)\n    ///                  from an address with the SIGNER_ROLE.\n    function burn(address account, uint256 id, uint256 expiresAt, bytes calldata signature) external;\n\n    /// @notice Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\n    /// @param account The account which currently owns the UID\n    /// @param id The id representing the KYC type of the UniqueIdentity\n    function burnFrom(address account, uint256 id) external;\n\n}\n"
    },
    "contracts/libraries/ConfigHelper.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\nimport {Registry} from '../storage/Registry.sol';\nimport {Configuration} from './Configuration.sol';\nimport {ISecuritizationManager} from '../interfaces/ISecuritizationManager.sol';\nimport {IPool} from '../interfaces/IPool.sol';\nimport {INoteTokenFactory} from '../interfaces/INoteTokenFactory.sol';\nimport {INoteToken} from '../interfaces/INoteToken.sol';\nimport {ITokenGenerationEventFactory} from '../interfaces/ITokenGenerationEventFactory.sol';\nimport {ILoanKernel} from '../interfaces/ILoanKernel.sol';\nimport {LoanAssetToken} from '../tokens/ERC721/LoanAssetToken.sol';\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\nimport {IGo} from '../interfaces/IGo.sol';\nimport {OWNER_ROLE} from './DataTypes.sol';\nimport {INoteTokenVault} from '../interfaces/INoteTokenVault.sol';\n\n/**\n * @title ConfigHelper\n * @notice A convenience library for getting easy access to other contracts and constants within the\n *  protocol, through the use of the Registry contract\n * @author Untangled Team\n */\nlibrary ConfigHelper {\n    function getAddress(Registry registry, Configuration.CONTRACT_TYPE contractType) internal view returns (address) {\n        return registry.getAddress(uint8(contractType));\n    }\n\n    function getSecuritizationManager(Registry registry) internal view returns (ISecuritizationManager) {\n        return ISecuritizationManager(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER));\n    }\n\n    function getSecuritizationPool(Registry registry) internal view returns (IPool) {\n        return IPool(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL));\n    }\n\n    function getNoteTokenFactory(Registry registry) internal view returns (INoteTokenFactory) {\n        return INoteTokenFactory(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY));\n    }\n\n    function getTokenGenerationEventFactory(Registry registry) internal view returns (ITokenGenerationEventFactory) {\n        return\n            ITokenGenerationEventFactory(\n                getAddress(registry, Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY)\n            );\n    }\n\n    function getLoanAssetToken(Registry registry) internal view returns (LoanAssetToken) {\n        return LoanAssetToken(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN));\n    }\n\n    function getLoanKernel(Registry registry) internal view returns (ILoanKernel) {\n        return ILoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_KERNEL));\n    }\n\n    function getSecuritizationPoolValueService(\n        Registry registry\n    ) internal view returns (ISecuritizationPoolValueService) {\n        return\n            ISecuritizationPoolValueService(\n                getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE)\n            );\n    }\n\n    function getGo(Registry registry) internal view returns (IGo) {\n        return IGo(getAddress(registry, Configuration.CONTRACT_TYPE.GO));\n    }\n\n    function getNoteTokenVault(Registry registry) internal view returns (INoteTokenVault) {\n        return INoteTokenVault(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\n    }\n\n    function requireSecuritizationManager(Registry registry, address account) internal view {\n        require(account == address(getSecuritizationManager(registry)), 'Registry: Only SecuritizationManager');\n    }\n\n    function requireLoanKernel(Registry registry, address account) internal view {\n        require(account == address(getLoanKernel(registry)), 'Registry: Only LoanKernel');\n    }\n}\n"
    },
    "contracts/libraries/Configuration.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n/// @title Configuration\n/// @author Untangled Team\nlibrary Configuration {\n    // NEVER EVER CHANGE THE ORDER OF THESE!\n    // You can rename or append. But NEVER change the order.\n    enum CONTRACT_TYPE {\n        SECURITIZATION_MANAGER,\n        SECURITIZATION_POOL,\n        NOTE_TOKEN_FACTORY,\n        TOKEN_GENERATION_EVENT_FACTORY,\n        DISTRIBUTION_ASSESSOR,\n        LOAN_ASSET_TOKEN,\n        LOAN_KERNEL,\n        SECURITIZATION_POOL_VALUE_SERVICE,\n        GO,\n        NOTE_TOKEN_VAULT\n    }\n\n    enum NOTE_TOKEN_TYPE {\n        SENIOR,\n        JUNIOR\n    }\n\n    enum ASSET_PURPOSE {\n        LOAN,\n        INVOICE\n    }\n}\n"
    },
    "contracts/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// import '../storage/Registry.sol';\nimport './Configuration.sol';\nimport './UnpackLoanParamtersLib.sol';\n\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\n\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\n\nuint256 constant ONE = 10 ** 27;\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\n\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\n\n// In PoolNAV we use this\nbytes32 constant POOL = keccak256('POOL');\nuint256 constant PRICE_DECIMAL = 10 ** 18;\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\n// In Go\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\n// in ERC1155PresetPauserUpgradeable\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\nlibrary DataTypes {\n    struct RiskScore {\n        uint32 daysPastDue;\n        uint32 advanceRate;\n        uint32 penaltyRate;\n        uint32 interestRate;\n        uint32 probabilityOfDefault;\n        uint32 lossGivenDefault;\n        uint32 writeOffAfterGracePeriod;\n        uint32 gracePeriod;\n        uint32 collectionPeriod;\n        uint32 writeOffAfterCollectionPeriod;\n        uint32 discountRate;\n    }\n\n    struct LoanEntry {\n        address debtor;\n        address principalTokenAddress;\n        bytes32 termsParam; // actually inside this param was already included P token address\n        uint256 salt;\n        uint256 issuanceBlockTimestamp;\n        uint256 expirationTimestamp;\n        uint8 riskScore;\n        Configuration.ASSET_PURPOSE assetPurpose;\n    }\n    struct NFTAsset {\n        address tokenAddress;\n        uint256 tokenId;\n    }\n\n    struct NewPoolParams {\n        address currency;\n        uint32 minFirstLossCushion;\n        bool validatorRequired;\n        uint256 debtCeiling;\n    }\n\n    /// @notice details of the underlying collateral\n    struct NFTDetails {\n        uint128 futureValue;\n        uint128 maturityDate;\n        uint128 risk;\n        address debtor;\n        address principalTokenAddress;\n        uint256 salt;\n        uint256 issuanceBlockTimestamp;\n        uint256 expirationTimestamp;\n        Configuration.ASSET_PURPOSE assetPurpose;\n        bytes32 termsParam;\n        uint256 principalAmount;\n        uint256 termStartUnixTimestamp;\n        uint256 termEndUnixTimestamp;\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\n        uint256 termLengthInAmortizationUnits;\n        uint256 interestRate;\n    }\n\n    /// @notice stores all needed information of an interest rate group\n    struct Rate {\n        // total debt of all loans with this rate\n        uint256 pie;\n        // accumlated rate index over time\n        uint256 chi;\n        // interest rate per second\n        uint256 ratePerSecond;\n        // penalty rate per second\n        uint256 penaltyRatePerSecond;\n        // accumlated penalty rate index over time\n        uint256 penaltyChi;\n        // last time the rate was accumulated\n        uint48 lastUpdated;\n        // time start to penalty\n        uint48 timeStartPenalty;\n    }\n\n    /// @notice details of the loan\n    struct LoanDetails {\n        uint128 borrowed;\n        // only auth calls can move loan into different writeOff group\n        bool authWriteOff;\n    }\n\n    /// @notice details of the write off group\n    struct WriteOffGroup {\n        // denominated in (10^27)\n        uint128 percentage;\n        // amount of days after the maturity days that the writeoff group can be applied by default\n        uint128 overdueDays;\n        uint128 riskIndex;\n    }\n\n    struct Storage {\n        bool validatorRequired;\n        uint64 firstAssetTimestamp;\n        RiskScore[] riskScores;\n        NFTAsset[] nftAssets;\n        address tgeAddress;\n        address secondTGEAddress;\n        address sotToken;\n        address jotToken;\n        address underlyingCurrency;\n        uint256 incomeReserve;\n        uint256 capitalReserve;\n        uint32 minFirstLossCushion;\n        uint64 openingBlockTimestamp;\n        // by default it is address(this)\n        address pot;\n        uint256 interestRateSOT;\n        uint256 totalAssetRepaidCurrency;\n        uint256 debtCeiling;\n        mapping(uint256 => Rate) rates;\n        mapping(uint256 => uint256) pie;\n        /// @notice mapping from loan => rate\n        mapping(uint256 => uint256) loanRates;\n        /// @notice mapping from loan => grace time\n        uint256 loanCount;\n        mapping(uint256 => uint256) balances;\n        uint256 balance;\n        // nft => details\n        mapping(bytes32 => NFTDetails) details;\n        // loan => details\n        mapping(uint256 => LoanDetails) loanDetails;\n        // timestamp => bucket\n        mapping(uint256 => uint256) buckets;\n        WriteOffGroup[] writeOffGroups;\n        // Write-off groups will be added as rate groups to the pile with their index\n        // in the writeOffGroups array + this number\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\n\n        // Discount rate applied on every asset's fv depending on its maturityDate.\n        // The discount decreases with the maturityDate approaching.\n        // denominated in (10^27)\n        uint256 discountRate;\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\n        uint256 latestNAV;\n        uint256 latestDiscount;\n        uint256 lastNAVUpdate;\n        // overdue loans are loans which passed the maturity date but are not written-off\n        uint256 overdueLoans;\n        // tokenId => latestDiscount\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\n        mapping(uint256 => bytes32) loanToNFT;\n        // value to view\n        uint256 totalPrincipalRepaid;\n        uint256 totalInterestRepaid;\n        // value to calculate rebase\n        uint256 seniorDebt;\n        uint256 seniorBalance;\n        uint64 lastUpdateSeniorInterest;\n    }\n\n    struct LoanAssetInfo {\n        uint256[] tokenIds;\n        uint256[] nonces;\n        address validator;\n        bytes validateSignature;\n    }\n}\n"
    },
    "contracts/libraries/Discounting.sol": {
      "content": "/// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// https://github.com/centrifuge/tinlake\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\n\n// Copyright (C) 2022 Centrifuge\n// Copyright (C) 2023 Untangled.Finance\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.19;\n\nimport './Math.sol';\n\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\nlibrary Discounting {\n    /// @notice calculates the discount for a given loan\n    /// @param discountRate the discount rate\n    /// @param fv the future value of the loan\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\n    /// @param maturityDate the maturity date of the loan\n    /// @return result discount for the loan\n    function calcDiscount(\n        uint256 discountRate,\n        uint256 fv,\n        uint256 normalizedBlockTimestamp,\n        uint256 maturityDate\n    ) internal pure returns (uint256 result) {\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\n    }\n\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\n    /// @param loanInterestRate the interest rate of the loan\n    /// @param amount of the loan (principal)\n    /// @param maturityDate the maturity date of the loan\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\n    /// @return fv future value of the loan\n    function calcFutureValue(\n        uint256 loanInterestRate,\n        uint256 amount,\n        uint256 maturityDate,\n        uint256 recoveryRatePD\n    ) internal view returns (uint256 fv) {\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\n        uint256 timeRemaining = 0;\n        if (maturityDate > nnow) {\n            timeRemaining = Math.safeSub(maturityDate, nnow);\n        }\n\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\n    }\n\n    /// @notice substracts to values if the result smaller than 0 it returns 0\n    /// @param x the first value (minuend)\n    /// @param y the second value (subtrahend)\n    /// @return result result of the subtraction\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (y > x) {\n            return 0;\n        }\n        return Math.safeSub(x, y);\n    }\n\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\n    /// @param timestamp the timestamp which should be normalized\n    /// @return nTimestamp normalized timestamp\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\n        return (1 days) * (timestamp / (1 days));\n    }\n\n    /// @notice rpow peforms a math pow operation with fixed point number\n    /// adopted from ds-math\n    /// @param x the base for the pow operation\n    /// @param n the exponent for the pow operation\n    /// @param base the base of the fixed point number\n    /// @return z the result of the pow operation\n\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    z := base\n                }\n                default {\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    z := base\n                }\n                default {\n                    z := x\n                }\n                let half := div(base, 2) // for rounding.\n                for {\n                    n := div(n, 2)\n                } n {\n                    n := div(n, 2)\n                } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) {\n                        revert(0, 0)\n                    }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n                    x := div(xxRound, base)\n                    if mod(n, 2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\n                            revert(0, 0)\n                        }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/logic/GenericLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// https://github.com/centrifuge/tinlake\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\n\n// Copyright (C) 2022 Centrifuge\n// Copyright (C) 2023 Untangled.Finance\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General internal License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General internal License for more details.\n//\n// You should have received a copy of the GNU Affero General internal License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.19;\nimport '../UnpackLoanParamtersLib.sol';\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\nimport {Math} from '../Math.sol';\nimport {Discounting} from '../Discounting.sol';\n\n/**\n * @title Untangled's SecuritizaionPoolNAV contract\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\n *  Automatically invests across borrower pools using an adjustable strategy.\n * @author Untangled Team\n */\nlibrary GenericLogic {\n    event SetRate(bytes32 indexed loan, uint256 rate);\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\n\n    /** GETTER */\n    /// @notice getter function for the maturityDate\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\n    /// @return maturityDate_ the maturityDate of the nft\n    function maturityDate(\n        DataTypes.Storage storage _poolStorage,\n        bytes32 nft_\n    ) internal view returns (uint256 maturityDate_) {\n        return uint256(_poolStorage.details[nft_].maturityDate);\n    }\n\n    /// @notice getter function for the risk group\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\n    /// @return risk_ the risk group of the nft\n\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\n        return uint256(_poolStorage.details[nft_].risk);\n    }\n\n    /// @notice getter function for the nft value\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\n    /// @return nftValue_ the value of the nft\n\n    /// @notice getter function for the future value\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\n    /// @return fv_ future value of the loan\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\n        return uint256(_poolStorage.details[nft_].futureValue);\n    }\n\n    // function discountRate() internal view  returns (uint256) {\n    //     return uint256(_getStorage().discountRate);\n    // }\n\n    /// @notice getter function for the recovery rate PD\n    /// @param riskID id of a risk group\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\n    function recoveryRatePD(\n        DataTypes.RiskScore[] storage riskScores,\n        uint256 riskID,\n        uint256 termLength\n    ) internal view returns (uint256 recoveryRatePD_) {\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\n\n        return\n            Discounting.secureSub(\n                Math.ONE,\n                (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\n                    (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days)\n            );\n    }\n\n    /// @notice getter function for the borrowed amount\n    /// @param loan id of a loan\n    /// @return borrowed_ borrowed amount of the loan\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\n    }\n\n    /** UTILITY FUNCTION */\n    // TODO have to use modifier in main contract\n    function getRiskScoreByIdx(\n        DataTypes.RiskScore[] storage riskScores,\n        uint256 idx\n    ) internal view returns (DataTypes.RiskScore memory) {\n        if (idx == 0 || riskScores.length == 0) {\n            // Default risk score\n            return\n                DataTypes.RiskScore({\n                    daysPastDue: 0,\n                    advanceRate: 1000000,\n                    penaltyRate: 0,\n                    interestRate: 0,\n                    probabilityOfDefault: 0,\n                    lossGivenDefault: 0,\n                    writeOffAfterGracePeriod: 0,\n                    gracePeriod: 0,\n                    collectionPeriod: 0,\n                    writeOffAfterCollectionPeriod: 0,\n                    discountRate: 0\n                });\n        }\n        // Because risk score upload = risk score index onchain + 1\n        idx = idx - 1;\n        return riskScores[idx];\n    }\n\n    /// @notice converts a uint256 to uint128\n    /// @param value the value to be converted\n    /// @return converted value to uint128\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    // TODO have to use modifier in main contract\n\n    /// @notice returns if a loan is written off\n    /// @param loan the id of the loan\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\n    }\n\n    /// @notice calculates and returns the current NAV\n    /// @return nav_ current NAV\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\n    }\n\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\n    }\n\n    /// @notice calculates the present value of the loans together with overdue and written off loans\n    /// @return totalDiscount the present value of the loans\n    /// @return overdue the present value of the overdue loans\n    /// @return writeOffs the present value of the written off loans\n    function currentPVs(\n        DataTypes.Storage storage _poolStorage\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\n        uint256 latestDiscount;\n        uint256 overdueLoans;\n        uint256 discountRate;\n        uint256 lastNAVUpdate;\n        {\n            latestDiscount = _poolStorage.latestDiscount;\n            overdueLoans = _poolStorage.overdueLoans;\n            discountRate = _poolStorage.discountRate;\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\n        }\n        if (latestDiscount == 0) {\n            // all loans are overdue or writtenOff\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\n        }\n\n        uint256 errPV = 0;\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n\n        // find all new overdue loans since the last update\n        // calculate the discount of the overdue loans which is needed\n        // for the total discount calculation\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\n            uint256 b = _poolStorage.buckets[i];\n            if (b != 0) {\n                errPV = Math.safeAdd(\n                    errPV,\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\n                );\n                overdue = Math.safeAdd(overdue, b);\n            }\n        }\n        return (\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\n            Discounting.secureSub(\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\n                errPV\n            ),\n            // current overdue loans not written off\n            Math.safeAdd(overdueLoans, overdue),\n            // current write-offs loans\n            currentWriteOffs(_poolStorage)\n        );\n    }\n\n    function currentAV(\n        DataTypes.Storage storage _poolStorage,\n        bytes32 tokenId\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\n        uint256 _currentWriteOffs = 0;\n        uint256 discountRate;\n        uint256 latestDiscountOfNavAssetsID;\n        uint256 lastNAVUpdate;\n        uint256 overdueLoansOfNavAssetsID;\n        {\n            discountRate = _poolStorage.discountRate;\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\n        }\n\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\n            _currentWriteOffs = Math.rmul(\n                debt(_poolStorage, uint256(tokenId)),\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\n            );\n        }\n\n        if (latestDiscountOfNavAssetsID == 0) {\n            // all loans are overdue or writtenOff\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\n        }\n\n        uint256 errPV = 0;\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n\n        // loan is overdue since lastNAVUpdate\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\n        if (mat >= lastNAVUpdate && mat < nnow) {\n            uint256 b = futureValue(_poolStorage, tokenId);\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\n            overdue = b;\n        }\n\n        return (\n            Discounting.secureSub(\n                Math.rmul(\n                    latestDiscountOfNavAssetsID,\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\n                ),\n                errPV\n            ),\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\n            _currentWriteOffs\n        );\n    }\n\n    /// @notice returns the sum of all write off loans\n    /// @return sum of all write off loans\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\n            // multiply writeOffGroupDebt with the writeOff rate\n\n            sum = Math.safeAdd(\n                sum,\n                Math.rmul(\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\n                )\n            );\n        }\n        return sum;\n    }\n\n    /// @notice calculates and returns the current NAV and updates the state\n    /// @return nav_ current NAV\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\n\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\n\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\n        }\n\n        _poolStorage.overdueLoans = overdue;\n        _poolStorage.latestDiscount = totalDiscount;\n\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\n        return _poolStorage.latestNAV;\n    }\n\n    /// @notice re-calculates the nav in a non-optimized way\n    ///  the method is not updating the NAV to latest block.timestamp\n    /// @return nav_ current NAV\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\n        // reCalcTotalDiscount\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\n        /// @return latestDiscount_ returns the total discount of the active loans\n        uint256 latestDiscount_ = 0;\n        for (uint256 count = 0; count < _poolStorage.loanCount; count++) {\n            uint256 loanID = _poolStorage.nftAssets[count].tokenId;\n            bytes32 nftID_ = nftID(loanID);\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\n                continue;\n            }\n\n            uint256 discountIncrease_ = Discounting.calcDiscount(\n                _poolStorage.discountRate,\n                futureValue(_poolStorage, nftID_),\n                _poolStorage.lastNAVUpdate,\n                maturityDate_\n            );\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\n        }\n\n        _poolStorage.latestNAV = Math.safeAdd(\n            latestDiscount_,\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\n        );\n        _poolStorage.latestDiscount = latestDiscount_;\n        return _poolStorage.latestNAV;\n    }\n\n    /// @notice returns the nftID for the underlying collateral nft\n    /// @param loan the loan id\n    /// @return nftID_ the nftID of the loan\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\n        return bytes32(loan);\n    }\n\n    /// @notice returns the current valid write off group of a loan\n    /// @param loan the loan id\n    /// @return writeOffGroup_ the current valid write off group of a loan\n    function currentValidWriteOffGroup(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan\n    ) internal view returns (uint256 writeOffGroup_) {\n        bytes32 nftID_ = nftID(loan);\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\n\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\n\n        uint128 lastValidWriteOff = type(uint128).max;\n        uint128 highestOverdueDays = 0;\n        // it is not guaranteed that writeOff groups are sorted by overdue days\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\n            if (\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\n                overdueDays >= highestOverdueDays &&\n                nnow >= maturityDate_ + overdueDays * 1 days\n            ) {\n                lastValidWriteOff = i;\n                highestOverdueDays = overdueDays;\n            }\n        }\n\n        // returns type(uint128).max if no write-off group is valid for this loan\n        return lastValidWriteOff;\n    }\n\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\n        uint256 rate_ = _poolStorage.loanRates[loan];\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\n            chi_ = chargeInterest(\n                _poolStorage.rates[rate_].chi,\n                _poolStorage.rates[rate_].ratePerSecond,\n                _poolStorage.rates[rate_].lastUpdated\n            );\n            penaltyChi_ = chargeInterest(\n                _poolStorage.rates[rate_].penaltyChi,\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\n                _poolStorage.rates[rate_].lastUpdated\n            );\n        }\n\n        if (penaltyChi_ == 0) {\n            return toAmount(chi_, _poolStorage.pie[loan]);\n        } else {\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\n        }\n    }\n\n    function debtWithChi(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan,\n        uint256 chi,\n        uint256 penaltyChi\n    ) internal view returns (uint256 loanDebt) {\n        if (penaltyChi == 0) {\n            return toAmount(chi, _poolStorage.pie[loan]);\n        } else {\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\n        }\n    }\n\n    function chiAndPenaltyChi(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\n        uint256 rate_ = _poolStorage.loanRates[loan];\n        chi = _poolStorage.rates[rate_].chi;\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\n    }\n\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\n        uint256 chi_ = _poolStorage.rates[rate].chi;\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\n        uint256 pie_ = _poolStorage.rates[rate].pie;\n\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\n            chi_ = chargeInterest(\n                _poolStorage.rates[rate].chi,\n                _poolStorage.rates[rate].ratePerSecond,\n                _poolStorage.rates[rate].lastUpdated\n            );\n            penaltyChi_ = chargeInterest(\n                _poolStorage.rates[rate].penaltyChi,\n                _poolStorage.rates[rate].penaltyRatePerSecond,\n                _poolStorage.rates[rate].lastUpdated\n            );\n        }\n\n        if (penaltyChi_ == 0) {\n            return toAmount(chi_, pie_);\n        } else {\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\n        }\n    }\n\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\n        // rate category has to be initiated\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\n        _poolStorage.loanRates[loan] = rate;\n        emit SetRate(nftID(loan), rate);\n    }\n\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\n        }\n        uint256 currentRate = _poolStorage.loanRates[loan];\n        drip(_poolStorage, currentRate);\n        drip(_poolStorage, newRate);\n        uint256 pie_ = _poolStorage.pie[loan];\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\n        _poolStorage.loanRates[loan] = newRate;\n        emit ChangeRate(nftID(loan), newRate);\n    }\n\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\n    }\n\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\n            (uint256 chi, ) = compounding(\n                _poolStorage.rates[rate].chi,\n                _poolStorage.rates[rate].ratePerSecond,\n                _poolStorage.rates[rate].lastUpdated,\n                _poolStorage.rates[rate].pie\n            );\n            _poolStorage.rates[rate].chi = chi;\n            if (\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\n            ) {\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\n                    ? _poolStorage.rates[rate].lastUpdated\n                    : _poolStorage.rates[rate].timeStartPenalty;\n                (uint256 penaltyChi, ) = compounding(\n                    _poolStorage.rates[rate].penaltyChi,\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\n                    lastUpdated_,\n                    _poolStorage.rates[rate].pie\n                );\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\n            }\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\n        }\n    }\n\n    /// Interest functions\n    // @notice This function provides compounding in seconds\n    // @param chi Accumulated interest rate over time\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10ˆ27)\n    // @param lastUpdated When the interest rate was last updated\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\n        require(chi != 0);\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\n    }\n\n    // @notice This function charge interest on a interestBearingAmount\n    // @param interestBearingAmount is the interest bearing amount\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10ˆ27)\n    // @param lastUpdated last time the interest has been charged\n    // @return interestBearingAmount + interest\n    function chargeInterest(\n        uint interestBearingAmount,\n        uint ratePerSecond,\n        uint lastUpdated\n    ) internal view returns (uint) {\n        if (block.timestamp >= lastUpdated) {\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\n        }\n        return interestBearingAmount;\n    }\n\n    function _chargeInterest(\n        uint interestBearingAmount,\n        uint ratePerSecond,\n        uint lastUpdated,\n        uint current\n    ) internal pure returns (uint) {\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\n    }\n\n    // convert pie to debt/savings amount\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\n        return Math.rmul(_pie, chi);\n    }\n\n    // convert debt/savings amount to pie\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\n        return Math.rdivup(amount, chi);\n    }\n\n    function getAsset(\n        DataTypes.Storage storage _poolStorage,\n        bytes32 agreementId\n    ) internal view returns (DataTypes.NFTDetails memory) {\n        return _poolStorage.details[agreementId];\n    }\n\n    function reserve(DataTypes.Storage storage _poolStorage) internal view returns (uint256) {\n        return Math.safeAdd(_poolStorage.capitalReserve, _poolStorage.incomeReserve);\n    }\n\n    /// @param amortizationUnitType AmortizationUnitType enum\n    /// @return the corresponding length of the unit in seconds\n    function _getAmortizationUnitLengthInSeconds(\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\n    ) private pure returns (uint256) {\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\n            return 1 minutes;\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\n            return 1 hours;\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\n            return 1 days;\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\n            return 7 days;\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\n            return 30 days;\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\n            return 365 days;\n        } else {\n            revert('Unknown amortization unit type.');\n        }\n    }\n\n    /**\n     *   Get parameters by Agreement ID (commitment hash)\n     */\n    function unpackParamsForAgreementID(\n        DataTypes.LoanEntry calldata loan\n    ) internal view returns (UnpackLoanParamtersLib.InterestParams memory params) {\n        // The principal amount denominated in the aforementioned token.\n        uint256 principalAmount;\n        // The interest rate accrued per amortization unit.\n        uint256 interestRate;\n        // The amortization unit in which the repayments installments schedule is defined.\n        uint256 rawAmortizationUnitType;\n        // The debt's entire term's length, denominated in the aforementioned amortization units\n        uint256 termLengthInAmortizationUnits;\n        uint256 gracePeriodInDays;\n\n        (\n            principalAmount,\n            interestRate,\n            rawAmortizationUnitType,\n            termLengthInAmortizationUnits,\n            gracePeriodInDays\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\n\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\n            rawAmortizationUnitType\n        );\n\n        // Grant the real origination date\n        termLengthInAmortizationUnits =\n            (loan.expirationTimestamp - block.timestamp) /\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\n\n        // Calculate term length base on Amortization Unit and number\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\n\n        return\n            UnpackLoanParamtersLib.InterestParams({\n                principalAmount: principalAmount,\n                interestRate: interestRate,\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\n                amortizationUnitType: amortizationUnitType,\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\n            });\n    }\n}\n"
    },
    "contracts/libraries/logic/PoolAssetLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {UntangledERC721} from '../../tokens/ERC721/UntangledERC721.sol';\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\nimport {DataTypes} from '../DataTypes.sol';\nimport {TransferHelper} from '../TransferHelper.sol';\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\nimport './PoolNAVLogic.sol';\n\n/**\n * @title Untangled's SecuritizationPoolAsset contract\n * @notice Provides pool's asset related functions\n * @author Untangled Team\n */\nlibrary PoolAssetLogic {\n    event ExportNFTAsset(address tokenAddress, address toPoolAddress, uint256[] tokenIds);\n    event WithdrawNFTAsset(address[] tokenAddresses, uint256[] tokenIds, address[] recipients);\n    event UpdateOpeningBlockTimestamp(uint256 newTimestamp);\n    event CollectNFTAsset(uint256[] tokenIds, uint256 expectedAssetsValue);\n    event CollectERC20Asset(address token, uint256 currentBalance);\n    event WithdrawERC20Asset(address[] tokenAddresses, address[] recipients, uint256[] amounts);\n    event SetRiskScore(DataTypes.RiskScore[] riskscores);\n\n    /** UTILITY FUNCTION */\n    function _removeNFTAsset(\n        DataTypes.NFTAsset[] storage _nftAssets,\n        address tokenAddress,\n        uint256 tokenId\n    ) private returns (bool) {\n        uint256 nftAssetsLength = _nftAssets.length;\n        for (uint256 i = 0; i < nftAssetsLength; i = UntangledMath.uncheckedInc(i)) {\n            if (_nftAssets[i].tokenAddress == tokenAddress && _nftAssets[i].tokenId == tokenId) {\n                // Remove i element from nftAssets\n                _removeNFTAssetIndex(_nftAssets, i);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function _removeNFTAssetIndex(DataTypes.NFTAsset[] storage _nftAssets, uint256 indexToRemove) private {\n        _nftAssets[indexToRemove] = _nftAssets[_nftAssets.length - 1];\n\n        _nftAssets.pop();\n    }\n\n    function _pushTokenAssetAddress(\n        mapping(address => bool) storage existsTokenAssetAddress,\n        address[] storage tokenAssetAddresses,\n        address tokenAddress\n    ) private {\n        if (!existsTokenAssetAddress[tokenAddress]) tokenAssetAddresses.push(tokenAddress);\n        existsTokenAssetAddress[tokenAddress] = true;\n    }\n\n    // TODO have to use modifier in main contract\n    function setupRiskScores(\n        DataTypes.Storage storage _poolStorage,\n        uint32[] calldata _daysPastDues,\n        uint32[] calldata _ratesAndDefaults,\n        uint32[] calldata _periodsAndWriteOffs\n    ) external {\n        uint256 _daysPastDuesLength = _daysPastDues.length;\n        require(\n            _daysPastDuesLength * 6 == _ratesAndDefaults.length &&\n                _daysPastDuesLength * 4 == _periodsAndWriteOffs.length,\n            'SecuritizationPool: Riskscore params length is not equal'\n        );\n\n        delete _poolStorage.riskScores;\n\n        for (uint256 i = 0; i < _daysPastDuesLength; i = UntangledMath.uncheckedInc(i)) {\n            require(\n                i == 0 || _daysPastDues[i] > _daysPastDues[i - 1],\n                'SecuritizationPool: Risk scores must be sorted'\n            );\n            uint32 _interestRate = _ratesAndDefaults[i + _daysPastDuesLength * 2];\n            uint32 _writeOffAfterGracePeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 2];\n            uint32 _writeOffAfterCollectionPeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 3];\n            _poolStorage.riskScores.push(\n                DataTypes.RiskScore({\n                    daysPastDue: _daysPastDues[i],\n                    advanceRate: _ratesAndDefaults[i],\n                    penaltyRate: _ratesAndDefaults[i + _daysPastDuesLength],\n                    interestRate: _interestRate,\n                    probabilityOfDefault: _ratesAndDefaults[i + _daysPastDuesLength * 3],\n                    lossGivenDefault: _ratesAndDefaults[i + _daysPastDuesLength * 4],\n                    discountRate: _ratesAndDefaults[i + _daysPastDuesLength * 5],\n                    gracePeriod: _periodsAndWriteOffs[i],\n                    collectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength],\n                    writeOffAfterGracePeriod: _writeOffAfterGracePeriod,\n                    writeOffAfterCollectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength * 3]\n                })\n            );\n            PoolNAVLogic.file(\n                _poolStorage,\n                'writeOffGroup',\n                _interestRate,\n                _writeOffAfterGracePeriod,\n                _periodsAndWriteOffs[i],\n                _ratesAndDefaults[i + _daysPastDuesLength],\n                i\n            );\n            PoolNAVLogic.file(\n                _poolStorage,\n                'writeOffGroup',\n                _interestRate,\n                _writeOffAfterCollectionPeriod,\n                _periodsAndWriteOffs[i + _daysPastDuesLength],\n                _ratesAndDefaults[i + _daysPastDuesLength],\n                i\n            );\n        }\n\n        // Set discount rate\n        PoolNAVLogic.file(_poolStorage, 'discountRate', _poolStorage.riskScores[0].discountRate);\n\n        emit SetRiskScore(_poolStorage.riskScores);\n    }\n\n    // TODO have to use modifier in main contract\n    function exportAssets(\n        DataTypes.NFTAsset[] storage _nftAssets,\n        address tokenAddress,\n        address toPoolAddress,\n        uint256[] calldata tokenIds\n    ) external {\n        uint256 tokenIdsLength = tokenIds.length;\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\n            require(_removeNFTAsset(_nftAssets, tokenAddress, tokenIds[i]), 'SecuritizationPool: Asset does not exist');\n        }\n\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\n            UntangledERC721(tokenAddress).safeTransferFrom(address(this), toPoolAddress, tokenIds[i]);\n        }\n\n        emit ExportNFTAsset(tokenAddress, toPoolAddress, tokenIds);\n    }\n\n    // TODO have to use modifier in main contract\n    function withdrawAssets(\n        DataTypes.NFTAsset[] storage _nftAssets,\n        address[] calldata tokenAddresses,\n        uint256[] calldata tokenIds,\n        address[] calldata recipients\n    ) external {\n        uint256 tokenIdsLength = tokenIds.length;\n        require(tokenAddresses.length == tokenIdsLength, 'tokenAddresses length and tokenIds length are not equal');\n        require(\n            tokenAddresses.length == recipients.length,\n            'tokenAddresses length and recipients length are not equal'\n        );\n\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\n            require(\n                _removeNFTAsset(_nftAssets, tokenAddresses[i], tokenIds[i]),\n                'SecuritizationPool: Asset does not exist'\n            );\n        }\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\n            UntangledERC721(tokenAddresses[i]).safeTransferFrom(address(this), recipients[i], tokenIds[i]);\n        }\n\n        emit WithdrawNFTAsset(tokenAddresses, tokenIds, recipients);\n    }\n\n    function getLoansValue(\n        DataTypes.Storage storage _poolStorage,\n        uint256[] calldata tokenIds,\n        DataTypes.LoanEntry[] calldata loanEntries\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues) {\n        expectedAssetValues = new uint256[](tokenIds.length);\n        for (uint256 i = 0; i < tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\n            uint256 assetValue = PoolNAVLogic.getExpectedLoanvalue(_poolStorage, loanEntries[i]);\n            expectedAssetsValue = expectedAssetsValue + assetValue;\n            expectedAssetValues[i] = assetValue;\n        }\n\n        return (expectedAssetsValue, expectedAssetValues);\n    }\n\n    // TODO have to use modifier in main contract\n    function collectAssets(\n        DataTypes.Storage storage _poolStorage,\n        uint256[] calldata tokenIds,\n        DataTypes.LoanEntry[] calldata loanEntries\n    ) external returns (uint256) {\n        uint256 tokenIdsLength = tokenIds.length;\n        uint256 expectedAssetsValue = 0;\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\n            expectedAssetsValue = expectedAssetsValue + PoolNAVLogic.addLoan(_poolStorage, tokenIds[i], loanEntries[i]);\n        }\n\n        if (_poolStorage.firstAssetTimestamp == 0) {\n            _poolStorage.firstAssetTimestamp = uint64(block.timestamp);\n            _setUpOpeningBlockTimestamp(_poolStorage);\n        }\n        if (_poolStorage.openingBlockTimestamp == 0) {\n            // If openingBlockTimestamp is not set\n            _setOpeningBlockTimestamp(_poolStorage, uint64(block.timestamp));\n        }\n\n        emit CollectNFTAsset(tokenIds, expectedAssetsValue);\n        return expectedAssetsValue;\n    }\n\n    // TODO have to use modifier in main contract\n    function setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) public {\n        _setUpOpeningBlockTimestamp(_poolStorage);\n    }\n\n    /// @dev Set the opening block timestamp\n    function _setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) private {\n        address tgeAddress = _poolStorage.tgeAddress;\n        if (tgeAddress == address(0)) return;\n        uint64 _firstNoteTokenMintedTimestamp = uint64(IMintedNormalTGE(tgeAddress).firstNoteTokenMintedTimestamp());\n        uint64 _firstAssetTimestamp = _poolStorage.firstAssetTimestamp;\n        if (_firstNoteTokenMintedTimestamp > 0 && _firstAssetTimestamp > 0) {\n            // Pick the later\n            if (_firstAssetTimestamp > _firstNoteTokenMintedTimestamp) {\n                _setOpeningBlockTimestamp(_poolStorage, _firstAssetTimestamp);\n            } else {\n                _setOpeningBlockTimestamp(_poolStorage, _firstNoteTokenMintedTimestamp);\n            }\n        }\n    }\n\n    function _setOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage, uint64 _openingBlockTimestamp) internal {\n        _poolStorage.openingBlockTimestamp = _openingBlockTimestamp;\n        emit UpdateOpeningBlockTimestamp(_openingBlockTimestamp);\n    }\n}\n"
    },
    "contracts/libraries/logic/PoolNAVLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// https://github.com/centrifuge/tinlake\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\n\n// Copyright (C) 2022 Centrifuge\n// Copyright (C) 2023 Untangled.Finance\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.19;\nimport '../UnpackLoanParamtersLib.sol';\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\nimport {Math} from '../Math.sol';\nimport {Discounting} from '../Discounting.sol';\nimport {GenericLogic} from './GenericLogic.sol';\n\n/**\n * @title Untangled's SecuritizaionPoolNAV contract\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\n *  Automatically invests across borrower pools using an adjustable strategy.\n * @author Untangled Team\n */\nlibrary PoolNAVLogic {\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\n\n    // events\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\n\n    /** UTILITY FUNCTION */\n\n    function getExpectedLoanvalue(\n        DataTypes.Storage storage _poolStorage,\n        DataTypes.LoanEntry calldata loanEntry\n    ) public view returns (uint256 principalAmount) {\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\n            _poolStorage.riskScores,\n            loanEntry.riskScore\n        );\n        principalAmount = (loanParam.principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\n    }\n\n    function addLoan(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan,\n        DataTypes.LoanEntry calldata loanEntry\n    ) public returns (uint256) {\n        bytes32 _tokenId = bytes32(loan);\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\n\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\n\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\n\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\n            _poolStorage.riskScores,\n            loanEntry.riskScore\n        );\n        uint256 principalAmount = loanParam.principalAmount;\n        uint256 _convertedInterestRate;\n\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\n\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\n        _poolStorage.loanCount++;\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\n            // If interest rate is not set\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\n        }\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\n        GenericLogic.accrue(_poolStorage, loan);\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\n\n        // increase NAV\n        borrow(_poolStorage, loan, principalAmount);\n        _incDebt(_poolStorage, loan, principalAmount);\n\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\n\n        return principalAmount;\n    }\n\n    function setLoanMaturityDate(\n        DataTypes.Storage storage _poolStorage,\n        bytes32 nftID_,\n        uint256 maturityDate_\n    ) internal {\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\n\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\n            Discounting.uniqueDayTimestamp(maturityDate_)\n        );\n        emit SetLoanMaturity(nftID_, maturityDate_);\n    }\n\n    /// @notice file allows governance to change parameters of the contract\n    /// @param name name of the parameter\n    /// @param value new value of the parameter\n\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\n        if (name == 'discountRate') {\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\n        } else {\n            revert('unknown config parameter');\n        }\n    }\n\n    /// @notice file allows governance to change parameters of the contract\n    /// @param name name of the parameter group\n    /// @param writeOffPercentage_ the write off rate in percent\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\n\n    function file(\n        DataTypes.Storage storage _poolStorage,\n        bytes32 name,\n        uint256 rate_,\n        uint256 writeOffPercentage_,\n        uint256 overdueDays_,\n        uint256 penaltyRate_,\n        uint256 riskIndex\n    ) public {\n        if (name == 'writeOffGroup') {\n            uint256 index = _poolStorage.writeOffGroups.length;\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\n            uint256 _convertedPenaltyRate = Math.ONE +\n                (Math.ONE * penaltyRate_ * rate_) /\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\n            _poolStorage.writeOffGroups.push(\n                DataTypes.WriteOffGroup(\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\n                    GenericLogic.toUint128(_convertedOverdueDays),\n                    GenericLogic.toUint128(riskIndex)\n                )\n            );\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\n        } else {\n            revert('unknown name');\n        }\n    }\n\n    /// @notice file manages different state configs for the pile\n    /// only a ward can call this function\n    /// @param what what config to change\n    /// @param rate the interest rate group\n    /// @param value the value to change\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\n        if (what == 'rate') {\n            require(value != 0, 'rate-per-second-can-not-be-0');\n            if (_poolStorage.rates[rate].chi == 0) {\n                _poolStorage.rates[rate].chi = Math.ONE;\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\n            } else {\n                GenericLogic.drip(_poolStorage, rate);\n            }\n            _poolStorage.rates[rate].ratePerSecond = value;\n        } else if (what == 'penalty') {\n            require(value != 0, 'penalty-per-second-can-not-be-0');\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\n            } else {\n                GenericLogic.drip(_poolStorage, rate);\n            }\n\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\n        } else {\n            revert('unknown parameter');\n        }\n    }\n\n    /// @notice borrow updates the NAV for a new borrowed loan\n    /// @param loan the id of the loan\n    /// @param amount the amount borrowed\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\n    function borrow(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan,\n        uint256 amount\n    ) private returns (uint256 navIncrease) {\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n        bytes32 nftID_ = GenericLogic.nftID(loan);\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\n\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\n\n        if (nnow > _poolStorage.lastNAVUpdate) {\n            GenericLogic.calcUpdateNAV(_poolStorage);\n        }\n\n        // uint256 beforeNAV = latestNAV;\n\n        // calculate amount including fixed fee if applicatable\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\n\n        // calculate future value FV\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\n        uint256 fv = Discounting.calcFutureValue(\n            _rate.ratePerSecond,\n            amount,\n            maturityDate_,\n            GenericLogic.recoveryRatePD(\n                _poolStorage.riskScores,\n                nftDetail.risk,\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\n            )\n        );\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\n        );\n\n        // add future value to the bucket of assets with the same maturity date\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\n\n        // increase borrowed amount for future ceiling computations\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\n        );\n\n        // return increase NAV amount\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\n\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\n\n        return navIncrease;\n    }\n\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\n        _poolStorage.latestNAV = Discounting.secureSub(\n            _poolStorage.latestNAV,\n            Math.rmul(\n                amount,\n                GenericLogic.toUint128(\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\n                )\n            )\n        );\n        decDebt(_poolStorage, loan, amount);\n    }\n\n    function _calcFutureValue(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan,\n        uint256 _debt,\n        uint256 _maturityDate\n    ) private view returns (uint256) {\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\n        uint256 fv = Discounting.calcFutureValue(\n            _rate.ratePerSecond,\n            _debt,\n            _maturityDate,\n            GenericLogic.recoveryRatePD(\n                _poolStorage.riskScores,\n                nftDetail.risk,\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\n            )\n        );\n        return fv;\n    }\n\n    /// @notice repay updates the NAV for a new repaid loan\n    /// @param loans the ids of the loan\n    /// @param amounts the amounts repaid\n    function repayLoan(\n        DataTypes.Storage storage _poolStorage,\n        uint256[] calldata loans,\n        uint256[] calldata amounts\n    ) external returns (uint256[] memory, uint256[] memory) {\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n\n        uint256 numberOfLoans = loans.length;\n\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\n\n        for (uint256 i; i < numberOfLoans; i++) {\n            uint256 loan = loans[i];\n            uint256 amount = amounts[i];\n\n            // re-define: prevent stack too deep\n            DataTypes.Storage storage __poolStorage = _poolStorage;\n\n            GenericLogic.accrue(__poolStorage, loan);\n\n            if (nnow > __poolStorage.lastNAVUpdate) {\n                GenericLogic.calcUpdateNAV(__poolStorage);\n            }\n\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\n\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\n            if (amount > _currentDebt) {\n                amount = _currentDebt;\n            }\n\n            repayAmounts[i] = amount;\n            previousDebts[i] = _currentDebt;\n\n            // case 1: repayment of a written-off loan\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\n                // update nav with write-off decrease\n                _decreaseLoan(__poolStorage, loan, amount);\n                continue;\n            }\n\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\n            uint256 fvDecrease = preFV;\n\n            // prevent stack too deep\n            {\n                uint256 fv = 0;\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\n                if (_debt != 0) {\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\n                    if (preFV >= fv) {\n                        fvDecrease = Math.safeSub(preFV, fv);\n                    } else {\n                        fvDecrease = 0;\n                    }\n                }\n\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\n            }\n\n            // case 2: repayment of a loan before or on maturity date\n            if (maturityDate_ >= nnow) {\n                // remove future value decrease from bucket\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\n\n                uint256 discountDecrease = Discounting.calcDiscount(\n                    __poolStorage.discountRate,\n                    fvDecrease,\n                    nnow,\n                    maturityDate_\n                );\n\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\n                    discountDecrease\n                );\n\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\n            } else {\n                // case 3: repayment of an overdue loan\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\n                    fvDecrease\n                );\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\n            }\n\n            decDebt(__poolStorage, loan, amount);\n            emit Repay(bytes32(loan), amount);\n        }\n        return (repayAmounts, previousDebts);\n    }\n\n    /// @notice writeOff writes off a loan if it is overdue\n    /// @param loan the id of the loan\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\n\n        bytes32 nftID_ = GenericLogic.nftID(loan);\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\n        require(maturityDate_ > 0, 'loan-does-not-exist');\n\n        // can not write-off healthy loans\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\n        // check the writeoff group based on the amount of days overdue\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\n\n        if (\n            writeOffGroupIndex_ < type(uint128).max &&\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\n        ) {\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\n        }\n    }\n\n    /// @notice internal function for the write off\n    /// @param loan the id of the loan\n    /// @param writeOffGroupIndex_ the index of the writeoff group\n    /// @param nftID_ the nftID of the loan\n    /// @param maturityDate_ the maturity date of the loan\n    function _writeOff(\n        DataTypes.Storage storage _poolStorage,\n        uint256 loan,\n        uint256 writeOffGroupIndex_,\n        bytes32 nftID_,\n        uint256 maturityDate_\n    ) internal {\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\n        // Ensure we have an up to date NAV\n        if (nnow > _poolStorage.lastNAVUpdate) {\n            GenericLogic.calcUpdateNAV(_poolStorage);\n        }\n\n        uint256 latestNAV_ = _poolStorage.latestNAV;\n\n        // first time written-off\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\n                // write off after the maturity date\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\n                    fv\n                );\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\n            } else {\n                // write off before or on the maturity date\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\n\n                uint256 pv = Math.rmul(\n                    fv,\n                    Discounting.rpow(\n                        _poolStorage.discountRate,\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\n                        Math.ONE\n                    )\n                );\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\n                    pv\n                );\n\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\n            }\n        }\n\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\n        _poolStorage.latestNAV = Math.safeAdd(\n            latestNAV_,\n            Math.rmul(\n                GenericLogic.debt(_poolStorage, loan),\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\n            )\n        );\n    }\n\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\n\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\n        // change to new rate interestRate immediately in pile if loan debt exists\n        uint256 loan = uint256(nftID_);\n        if (_poolStorage.pie[loan] != 0) {\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\n            uint256 _convertedInterestRate = Math.ONE +\n                (riskParam.interestRate * Math.ONE) /\n                (ONE_HUNDRED_PERCENT * 365 days);\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\n                // If interest rate is not set\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\n            }\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\n        }\n\n        // no currencyAmount borrowed yet\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\n            return;\n        }\n\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\n\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\n        // New interest rate leads to a future value.\n        // recalculation required\n\n        uint256 lastNAVUpdate = Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate);\n        {\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\n            uint256 navDecrease = _poolStorage.latestDiscountOfNavAssets[nftID_];\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = 0;\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\n        }\n\n        // update latest NAV\n        // update latest Discount\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\n            Discounting.calcFutureValue(\n                _rate.ratePerSecond,\n                GenericLogic.debt(_poolStorage, loan),\n                GenericLogic.maturityDate(_poolStorage, nftID_),\n                GenericLogic.recoveryRatePD(\n                    _poolStorage.riskScores,\n                    risk_,\n                    nftDetail.expirationTimestamp - block.timestamp\n                )\n            )\n        );\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\n        uint256 navIncrease = Discounting.calcDiscount(\n            _poolStorage.discountRate,\n            fvIncrease,\n            lastNAVUpdate,\n            maturityDate_\n        );\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\n        emit UpdateAssetRiskScore(nftID_, risk_);\n    }\n\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\n        uint256 rate = _poolStorage.loanRates[loan];\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\n\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\n\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\n    }\n\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\n        uint256 rate = _poolStorage.loanRates[loan];\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\n        if (penaltyChi_ > 0) {\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\n        }\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\n\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\n\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\n    }\n}\n"
    },
    "contracts/libraries/logic/RebaseLogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {UntangledERC721} from '../../tokens/ERC721/UntangledERC721.sol';\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\nimport {DataTypes, PRICE_DECIMAL, ONE, ONE_HUNDRED_PERCENT} from '../DataTypes.sol';\nimport {TransferHelper} from '../TransferHelper.sol';\nimport {GenericLogic} from './GenericLogic.sol';\nimport {TGELogic} from './TGELogic.sol';\nimport {Math} from '../Math.sol';\n\n/**\n * @title Untangled's Rebase Logic\n * @notice Provides pool's rebase functions\n * @author Untangled Team\n */\nlibrary RebaseLogic {\n    /// @notice accumulates the senior interest\n    /// @return _seniorDebt the senior debt\n    function dripSeniorDebt(DataTypes.Storage storage _poolStorage) public returns (uint256) {\n        uint256 _seniorDebt = seniorDebt(_poolStorage);\n        _poolStorage.seniorDebt = _seniorDebt;\n        _poolStorage.lastUpdateSeniorInterest = uint64(block.timestamp);\n        return _seniorDebt;\n    }\n\n    /// @notice returns the senior debt with up to date interest\n    /// @return _seniorDebt senior debt\n    function seniorDebt(DataTypes.Storage storage _poolStorage) public view returns (uint256 _seniorDebt) {\n        uint256 lastUpdateSeniorInterest = uint256(_poolStorage.lastUpdateSeniorInterest);\n        if (block.timestamp >= lastUpdateSeniorInterest) {\n            uint256 convertedInterestRate = ONE +\n                (_poolStorage.interestRateSOT * ONE) /\n                (ONE_HUNDRED_PERCENT * 365 days);\n\n            return\n                GenericLogic.chargeInterest(_poolStorage.seniorDebt, convertedInterestRate, lastUpdateSeniorInterest);\n        }\n        return _poolStorage.seniorDebt;\n    }\n\n    function rebase(DataTypes.Storage storage _poolStorage, uint256 _nav, uint256 _reserve) public {\n        (uint256 seniorDebt_, uint256 seniorBalance_) = _rebase(\n            _nav,\n            _reserve,\n            calcExpectedSeniorAsset(_poolStorage.seniorBalance, dripSeniorDebt(_poolStorage))\n        );\n        _poolStorage.seniorDebt = seniorDebt_;\n        _poolStorage.seniorBalance = seniorBalance_;\n    }\n\n    /// @notice changes the senior asset value based on new supply or redeems\n    /// @param _seniorSupply senior supply amount\n    /// @param _seniorRedeem senior redeem amount\n    function changeSeniorAsset(\n        DataTypes.Storage storage _poolStorage,\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorSupply,\n        uint256 _seniorRedeem\n    ) external {\n        (uint256 seniorDebt_, uint256 seniorBalance_) = _rebase(\n            _nav,\n            _reserve,\n            calcExpectedSeniorAsset(\n                _seniorRedeem,\n                _seniorSupply,\n                _poolStorage.seniorBalance,\n                dripSeniorDebt(_poolStorage)\n            )\n        );\n        _poolStorage.seniorDebt = seniorDebt_;\n        _poolStorage.seniorBalance = seniorBalance_;\n    }\n\n    /// @notice internal function for the rebalance of senior debt and balance\n    /// @param _seniorAsset the expected senior asset value (senior debt + senior balance)\n    function _rebase(uint256 _nav, uint256 _reserve, uint256 _seniorAsset) public pure returns (uint256, uint256) {\n        // re-balancing according to new ratio\n\n        uint256 seniorRatio_ = calcSeniorRatio(_seniorAsset, _nav, _reserve);\n\n        // in that case the entire juniorAsset is lost\n        // the senior would own everything that' left\n        if (seniorRatio_ > ONE) {\n            seniorRatio_ = ONE;\n        }\n\n        uint256 seniorBalance_;\n        uint256 seniorDebt_ = Math.rmul(_nav, seniorRatio_);\n        if (seniorDebt_ > _seniorAsset) {\n            seniorDebt_ = _seniorAsset;\n            seniorBalance_ = 0;\n        } else {\n            seniorBalance_ = Math.safeSub(_seniorAsset, seniorDebt_);\n        }\n        return (seniorDebt_, seniorBalance_);\n    }\n\n    /// @notice calculates the senior ratio\n    /// @param seniorAsset the current senior asset value\n    /// @param nav the current NAV\n    /// @param reserve the current reserve\n    /// @return seniorRatio the senior ratio\n    function calcSeniorRatio(\n        uint256 seniorAsset,\n        uint256 nav,\n        uint256 reserve\n    ) public pure returns (uint256 seniorRatio) {\n        // note: NAV + reserve == seniorAsset + juniorAsset (invariant: always true)\n        uint256 assets = Math.safeAdd(nav, reserve);\n        if (assets == 0) {\n            return 0;\n        }\n\n        // if expectedSeniorAsset is passed ratio can be greater than ONE\n        return Math.rdiv(seniorAsset, assets);\n    }\n\n    /// @notice expected senior return if no losses occur\n    /// @param _seniorRedeem the senior redeem amount\n    /// @param _seniorSupply the senior supply amount\n    /// @param _seniorBalance the current senior balance\n    /// @param _seniorDebt the current senior debt\n    /// @return expectedSeniorAsset the expected senior asset value\n    function calcExpectedSeniorAsset(\n        uint256 _seniorRedeem,\n        uint256 _seniorSupply,\n        uint256 _seniorBalance,\n        uint256 _seniorDebt\n    ) public pure returns (uint256 expectedSeniorAsset) {\n        return Math.safeSub(Math.safeAdd(Math.safeAdd(_seniorDebt, _seniorBalance), _seniorSupply), _seniorRedeem);\n    }\n\n    /// @notice calculates the expected Senior asset value\n    /// @param _seniorDebt the current senior debt\n    /// @param _seniorBalance the current senior balance\n    /// @return seniorAsset returns the senior asset value\n    function calcExpectedSeniorAsset(\n        uint256 _seniorDebt,\n        uint256 _seniorBalance\n    ) public pure returns (uint256 seniorAsset) {\n        return Math.safeAdd(_seniorDebt, _seniorBalance);\n    }\n\n    /// @notice calculates the senior token price\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\n    function calcSeniorTokenPrice(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance,\n        uint256 _sotTotalSupply\n    ) external pure returns (uint256 seniorTokenPrice) {\n        return _calcSeniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _sotTotalSupply);\n    }\n\n    /// @notice calculates the junior token price\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\n    function calcJuniorTokenPrice(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance,\n        uint256 _jotTotalSupply\n    ) external pure returns (uint256 juniorTokenPrice) {\n        return _calcJuniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _jotTotalSupply);\n    }\n\n    /// @notice calculates the senior and junior token price based on current NAV and reserve\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\n    function calcTokenPrices(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance,\n        uint256 _jotTotalSupply,\n        uint256 _sotTotalSupply\n    ) external pure returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice) {\n        return (\n            _calcJuniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _jotTotalSupply),\n            _calcSeniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _sotTotalSupply)\n        );\n    }\n\n    /// @notice internal function to calculate the senior token price\n    /// @param _nav the NAV\n    /// @param _reserve the reserve\n    /// @param _seniorDebt the senior debt\n    /// @param _seniorBalance the senior balance\n    /// @param _sotTotalSupply the token supply\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\n    function _calcSeniorTokenPrice(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance,\n        uint256 _sotTotalSupply\n    ) internal pure returns (uint256 seniorTokenPrice) {\n        // the coordinator interface will pass the reserveAvailable\n\n        if ((_nav == 0 && _reserve == 0) || _sotTotalSupply <= 2) {\n            // we are using a tolerance of 2 here, as there can be minimal supply leftovers after all redemptions due to rounding\n            // initial token price at start 1.00\n            return ONE;\n        }\n\n        uint256 poolValue = Math.safeAdd(_nav, _reserve);\n        uint256 seniorAssetValue = calcExpectedSeniorAsset(_seniorDebt, _seniorBalance);\n\n        if (poolValue < seniorAssetValue) {\n            seniorAssetValue = poolValue;\n        }\n        return Math.rdiv(seniorAssetValue, _sotTotalSupply);\n    }\n\n    /// @notice internal function to calculate the junior token price\n    /// @param _nav the NAV\n    /// @param _reserve the reserve\n    /// @param _seniorDebt the senior debt\n    /// @param _seniorBalance the senior balance\n    /// @param _jotTotalSupply the token supply\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\n    function _calcJuniorTokenPrice(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance,\n        uint256 _jotTotalSupply\n    ) internal pure returns (uint256 juniorTokenPrice) {\n        if ((_nav == 0 && _reserve == 0) || _jotTotalSupply <= 2) {\n            // we are using a tolerance of 2 here, as there can be minimal supply leftovers after all redemptions due to rounding\n            // initial token price at start 1.00\n            return ONE;\n        }\n        // reserve includes creditline from maker\n        uint256 poolValue = Math.safeAdd(_nav, _reserve);\n\n        // includes creditline from mkr\n        uint256 seniorAssetValue = calcExpectedSeniorAsset(_seniorDebt, _seniorBalance);\n\n        if (poolValue < seniorAssetValue) {\n            return 0;\n        }\n\n        return Math.rdiv(Math.safeSub(poolValue, seniorAssetValue), _jotTotalSupply);\n    }\n\n    /// @notice returns the current junior ratio protection in the Tinlake\n    /// @return juniorRatio_ is denominated in RATE_SCALING_FACTOR\n    function calcJuniorRatio(\n        uint256 _nav,\n        uint256 _reserve,\n        uint256 _seniorDebt,\n        uint256 _seniorBalance\n    ) external pure returns (uint256 juniorRatio_) {\n        uint256 seniorAsset_ = Math.safeAdd(_seniorDebt, _seniorBalance);\n        uint256 assets_ = Math.safeAdd(_nav, _reserve);\n\n        if (seniorAsset_ == 0 && assets_ == 0) {\n            return 0;\n        }\n\n        if (seniorAsset_ == 0 && assets_ > 0) {\n            return ONE_HUNDRED_PERCENT;\n        }\n\n        if (seniorAsset_ > assets_) {\n            return 0;\n        }\n\n        return (Math.safeSub(ONE, Math.rdiv(seniorAsset_, assets_)) * ONE_HUNDRED_PERCENT) / ONE;\n    }\n}\n"
    },
    "contracts/libraries/logic/TGELogic.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport {ISecuritizationPoolValueService} from '../../interfaces/ISecuritizationPoolValueService.sol';\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\nimport {Configuration} from '../Configuration.sol';\nimport {DataTypes, RATE_SCALING_FACTOR} from '../DataTypes.sol';\nimport {TransferHelper} from '../TransferHelper.sol';\n\nlibrary TGELogic {\n    event UpdateTGEAddress(address tge, Configuration.NOTE_TOKEN_TYPE noteType);\n    event IncreaseReserve(uint256 increasingAmount, uint256 currencyAmount);\n    event IncreaseCapitalReserve(uint256 increasingAmount, uint256 currencyAmount);\n    event DecreaseReserve(uint256 decreasingAmount, uint256 currencyAmount);\n    event DecreaseCapitalReserve(uint256 decreasingAmount, uint256 currencyAmount);\n    event DecreaseIncomeReserve(uint256 decreasingAmount, uint256 currencyAmount);\n    event UpdateDebtCeiling(uint256 _debtCeiling);\n    event UpdateMintFirstLoss(uint32 _mintFirstLoss);\n    event UpdateInterestRateSot(uint32 _interestRateSot);\n    event Withdraw(address originatorAddress, uint256 amount);\n    event ClaimCashRemain(address pot, address recipientWallet, uint256 balance);\n\n    // alias\n    function sotToken(DataTypes.Storage storage _poolStorage) public view returns (address) {\n        address tge = _poolStorage.tgeAddress;\n        if (tge == address(0)) return address(0);\n        return IMintedNormalTGE(tge).token();\n    }\n\n    // alias\n    function jotToken(DataTypes.Storage storage _poolStorage) public view returns (address) {\n        address tge = _poolStorage.secondTGEAddress;\n        if (tge == address(0)) return address(0);\n        return IMintedNormalTGE(tge).token();\n    }\n\n    function underlyingCurrency(DataTypes.Storage storage _poolStorage) public view returns (address) {\n        return _poolStorage.underlyingCurrency;\n    }\n\n    function minFirstLossCushion(DataTypes.Storage storage _poolStorage) public view returns (uint32) {\n        return _poolStorage.minFirstLossCushion;\n    }\n\n    function debtCeiling(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\n        return _poolStorage.debtCeiling;\n    }\n\n    function interestRateSOT(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\n        return _poolStorage.interestRateSOT;\n    }\n\n    function totalAssetRepaidCurrency(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\n        return _poolStorage.totalAssetRepaidCurrency;\n    }\n\n    function injectTGEAddress(\n        DataTypes.Storage storage _poolStorage,\n        address _tgeAddress,\n        Configuration.NOTE_TOKEN_TYPE _noteType\n    ) external {\n        require(_tgeAddress != address(0), 'SecuritizationPool: Address zero');\n        address _tokenAddress = IMintedNormalTGE(_tgeAddress).token();\n        require(_tokenAddress != address(0), 'SecuritizationPool: Address zero');\n\n        if (_noteType == Configuration.NOTE_TOKEN_TYPE.SENIOR) {\n            require(_poolStorage.tgeAddress == address(0), 'SecuritizationPool: Already issue sot');\n            _poolStorage.tgeAddress = _tgeAddress;\n            _poolStorage.sotToken = _tokenAddress;\n        } else {\n            require(_poolStorage.secondTGEAddress == address(0), 'SecuritizationPool: Already issue jot');\n            _poolStorage.secondTGEAddress = _tgeAddress;\n            _poolStorage.jotToken = _tokenAddress;\n        }\n\n        emit UpdateTGEAddress(_tgeAddress, _noteType);\n    }\n\n    function disburse(DataTypes.Storage storage _poolStorage, address usr, uint256 currencyAmount) external {\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, usr, currencyAmount);\n    }\n\n    function isDebtCeilingValid(DataTypes.Storage storage _poolStorage) public view returns (bool) {\n        uint256 totalDebt = 0;\n        if (_poolStorage.tgeAddress != address(0)) {\n            totalDebt += IMintedNormalTGE(_poolStorage.tgeAddress).currencyRaised();\n        }\n        if (_poolStorage.secondTGEAddress != address(0)) {\n            totalDebt += IMintedNormalTGE(_poolStorage.secondTGEAddress).currencyRaised();\n        }\n        return _poolStorage.debtCeiling >= totalDebt;\n    }\n\n    // Increase by value\n    function increaseTotalAssetRepaidCurrency(DataTypes.Storage storage _poolStorage, uint256 amount) external {\n        _poolStorage.totalAssetRepaidCurrency = _poolStorage.totalAssetRepaidCurrency + amount;\n    }\n\n    function hasFinishedRedemption(DataTypes.Storage storage _poolStorage) public view returns (bool) {\n        address sToken = sotToken(_poolStorage);\n        if (sToken != address(0)) {\n            require(IERC20Upgradeable(sToken).totalSupply() == 0, 'SecuritizationPool: SOT still remain');\n        }\n\n        address jToken = jotToken(_poolStorage);\n        if (jToken != address(0)) {\n            require(IERC20Upgradeable(jToken).totalSupply() == 0, 'SecuritizationPool: JOT still remain');\n        }\n\n        return true;\n    }\n\n    function setPot(DataTypes.Storage storage _poolStorage, address _pot) external {\n        require(_poolStorage.pot != _pot, 'SecuritizationPool: Same address with current pot');\n        _poolStorage.pot = _pot;\n\n        if (_pot == address(this)) {\n            require(\n                IERC20Upgradeable(_poolStorage.underlyingCurrency).approve(_pot, type(uint256).max),\n                'SecuritizationPool: Pot not approved'\n            );\n        }\n    }\n\n    function setMinFirstLossCushion(DataTypes.Storage storage _poolStorage, uint32 _minFirstLossCushion) external {\n        _setMinFirstLossCushion(_poolStorage, _minFirstLossCushion);\n    }\n\n    function _setMinFirstLossCushion(DataTypes.Storage storage _poolStorage, uint32 _minFirstLossCushion) internal {\n        require(\n            _minFirstLossCushion <= 100 * RATE_SCALING_FACTOR,\n            'SecuritizationPool: minFirstLossCushion is greater than 100'\n        );\n\n        _poolStorage.minFirstLossCushion = _minFirstLossCushion;\n        emit UpdateMintFirstLoss(_minFirstLossCushion);\n    }\n\n    function setDebtCeiling(DataTypes.Storage storage _poolStorage, uint256 _debtCeiling) external {\n        _setDebtCeiling(_poolStorage, _debtCeiling);\n    }\n\n    function _setDebtCeiling(DataTypes.Storage storage _poolStorage, uint256 _debtCeiling) internal {\n        _poolStorage.debtCeiling = _debtCeiling;\n        emit UpdateDebtCeiling(_debtCeiling);\n    }\n\n    function _setInterestRateSOT(DataTypes.Storage storage _poolStorage, uint32 _newRate) external {\n        _poolStorage.interestRateSOT = _newRate;\n        emit UpdateInterestRateSot(_newRate);\n    }\n\n    function increaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) public {\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve + currencyAmount;\n        emit IncreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\n    }\n\n    function contributeToCapitalReserve(\n        DataTypes.Storage storage _poolStorage,\n        address contributor,\n        uint256 currencyAmount\n    ) external {\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, contributor, _poolStorage.pot, currencyAmount);\n\n        increaseCapitalReserve(_poolStorage, currencyAmount);\n    }\n\n    function decreaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\n        require(_poolStorage.capitalReserve >= currencyAmount, 'insufficient balance of capital reserve');\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - currencyAmount;\n        emit DecreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\n    }\n\n    function decreaseIncomeReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\n        require(_poolStorage.incomeReserve >= currencyAmount, 'insufficient balance of income reserve');\n        _poolStorage.incomeReserve = _poolStorage.incomeReserve - currencyAmount;\n        emit DecreaseIncomeReserve(currencyAmount, _poolStorage.incomeReserve);\n    }\n\n    // After closed pool and redeem all not -> get remain cash to recipient wallet\n    function claimCashRemain(DataTypes.Storage storage _poolStorage, address recipientWallet) external {\n        IERC20Upgradeable currency = IERC20Upgradeable(_poolStorage.underlyingCurrency);\n        uint256 balance = currency.balanceOf(_poolStorage.pot);\n        require(\n            currency.transferFrom(_poolStorage.pot, recipientWallet, balance),\n            'SecuritizationPool: Transfer failed'\n        );\n\n        emit ClaimCashRemain(_poolStorage.pot, recipientWallet, balance);\n    }\n\n    function withdraw(DataTypes.Storage storage _poolStorage, address to, uint256 amount) public {\n        require(_poolStorage.capitalReserve >= amount, 'SecuritizationPool: insufficient balance of capital reserve');\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - amount;\n\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, to, amount);\n        emit DecreaseCapitalReserve(amount, _poolStorage.capitalReserve);\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// tinlake-math/math.sol -- Tinlake Math\n\n// Copyright (C) 2022 Centrifuge\n// Copyright (C) 2023 Untangled.Finance\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.19;\n\nlibrary Math {\n    uint256 constant ONE = 10 ** 27;\n\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'safe-add-failed');\n    }\n\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'safe-sub-failed');\n    }\n\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\n    }\n\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\n        z = x / y;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = safeMul(x, y) / ONE;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        require(y > 0, 'division by zero');\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\n    }\n\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\n        require(y > 0, 'division by zero');\n        // always rounds up\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}"
    },
    "contracts/libraries/UnpackLoanParamtersLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.5.10;\n\nlibrary UnpackLoanParamtersLib {\n    struct InterestParams {\n        uint256 principalAmount;\n        uint256 termStartUnixTimestamp;\n        uint256 termEndUnixTimestamp;\n        AmortizationUnitType amortizationUnitType;\n        uint256 termLengthInAmortizationUnits;\n        // interest rates can, at a maximum, have 4 decimal places of precision.\n        uint256 interestRate;\n    }\n\n    enum AmortizationUnitType {\n        MINUTES, // 0 - since 1.0.13\n        HOURS, // 1\n        DAYS, // 2\n        WEEKS, // 3\n        MONTHS, // 4\n        YEARS // 5\n    }\n\n    /**\n     *\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\n     */\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\n        return uint256(value) / 2 ** amount;\n    }\n\n    /**\n     * Unpack parameters from packed bytes32 data\n     */\n    function _unpackLoanTermsParametersFromBytes(\n        bytes32 parameters\n    )\n        internal\n        pure\n        returns (\n            uint256 _principalAmount,\n            uint256 _interestRate,\n            uint256 _amortizationUnitType,\n            uint256 _termLengthInAmortizationUnits,\n            uint256 _gracePeriodInDays\n        )\n    {\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\n        bytes32 principalAmountShifted = parameters &\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\n        bytes32 amortizationUnitTypeShifted = parameters &\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\n        // The subsequent 12 bytes encode the term length, as denominated in\n        // the encoded amortization unit.\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\n\n        bytes32 gracePeriodInDaysShifted = parameters &\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\n\n        return (\n            _bitShiftRight(principalAmountShifted, 152),\n            _bitShiftRight(interestRateShifted, 128),\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\n        );\n    }\n\n    /**\n     * Unpack data from hex string which including informations about Loan\n     */\n    function unpackParametersFromBytes(\n        bytes32 parameters\n    )\n        internal\n        pure\n        returns (\n            uint256 _principalAmount,\n            uint256 _interestRate,\n            uint256 _amortizationUnitType,\n            uint256 _termLengthInAmortizationUnits,\n            uint256 _gracePeriodInDays\n        )\n    {\n        return _unpackLoanTermsParametersFromBytes(parameters);\n    }\n}\n"
    },
    "contracts/libraries/UntangledMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n/// @title UntangledMath\n/// @author Untangled Team\nlibrary UntangledMath {\n    uint256 public constant ONE = 10 ** 27;\n\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    z := base\n                }\n                default {\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    z := base\n                }\n                default {\n                    z := x\n                }\n                let half := div(base, 2) // for rounding.\n                for {\n                    n := div(n, 2)\n                } n {\n                    n := div(n, 2)\n                } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) {\n                        revert(0, 0)\n                    }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n                    x := div(xxRound, base)\n                    if mod(n, 2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\n                            revert(0, 0)\n                        }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n\n    function uncheckedInc(uint256 x) internal pure returns (uint256 z) {\n        unchecked {\n            z = x + 1;\n        }\n    }\n}\n"
    },
    "contracts/protocol/pool/mock/SecuritizationPoolV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\n// import '../SecuritizationPool.sol';\nimport '../Pool.sol';\n\ncontract SecuritizationPoolV2 is Pool {\n    function greeting() public pure returns (string memory) {\n        return 'Hello world';\n    }\n\n    function hello() public pure returns (string memory) {\n        return 'Hello world';\n    }\n}\n"
    },
    "contracts/protocol/pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\nimport {IPool} from '../../interfaces/IPool.sol';\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\nimport {Registry} from '../../storage/Registry.sol';\nimport {OWNER_ROLE, ORIGINATOR_ROLE, POOL_ADMIN_ROLE} from '../../libraries/DataTypes.sol';\nimport {PoolStorage} from './PoolStorage.sol';\nimport {DataTypes, ONE, ONE_HUNDRED_PERCENT} from '../../libraries/DataTypes.sol';\nimport {UntangledBase} from '../../base/UntangledBase.sol';\nimport {PoolNAVLogic} from '../../libraries/logic/PoolNAVLogic.sol';\nimport {PoolAssetLogic} from '../../libraries/logic/PoolAssetLogic.sol';\nimport {TGELogic} from '../../libraries/logic/TGELogic.sol';\nimport {GenericLogic} from '../../libraries/logic/GenericLogic.sol';\nimport {RebaseLogic} from '../../libraries/logic/RebaseLogic.sol';\nimport {Configuration} from '../../libraries/Configuration.sol';\n\n/**\n * @title Untangled's SecuritizationPool contract\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\n *  Automatically invests across borrower pools using an adjustable strategy.\n * @author Untangled Team\n */\ncontract Pool is IPool, PoolStorage, UntangledBase {\n    using ConfigHelper for Registry;\n\n    Registry public registry;\n\n    event InsertNFTAsset(address token, uint256 tokenId);\n    event Repay(address poolAddress, uint256 increaseInterestRepay, uint256 increasePrincipalRepay, uint256 timestamp);\n\n    modifier requirePoolAdminOrOwner() {\n        require(\n            hasRole(POOL_ADMIN_ROLE, _msgSender()) || hasRole(OWNER_ROLE, _msgSender()),\n            'Pool: Not an pool admin or pool owner'\n        );\n        _;\n    }\n\n    /** CONSTRUCTOR */\n    function initialize(address _registryAddress, bytes memory params) public initializer {\n        __UntangledBase__init(_msgSender());\n\n        require(_registryAddress != address(0), 'Registry address cannot be empty');\n        registry = Registry(_registryAddress);\n\n        DataTypes.NewPoolParams memory newPoolParams = abi.decode(params, (DataTypes.NewPoolParams));\n\n        require(newPoolParams.currency != address(0), 'Pool: Invalid currency');\n\n        _poolStorage.underlyingCurrency = newPoolParams.currency;\n        _poolStorage.validatorRequired = newPoolParams.validatorRequired;\n        _poolStorage.pot = address(this);\n\n        TGELogic._setMinFirstLossCushion(_poolStorage, newPoolParams.minFirstLossCushion);\n        TGELogic._setDebtCeiling(_poolStorage, newPoolParams.debtCeiling);\n\n        require(\n            INoteToken(newPoolParams.currency).approve(address(this), type(uint256).max),\n            'Pool: Currency approval failed'\n        );\n\n        registry.getLoanAssetToken().setApprovalForAll(address(registry.getLoanKernel()), true);\n    }\n\n    function tgeAddress() public view returns (address) {\n        return _poolStorage.tgeAddress;\n    }\n\n    function getNFTAssetsLength() external view returns (uint256) {\n        return _poolStorage.nftAssets.length;\n    }\n\n    /// @notice Riks scores length\n    /// @return the length of the risk scores array\n    function getRiskScoresLength() external view returns (uint256) {\n        return _poolStorage.riskScores.length;\n    }\n\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory) {\n        return _poolStorage.riskScores[index];\n    }\n\n    function nftAssets(uint256 idx) external view returns (DataTypes.NFTAsset memory) {\n        return _poolStorage.nftAssets[idx];\n    }\n\n    /// @notice sets up the risk scores for the contract for pool\n    function setupRiskScores(\n        uint32[] calldata _daysPastDues,\n        uint32[] calldata _ratesAndDefaults,\n        uint32[] calldata _periodsAndWriteOffs\n    ) external whenNotPaused onlyRole(POOL_ADMIN_ROLE) {\n        PoolAssetLogic.setupRiskScores(_poolStorage, _daysPastDues, _ratesAndDefaults, _periodsAndWriteOffs);\n        // rebase\n        rebase();\n    }\n\n    /// @notice exports NFT assets to another pool address\n    function exportAssets(\n        address tokenAddress,\n        address toPoolAddress,\n        uint256[] calldata tokenIds\n    ) external whenNotPaused nonReentrant requirePoolAdminOrOwner {\n        PoolAssetLogic.exportAssets(_poolStorage.nftAssets, tokenAddress, toPoolAddress, tokenIds);\n    }\n\n    /// @notice withdraws NFT assets from the contract and transfers them to recipients\n    function withdrawAssets(\n        address[] calldata tokenAddresses,\n        uint256[] calldata tokenIds,\n        address[] calldata recipients\n    ) external whenNotPaused onlyRole(OWNER_ROLE) {\n        PoolAssetLogic.withdrawAssets(_poolStorage.nftAssets, tokenAddresses, tokenIds, recipients);\n    }\n\n    function getLoansValue(\n        uint256[] memory tokenIds,\n        DataTypes.LoanEntry[] memory loanEntries\n    ) external view returns (uint256, uint256[] memory) {\n        return PoolAssetLogic.getLoansValue(_poolStorage, tokenIds, loanEntries);\n    }\n\n    /// @notice collects NFT assets from a specified address\n    function collectAssets(\n        uint256[] calldata tokenIds,\n        DataTypes.LoanEntry[] calldata loanEntries\n    ) external whenNotPaused returns (uint256) {\n        registry.requireLoanKernel(_msgSender());\n        return PoolAssetLogic.collectAssets(_poolStorage, tokenIds, loanEntries);\n    }\n\n    /// @dev Trigger set up opening block timestamp\n    function setUpOpeningBlockTimestamp() external {\n        require(_msgSender() == tgeAddress(), 'SecuritizationPool: Only tge address');\n        PoolAssetLogic.setUpOpeningBlockTimestamp(_poolStorage);\n    }\n\n    function onERC721Received(address, address, uint256 tokenId, bytes memory) external returns (bytes4) {\n        address token = _msgSender();\n        require(\n            token == address(registry.getLoanAssetToken()),\n            'SecuritizationPool: Must be token issued by Untangled'\n        );\n        DataTypes.NFTAsset[] storage _nftAssets = _poolStorage.nftAssets;\n        _nftAssets.push(DataTypes.NFTAsset({tokenAddress: token, tokenId: tokenId}));\n        emit InsertNFTAsset(token, tokenId);\n        return this.onERC721Received.selector;\n    }\n\n    /*==================== NAV ====================*/\n    function writeOff(uint256 loan) public onlyRole(POOL_ADMIN_ROLE) {\n        PoolNAVLogic.writeOff(_poolStorage, loan);\n        // rebase\n        rebase();\n    }\n\n    function repayLoan(\n        uint256[] calldata loans,\n        uint256[] calldata amounts\n    ) external returns (uint256[] memory, uint256[] memory) {\n        require(address(registry.getLoanKernel()) == msg.sender, 'not authorized');\n        uint256 numberOfLoans = loans.length;\n        require(numberOfLoans == amounts.length, 'Invalid length');\n\n        uint256[] memory lastOutstandingDebt = new uint256[](numberOfLoans);\n\n        for (uint256 i; i < numberOfLoans; i++) {\n            (uint256 chi, uint256 penaltyChi) = GenericLogic.chiAndPenaltyChi(_poolStorage, loans[i]);\n            lastOutstandingDebt[i] = GenericLogic.debtWithChi(_poolStorage, loans[i], chi, penaltyChi);\n        }\n\n        (uint256[] memory repayAmounts, uint256[] memory previousDebts) = PoolNAVLogic.repayLoan(\n            _poolStorage,\n            loans,\n            amounts\n        );\n\n        uint256 totalInterestRepay;\n        uint256 totalPrincipalRepay;\n\n        for (uint256 i; i < numberOfLoans; i++) {\n            uint256 interestAmount = previousDebts[i] - lastOutstandingDebt[i];\n\n            if (repayAmounts[i] <= interestAmount) {\n                totalInterestRepay += repayAmounts[i];\n            } else {\n                totalInterestRepay += interestAmount;\n                totalPrincipalRepay += repayAmounts[i] - interestAmount;\n            }\n        }\n\n        _poolStorage.incomeReserve += totalInterestRepay;\n        _poolStorage.capitalReserve += totalPrincipalRepay;\n        emit Repay(address(this), totalInterestRepay, totalPrincipalRepay, block.timestamp);\n        return (repayAmounts, previousDebts);\n    }\n\n    function getRepaidAmount() external view returns (uint256, uint256) {\n        return (_poolStorage.totalPrincipalRepaid, _poolStorage.totalInterestRepaid);\n    }\n\n    function debt(uint256 loan) external view returns (uint256 loanDebt) {\n        return GenericLogic.debt(_poolStorage, loan);\n    }\n\n    function risk(bytes32 nft_) external view returns (uint256 risk_) {\n        return uint256(_poolStorage.details[nft_].risk);\n    }\n\n    /// @notice calculates and returns the current NAV\n    /// @return nav_ current NAV\n    function currentNAV() external view returns (uint256 nav_) {\n        return GenericLogic.currentNAV(_poolStorage);\n    }\n\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256) {\n        return GenericLogic.currentNAVAsset(_poolStorage, tokenId);\n    }\n\n    function getReserves() external view returns (uint256, uint256) {\n        return (_poolStorage.incomeReserve, _poolStorage.capitalReserve);\n    }\n\n    function futureValue(bytes32 nft_) external view returns (uint256) {\n        return uint256(_poolStorage.details[nft_].futureValue);\n    }\n\n    function maturityDate(bytes32 nft_) external view returns (uint256) {\n        return uint256(_poolStorage.details[nft_].maturityDate);\n    }\n\n    function discountRate() external view returns (uint256) {\n        return uint256(_poolStorage.discountRate);\n    }\n\n    function updateAssetRiskScore(bytes32 nftID_, uint256 risk_) public onlyRole(POOL_ADMIN_ROLE) {\n        PoolNAVLogic.updateAssetRiskScore(_poolStorage, nftID_, risk_);\n\n        // rebase\n        rebase();\n    }\n\n    function batchUpdateAssetRiskScore(\n        bytes32[] calldata nftIDs,\n        uint256[] calldata riskIDs\n    ) external onlyRole(POOL_ADMIN_ROLE) {\n        require(nftIDs.length == riskIDs.length, 'unmatch length');\n        for (uint8 i = 0; i < nftIDs.length; i++) {\n            updateAssetRiskScore(nftIDs[i], riskIDs[i]);\n        }\n    }\n\n    /// @notice retrieves loan information\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory) {\n        return _poolStorage.details[agreementId];\n    }\n\n    /*==================== TGE ====================*/\n    function setPot(address _pot) external whenNotPaused nonReentrant requirePoolAdminOrOwner {\n        TGELogic.setPot(_poolStorage, _pot);\n        registry.getSecuritizationManager().registerPot(_pot);\n    }\n\n    /// @notice sets debt ceiling value\n    function setDebtCeiling(uint256 _debtCeiling) external whenNotPaused requirePoolAdminOrOwner {\n        TGELogic.setDebtCeiling(_poolStorage, _debtCeiling);\n    }\n\n    /// @notice sets mint first loss value\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external whenNotPaused requirePoolAdminOrOwner {\n        TGELogic.setMinFirstLossCushion(_poolStorage, _minFirstLossCushion);\n    }\n\n    function pot() external view returns (address) {\n        return _poolStorage.pot;\n    }\n\n    /// @dev trigger update reserve when buy note token action happens\n    function increaseCapitalReserve(uint256 currencyAmount) external whenNotPaused {\n        require(\n            _msgSender() == address(registry.getSecuritizationManager()) ||\n                _msgSender() == address(registry.getNoteTokenVault()),\n            'SecuritizationPool: Caller must be SecuritizationManager or NoteTokenVault'\n        );\n        TGELogic.increaseCapitalReserve(_poolStorage, currencyAmount);\n    }\n\n    function contributeToCapitalReserve(uint256 amount) external whenNotPaused {\n        TGELogic.contributeToCapitalReserve(_poolStorage, msg.sender, amount);\n\n        // rebase\n        rebase();\n    }\n\n    /// @dev trigger update reserve\n    function decreaseIncomeReserve(uint256 currencyAmount) external whenNotPaused {\n        require(\n            _msgSender() == address(registry.getSecuritizationManager()) ||\n                _msgSender() == address(registry.getNoteTokenVault()),\n            'SecuritizationPool: Caller must be SecuritizationManager or NoteTokenVault'\n        );\n        TGELogic.decreaseIncomeReserve(_poolStorage, currencyAmount);\n    }\n\n    function decreaseCapitalReserve(uint256 currencyAmount) external whenNotPaused {\n        require(\n            _msgSender() == address(registry.getSecuritizationManager()) ||\n                _msgSender() == address(registry.getNoteTokenVault()),\n            'SecuritizationPool: Caller must be SecuritizationManager or NoteTokenVault'\n        );\n        TGELogic.decreaseCapitalReserve(_poolStorage, currencyAmount);\n    }\n\n    function secondTGEAddress() external view returns (address) {\n        return _poolStorage.secondTGEAddress;\n    }\n\n    function sotToken() external view returns (address) {\n        return TGELogic.sotToken(_poolStorage);\n    }\n\n    function jotToken() external view returns (address) {\n        return TGELogic.jotToken(_poolStorage);\n    }\n\n    function underlyingCurrency() external view returns (address) {\n        return _poolStorage.underlyingCurrency;\n    }\n\n    function reserve() external view returns (uint256) {\n        return GenericLogic.reserve(_poolStorage);\n    }\n\n    function debtCeiling() external view returns (uint256) {\n        return _poolStorage.debtCeiling;\n    }\n\n    // Annually, support 4 decimals num\n    function interestRateSOT() external view returns (uint256) {\n        return _poolStorage.interestRateSOT;\n    }\n\n    function setInterestRateSOT(uint32 _newRate) external {\n        registry.requireSecuritizationManager(_msgSender());\n        TGELogic._setInterestRateSOT(_poolStorage, _newRate);\n    }\n\n    function minFirstLossCushion() external view returns (uint32) {\n        return _poolStorage.minFirstLossCushion;\n    }\n\n    // Total $ (cUSD) paid for Asset repayment - repayInBatch\n    function totalAssetRepaidCurrency() external view returns (uint256) {\n        return _poolStorage.totalAssetRepaidCurrency;\n    }\n\n    /// @notice injects the address of the Token Generation Event (TGE) and the associated token address\n    function injectTGEAddress(\n        address _tgeAddress,\n        // address _tokenAddress,\n        Configuration.NOTE_TOKEN_TYPE _noteToken\n    ) external whenNotPaused {\n        registry.requireSecuritizationManager(_msgSender());\n        TGELogic.injectTGEAddress(_poolStorage, _tgeAddress, _noteToken);\n    }\n\n    /// @dev trigger update asset value repaid\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external whenNotPaused {\n        registry.requireLoanKernel(_msgSender());\n        TGELogic.increaseTotalAssetRepaidCurrency(_poolStorage, amount);\n    }\n\n    /// @dev Disburses a specified amount of currency to the given user.\n    /// @param usr The address of the user to receive the currency.\n    /// @param currencyAmount The amount of currency to disburse.\n    function disburse(address usr, uint256 currencyAmount) external whenNotPaused {\n        require(\n            _msgSender() == address(registry.getNoteTokenVault()),\n            'SecuritizationPool: Caller must be NoteTokenVault'\n        );\n        TGELogic.disburse(_poolStorage, usr, currencyAmount);\n    }\n\n    /// @notice checks if the redemption process has finished\n    function hasFinishedRedemption() external view returns (bool) {\n        return TGELogic.hasFinishedRedemption(_poolStorage);\n    }\n\n    ///@notice check current debt ceiling is valid\n    function isDebtCeilingValid() external view returns (bool) {\n        return TGELogic.isDebtCeilingValid(_poolStorage);\n    }\n\n    function claimCashRemain(address recipientWallet) external whenNotPaused onlyRole(OWNER_ROLE) {\n        require(TGELogic.hasFinishedRedemption(_poolStorage), 'SecuritizationPool: Redemption has not finished');\n        TGELogic.claimCashRemain(_poolStorage, recipientWallet);\n    }\n\n    function openingBlockTimestamp() external view returns (uint64) {\n        return _poolStorage.openingBlockTimestamp;\n    }\n\n    /// @notice allows the originator to withdraw from reserve\n    function withdraw(address to, uint256 amount) external whenNotPaused {\n        registry.requireLoanKernel(_msgSender());\n        require(hasRole(ORIGINATOR_ROLE, to), 'SecuritizationPool: Only Originator can drawdown');\n        require(!registry.getNoteTokenVault().redeemDisabled(address(this)), 'SecuritizationPool: withdraw paused');\n        TGELogic.withdraw(_poolStorage, to, amount);\n    }\n\n    function validatorRequired() external view returns (bool) {\n        return _poolStorage.validatorRequired;\n    }\n\n    /*==================== REBASE ====================*/\n    /// @notice rebase the debt and balance of the senior tranche according to\n    /// the current ratio between senior and junior\n    function rebase() public {\n        RebaseLogic.rebase(_poolStorage, GenericLogic.currentNAV(_poolStorage), GenericLogic.reserve(_poolStorage));\n    }\n\n    /// @notice changes the senior asset value based on new supply or redeems\n    /// @param _seniorSupply senior supply amount\n    /// @param _seniorRedeem senior redeem amount\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external {\n        require(\n            _msgSender() == address(registry.getSecuritizationManager()) ||\n                _msgSender() == address(registry.getNoteTokenVault()),\n            'SecuritizationPool: Caller must be SecuritizationManager or NoteTokenVault'\n        );\n        RebaseLogic.changeSeniorAsset(\n            _poolStorage,\n            GenericLogic.currentNAV(_poolStorage),\n            GenericLogic.reserve(_poolStorage),\n            _seniorSupply,\n            _seniorRedeem\n        );\n        if (_seniorSupply > 0) require(isMinFirstLossValid(), 'Pool: Exceeds MinFirstLoss');\n    }\n\n    function seniorDebtAndBalance() external view returns (uint256, uint256) {\n        return (RebaseLogic.seniorDebt(_poolStorage), _poolStorage.seniorBalance);\n    }\n\n    function calcTokenPrices() external view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice) {\n        address jotTokenAddress = TGELogic.jotToken(_poolStorage);\n        address sotTokenAddress = TGELogic.sotToken(_poolStorage);\n        uint256 noteTokenDecimal = (10 ** INoteToken(jotTokenAddress).decimals());\n\n        uint256 jotTokenSupply;\n        uint256 sotTokenSupply;\n\n        if (jotTokenAddress != address(0)) {\n            jotTokenSupply = INoteToken(jotTokenAddress).totalSupply();\n        }\n\n        if (sotTokenAddress != address(0)) {\n            sotTokenSupply = INoteToken(sotTokenAddress).totalSupply();\n        }\n\n        (uint256 _juniorTokenPrice, uint256 _seniorTokenPrice) = RebaseLogic.calcTokenPrices(\n            GenericLogic.currentNAV(_poolStorage),\n            GenericLogic.reserve(_poolStorage),\n            RebaseLogic.seniorDebt(_poolStorage),\n            _poolStorage.seniorBalance,\n            jotTokenSupply,\n            sotTokenSupply\n        );\n\n        return ((_juniorTokenPrice * noteTokenDecimal) / ONE, (_seniorTokenPrice * noteTokenDecimal) / ONE);\n    }\n\n    /// @notice Calculate junior ratio based on current NAV, reserve and senior debt/balance.\n    /// @dev Uses RebaseLogic's calcJuniorRatio method to calculate the junior ratio.\n    /// @return juniorRatio The calculated junior ratio as a uint256 number.\n\n    function calcJuniorRatio() public view returns (uint256 juniorRatio) {\n        return\n            RebaseLogic.calcJuniorRatio(\n                GenericLogic.currentNAV(_poolStorage),\n                GenericLogic.reserve(_poolStorage),\n                RebaseLogic.seniorDebt(_poolStorage),\n                _poolStorage.seniorBalance\n            );\n    }\n\n    function isMinFirstLossValid() public view returns (bool) {\n        return _poolStorage.minFirstLossCushion <= calcJuniorRatio();\n    }\n}\n"
    },
    "contracts/protocol/pool/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\nimport {DataTypes} from '../../libraries/DataTypes.sol';\ncontract PoolStorage {\n    DataTypes.Storage internal _poolStorage;\n}\n"
    },
    "contracts/storage/Registry.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {UntangledBase} from '../base/UntangledBase.sol';\nimport {Configuration} from '../libraries/Configuration.sol';\n\n/**\n * @title Registry\n * @notice This contract stores mappings of useful \"protocol config state\", giving a central place\n *  for all other contracts to access it. These config vars\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\n * @author Untangled Team\n */\ncontract Registry is UntangledBase {\n    mapping(uint8 => address) public contractAddresses;\n    mapping(address => bool) public whiteListToAddresses;\n    mapping(address => bool) public whiteListFromAddresses;\n\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\n\n    function initialize() public initializer {\n        __UntangledBase__init(_msgSender());\n    }\n\n    function _setAddress(uint8 addressIndex, address newAddress) private {\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\n        contractAddresses[addressIndex] = newAddress;\n    }\n\n    function getAddress(uint8 index) public view returns (address) {\n        return contractAddresses[index];\n    }\n\n    function isValidNoteTokenTransfer(address from, address to) external view returns (bool) {\n        return whiteListFromAddresses[from] || whiteListToAddresses[to];\n    }\n\n    function setWhiteListAddresses(\n        address[] calldata addresses,\n        bool[] calldata boolFroms,\n        bool[] calldata boolTos\n    ) public onlyAdmin {\n        uint256 length = addresses.length;\n        require(length == boolFroms.length && length == boolTos.length, 'Invalid length');\n        for (uint256 i; i < length; i++) {\n            whiteListFromAddresses[addresses[i]] = boolFroms[i];\n            whiteListToAddresses[addresses[i]] = boolTos[i];\n        }\n    }\n\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\n    }\n\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\n    }\n\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\n    }\n\n    function setTokenGenerationEventFactory(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\n    }\n\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\n    }\n\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\n    }\n\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\n    }\n\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\n    }\n\n    function setNoteTokenVault(address newAddress) public onlyAdmin whenNotPaused {\n        address oldNoteTokenVault = getAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT));\n        if (oldNoteTokenVault != address(0)) {\n            whiteListFromAddresses[oldNoteTokenVault] = false;\n            whiteListToAddresses[oldNoteTokenVault] = false;\n        }\n\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_VAULT), newAddress);\n\n        whiteListFromAddresses[newAddress] = true;\n        whiteListToAddresses[newAddress] = true;\n    }\n}\n"
    },
    "contracts/tokens/ERC721/LATValidator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {EIP712Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\nimport {ECDSAUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\nimport {SignatureCheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol';\nimport {ERC165CheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol';\nimport {IPool} from '../../interfaces/IPool.sol';\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\nimport {IERC5008} from '../../interfaces/IERC5008.sol';\nimport {DataTypes} from '../../libraries/DataTypes.sol';\n\nabstract contract LATValidator is IERC5008, EIP712Upgradeable {\n    using SignatureCheckerUpgradeable for address;\n    using ECDSAUpgradeable for bytes32;\n    using ERC165CheckerUpgradeable for address;\n\n    bytes32 internal constant LAT_TYPEHASH =\n        keccak256('LoanAssetToken(uint256[] tokenIds,uint256[] nonces,address validator)');\n\n    mapping(uint256 => uint256) internal _nonces;\n\n    modifier validateCreditor(address creditor, DataTypes.LoanAssetInfo calldata info) {\n        if (IPool(creditor).validatorRequired()) {\n            _checkNonceValid(info);\n\n            require(_checkValidator(info), 'LATValidator: invalid validator signature');\n            require(isValidator(creditor, info.validator), 'LATValidator: invalid validator');\n        }\n        _;\n    }\n\n    modifier requireValidator(DataTypes.LoanAssetInfo calldata info) {\n        require(_checkValidator(info), 'LATValidator: invalid validator signature');\n        _;\n    }\n\n    modifier requireNonceValid(DataTypes.LoanAssetInfo calldata info) {\n        _checkNonceValid(info);\n        _;\n    }\n\n    function _checkNonceValid(DataTypes.LoanAssetInfo calldata info) internal {\n        for (uint256 i = 0; i < info.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\n            require(_nonces[info.tokenIds[i]] == info.nonces[i], 'LATValidator: invalid nonce');\n            unchecked {\n                _nonces[info.tokenIds[i]] = _nonces[info.tokenIds[i]] + 1;\n            }\n\n            emit NonceChanged(info.tokenIds[i], _nonces[info.tokenIds[i]]);\n        }\n    }\n\n    function __LATValidator_init() internal onlyInitializing {\n        __EIP712_init_unchained('UntangledLoanAssetToken', '0.0.1');\n        __LATValidator_init_unchained();\n    }\n\n    function __LATValidator_init_unchained() internal onlyInitializing {}\n\n    function isValidator(address pool, address sender) public view virtual returns (bool);\n\n    function nonce(uint256 tokenId) external view override returns (uint256) {\n        return _nonces[tokenId];\n    }\n\n    function _checkValidator(DataTypes.LoanAssetInfo calldata latInfo) internal view returns (bool) {\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    LAT_TYPEHASH,\n                    keccak256(abi.encodePacked(latInfo.tokenIds)),\n                    keccak256(abi.encodePacked(latInfo.nonces)),\n                    latInfo.validator\n                )\n            )\n        );\n\n        return latInfo.validator.isValidSignatureNow(digest, latInfo.validateSignature);\n    }\n\n    function domainSeparatorV4() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/tokens/ERC721/LoanAssetToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport {UntangledERC721} from './UntangledERC721.sol';\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\nimport {LATValidator} from './LATValidator.sol';\nimport {Registry} from '../../storage/Registry.sol';\nimport {DataTypes, VALIDATOR_ROLE} from '../../libraries/DataTypes.sol';\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\n\n/**\n * LoanAssetToken: The representative for ownership of a Loan\n */\ncontract LoanAssetToken is UntangledERC721, LATValidator {\n    using ConfigHelper for Registry;\n\n    /** CONSTRUCTOR */\n    function initialize(\n        Registry _registry,\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) public initializer {\n        __UntangledERC721__init(name, symbol, baseTokenURI);\n        __LATValidator_init();\n\n        registry = _registry;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        require(\n            address(registry.getSecuritizationManager()) != address(0x0),\n            'SECURITIZATION_MANAGER is zero address.'\n        );\n\n        require(address(registry.getLoanKernel()) != address(0x0), 'LOAN_KERNEL is zero address.');\n\n        _setupRole(MINTER_ROLE, address(registry.getLoanKernel()));\n        _revokeRole(MINTER_ROLE, _msgSender());\n    }\n\n    function safeMint(\n        address creditor,\n        DataTypes.LoanAssetInfo calldata latInfo\n    ) public onlyRole(MINTER_ROLE) validateCreditor(creditor, latInfo) {\n        for (uint i = 0; i < latInfo.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\n            _safeMint(creditor, latInfo.tokenIds[i]);\n        }\n    }\n\n    function isValidator(address pool, address sender) public view virtual override returns (bool) {\n        return IAccessControlUpgradeable(pool).hasRole(VALIDATOR_ROLE, sender);\n    }\n}\n"
    },
    "contracts/tokens/ERC721/UntangledERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.19;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '../../storage/Registry.sol';\n\nabstract contract UntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\n    Registry public registry;\n\n    string private _baseTokenURI;\n\n    function __UntangledERC721__init(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) internal onlyInitializing {\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\n    }\n\n    function __UntangledERC721__init_unchained(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) internal onlyInitializing {\n        _baseTokenURI = baseTokenURI;\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\n    }\n\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\n        _mint(to, tokenId);\n    }\n\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\n        _safeMint(to, tokenId);\n    }\n\n    function setBaseURI(string memory baseTokenURI) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _baseTokenURI = baseTokenURI;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(\n                    abi.encodePacked(\n                        baseURI,\n                        Strings.toHexString(tokenId),\n                        '?chain_id=',\n                        Strings.toString(block.chainid)\n                    )\n                )\n                : '';\n    }\n\n    uint256[48] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}