{
  "address": "0xF1B7282B919e9C8A4F774EeeeF87dE94A7f6c1f2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pot",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipientWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ClaimCashRemain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseCapitalReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseIncomeReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseCapitalReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increasingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InsertNFTAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increaseInterestRepay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increasePrincipalRepay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "UpdateDebtCeiling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_interestRateSot",
          "type": "uint32"
        }
      ],
      "name": "UpdateInterestRateSot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_mintFirstLoss",
          "type": "uint32"
        }
      ],
      "name": "UpdateMintFirstLoss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Configuration.NOTE_TOKEN_TYPE",
          "name": "noteType",
          "type": "uint8"
        }
      ],
      "name": "UpdateTGEAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "originatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcJuniorRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "juniorRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcTokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "juniorTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seniorTokenPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seniorSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seniorRedeem",
          "type": "uint256"
        }
      ],
      "name": "changeSeniorAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "riskScore",
              "type": "uint8"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.LoanEntry[]",
          "name": "loanEntries",
          "type": "tuple[]"
        }
      ],
      "name": "collectAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddresss",
          "type": "address"
        }
      ],
      "name": "collectERC20Asset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentNAV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nav_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "currentNAVAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loan",
          "type": "uint256"
        }
      ],
      "name": "debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseCapitalReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseIncomeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "disburse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toPoolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "exportAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nft_",
          "type": "bytes32"
        }
      ],
      "name": "futureValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "futureValue",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "risk",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termStartUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termEndUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum UnpackLoanParamtersLib.AmortizationUnitType",
              "name": "amortizationUnitType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "termLengthInAmortizationUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.NFTDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEarlyExitInfor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializedVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "riskScore",
              "type": "uint8"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.LoanEntry[]",
          "name": "loanEntries",
          "type": "tuple[]"
        }
      ],
      "name": "getLoansValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTAssetsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRepaidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiskScoresLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAssetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseCapitalReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalAssetRepaidCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "injectNoteToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateSOT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinFirstLossValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jotToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nft_",
          "type": "bytes32"
        }
      ],
      "name": "maturityDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minFirstLossCushion",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "nftAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.NFTAsset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paidPrincipalAmountSOT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "loans",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "repayLoan",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nft_",
          "type": "bytes32"
        }
      ],
      "name": "risk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "risk_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "riskScores",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "daysPastDue",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "advanceRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "penaltyRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "interestRate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "probabilityOfDefault",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lossGivenDefault",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "writeOffAfterGracePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "gracePeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "collectionPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "writeOffAfterCollectionPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "discountRate",
              "type": "uint32"
            }
          ],
          "internalType": "struct DataTypes.RiskScore",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seniorDebtAndBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_newRate",
          "type": "uint32"
        }
      ],
      "name": "setInterestRateSOT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minFirstLossCushion",
          "type": "uint32"
        }
      ],
      "name": "setMinFirstLossCushion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pot",
          "type": "address"
        }
      ],
      "name": "setPot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_daysPastDues",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_ratesAndDefaults",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_periodsAndWriteOffs",
          "type": "uint32[]"
        }
      ],
      "name": "setupRiskScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sotToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssetRepaidCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nftID_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "risk_",
          "type": "uint256"
        }
      ],
      "name": "updateAssetRiskScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "withdrawAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20Assets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loan",
          "type": "uint256"
        }
      ],
      "name": "writeOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8baa38c8beb5a4f1347df473df0d9648837b53bfa11cbe168b11f68136d714f0",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xF1B7282B919e9C8A4F774EeeeF87dE94A7f6c1f2",
    "transactionIndex": 1,
    "gasUsed": "5049841",
    "logsBloom": "0x
    "blockHash": "0xd2c7365261c68d41f9bd21ae30ce735224c05de4d092157b945e5228952dddbe",
    "transactionHash": "0x8baa38c8beb5a4f1347df473df0d9648837b53bfa11cbe168b11f68136d714f0",
    "logs": [],
    "blockNumber": 72052545,
    "cumulativeGasUsed": "5049841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ac11c7409cbaf8a618e73b8329d5c73b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimCashRemain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseCapitalReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseIncomeReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseCapitalReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InsertNFTAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increaseInterestRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePrincipalRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"UpdateDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_interestRateSot\",\"type\":\"uint32\"}],\"name\":\"UpdateInterestRateSot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_mintFirstLoss\",\"type\":\"uint32\"}],\"name\":\"UpdateMintFirstLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Configuration.NOTE_TOKEN_TYPE\",\"name\":\"noteType\",\"type\":\"uint8\"}],\"name\":\"UpdateTGEAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcJuniorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcTokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorTokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorRedeem\",\"type\":\"uint256\"}],\"name\":\"changeSeniorAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"riskScore\",\"type\":\"uint8\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.LoanEntry[]\",\"name\":\"loanEntries\",\"type\":\"tuple[]\"}],\"name\":\"collectAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddresss\",\"type\":\"address\"}],\"name\":\"collectERC20Asset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"currentNAVAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseCapitalReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseIncomeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"exportAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nft_\",\"type\":\"bytes32\"}],\"name\":\"futureValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"futureValue\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"risk\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termStartUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum UnpackLoanParamtersLib.AmortizationUnitType\",\"name\":\"amortizationUnitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.NFTDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarlyExitInfor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"riskScore\",\"type\":\"uint8\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.LoanEntry[]\",\"name\":\"loanEntries\",\"type\":\"tuple[]\"}],\"name\":\"getLoansValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTAssetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRepaidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskScoresLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAssetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"increaseCapitalReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalAssetRepaidCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injectNoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateSOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinFirstLossValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nft_\",\"type\":\"bytes32\"}],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFirstLossCushion\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"nftAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.NFTAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidPrincipalAmountSOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"loans\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"repayLoan\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nft_\",\"type\":\"bytes32\"}],\"name\":\"risk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"risk_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"riskScores\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"daysPastDue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"advanceRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"penaltyRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interestRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"probabilityOfDefault\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lossGivenDefault\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"writeOffAfterGracePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gracePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"collectionPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"writeOffAfterCollectionPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"discountRate\",\"type\":\"uint32\"}],\"internalType\":\"struct DataTypes.RiskScore\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorDebtAndBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newRate\",\"type\":\"uint32\"}],\"name\":\"setInterestRateSOT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minFirstLossCushion\",\"type\":\"uint32\"}],\"name\":\"setMinFirstLossCushion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pot\",\"type\":\"address\"}],\"name\":\"setPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_daysPastDues\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_ratesAndDefaults\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_periodsAndWriteOffs\",\"type\":\"uint32[]\"}],\"name\":\"setupRiskScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetRepaidCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nftID_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"risk_\",\"type\":\"uint256\"}],\"name\":\"updateAssetRiskScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20Assets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"writeOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"changeSeniorAsset(uint256,uint256)\":{\"params\":{\"_seniorRedeem\":\"senior redeem amount\",\"_seniorSupply\":\"senior supply amount\"}},\"currentNAV()\":{\"returns\":{\"nav_\":\"current NAV\"}},\"decreaseIncomeReserve(uint256)\":{\"details\":\"trigger update reserve\"},\"disburse(address,uint256)\":{\"details\":\"Disburses a specified amount of currency to the given user.\",\"params\":{\"currencyAmount\":\"The amount of currency to disburse.\",\"usr\":\"The address of the user to receive the currency.\"}},\"getRiskScoresLength()\":{\"returns\":{\"_0\":\"the length of the risk scores array\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseCapitalReserve(uint256)\":{\"details\":\"trigger update reserve when buy note token action happens\"},\"increaseTotalAssetRepaidCurrency(uint256)\":{\"details\":\"trigger update asset value repaid\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Trigger set up opening block timestamp\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Untangled's SecuritizationPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeSeniorAsset(uint256,uint256)\":{\"notice\":\"changes the senior asset value based on new supply or redeems\"},\"collectAssets(uint256[],(address,address,bytes32,uint256,uint256,uint256,uint8,uint8)[])\":{\"notice\":\"collects NFT assets from a specified address\"},\"collectERC20Asset(address)\":{\"notice\":\"collects ERC20 assets from specified senders\"},\"currentNAV()\":{\"notice\":\"calculates and returns the current NAV\"},\"exportAssets(address,address,uint256[])\":{\"notice\":\"exports NFT assets to another pool address\"},\"getAsset(bytes32)\":{\"notice\":\"retrieves loan information\"},\"getRiskScoresLength()\":{\"notice\":\"Riks scores length\"},\"getTokenAssetAddresses()\":{\"notice\":\"A view function that returns an array of token asset addresses\"},\"initialize(address,bytes)\":{\"notice\":\"CONSTRUCTOR \"},\"rebase()\":{\"notice\":\"rebase the debt and balance of the senior tranche according to the current ratio between senior and junior\"},\"setDebtCeiling(uint256)\":{\"notice\":\"sets debt ceiling value\"},\"setMinFirstLossCushion(uint32)\":{\"notice\":\"sets mint first loss value\"},\"setupRiskScores(uint32[],uint32[],uint32[])\":{\"notice\":\"sets up the risk scores for the contract for pool\"},\"withdraw(address,uint256)\":{\"notice\":\"allows the originator to withdraw from reserve\"},\"withdrawAssets(address[],uint256[],address[])\":{\"notice\":\"withdraws NFT assets from the contract and transfers them to recipients\"},\"withdrawERC20Assets(address[],address[],uint256[])\":{\"notice\":\"withdraws ERC20 assets from the contract and transfers them to recipients\\\\ound\"}},\"notice\":\"Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb66b2285eab5f7766c538c326c1a0e86013487b1636177d595d1ce543fec43a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\\n    Initializable, ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721PausableUpgradeable\\n{\\n    function initialize(string memory name, string memory symbol, string memory baseTokenURI) public virtual initializer {\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    function __ERC721PresetMinterPauserAutoId_init(string memory name, string memory symbol, string memory baseTokenURI) internal onlyInitializing {\\n        __ERC721_init_unchained(name, symbol);\\n        __Pausable_init_unchained();\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory, string memory, string memory baseTokenURI) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xa0045ea98f9c5c3b1656be3f78ce3e1adf2c046bf1ce6a8ae9062b411f117536\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        return\\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x7c3cbce7cec023937ebbae16ca73e569979b4d63bbcd471f0db6b17d5fc6d1df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x94edef8687cf1335a114f7e7267fa92cb0d9e61afde8d62589aceede6c245caf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\r\\nimport '../libraries/Configuration.sol';\\r\\nimport {OWNER_ROLE, ORIGINATOR_ROLE, VALIDATOR_ROLE, POOL_ADMIN_ROLE} from '../libraries/DataTypes.sol';\\r\\n/**\\r\\n * @title Untangled's SecuritizationPool contract\\r\\n * @notice Abstract contract that serves as a base contract for other contracts in the Untangled system.\\r\\n *  It provides functionalities for contract initialization, pausing, and access control.\\r\\n * @author Untangled Team\\r\\n */\\r\\nabstract contract UntangledBase is\\r\\n    Initializable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    AccessControlEnumerableUpgradeable\\r\\n{\\r\\n    function isAdmin() public view virtual returns (bool) {\\r\\n        return hasRole(OWNER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(), 'UntangledBase: Must have admin role to perform this action');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\r\\n        __Pausable_init_unchained();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __UntangledBase__init_unchained(owner);\\r\\n    }\\r\\n\\r\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\r\\n        if (owner == address(0)) owner = _msgSender();\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        _setupRole(OWNER_ROLE, owner);\\r\\n\\r\\n        _setRoleAdmin(ORIGINATOR_ROLE, OWNER_ROLE);\\r\\n        _setRoleAdmin(VALIDATOR_ROLE, POOL_ADMIN_ROLE);\\r\\n    }\\r\\n\\r\\n    function getInitializedVersion() public view virtual returns (uint256) {\\r\\n        return _getInitializedVersion();\\r\\n    }\\r\\n\\r\\n    function pause() public virtual onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public virtual onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _setRoleAdmin(role, adminRole);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xa828fd73d4873b4b5b2b556aa6d3068096cea75ce08b805e780a535c59a004cb\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IERC5008.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// https://eips.ethereum.org/EIPS/eip-5008\\r\\n/// @dev the ERC-165 identifier for this interface is 0xce03fdab.\\r\\n/* is IERC165 */ interface IERC5008 {\\r\\n    /// @notice Emitted when the `nonce` of an NFT is changed\\r\\n    event NonceChanged(uint256 tokenId, uint256 nonce);\\r\\n\\r\\n    /// @notice Get the nonce of an NFT\\r\\n    /// Throws if `tokenId` is not a valid NFT\\r\\n    /// @param tokenId The id of the NFT\\r\\n    /// @return The nonce of the NFT\\r\\n    function nonce(uint256 tokenId) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45ddce972af2d59782fa3e6216284266ce0c6e10cdc2554b38b15a6d3c2eaf0e\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IEpochExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\ninterface IEpochExecutor {\\r\\n    struct OrderSummary {\\r\\n        uint256 sotWithdraw;\\r\\n        uint256 jotWithdraw;\\r\\n        uint256 sotInvest;\\r\\n        uint256 jotInvest;\\r\\n    }\\r\\n\\r\\n    struct EpochInformation {\\r\\n        uint256 lastEpochClosed;\\r\\n        uint256 minimumEpochTime;\\r\\n        uint256 lastEpochExecuted;\\r\\n        uint256 currentEpoch;\\r\\n        uint256 bestSubScore;\\r\\n        uint256 sotPrice;\\r\\n        uint256 jotPrice;\\r\\n        uint256 epochNAV;\\r\\n        uint256 epochSeniorAsset;\\r\\n        uint256 epochReserve;\\r\\n        uint256 minChallengePeriodEnd;\\r\\n        uint256 challengeTime;\\r\\n        uint256 bestRatioImprovement;\\r\\n        uint256 bestReserveImprovement;\\r\\n        bool poolClosing;\\r\\n        bool submitPeriod;\\r\\n        bool gotFullValidation;\\r\\n        OrderSummary order;\\r\\n        OrderSummary bestSubmission;\\r\\n    }\\r\\n\\r\\n    function setupPool() external;\\r\\n    function setParam(address pool, bytes32 name, uint256 value) external;\\r\\n    function setParam(address pool, bytes32 name, bool value) external;\\r\\n    function closeEpoch(address pool) external returns (bool epochExecuted);\\r\\n    function validate(\\r\\n        address pool,\\r\\n        uint256 seniorWithdraw,\\r\\n        uint256 juniorWithdraw,\\r\\n        uint256 seniorInvest,\\r\\n        uint256 juniorInvest\\r\\n    ) external view returns (int256 err);\\r\\n    function calcNewReserve(\\r\\n        address pool,\\r\\n        uint256 sotWithdraw,\\r\\n        uint256 jotWithdraw,\\r\\n        uint256 sotInvest,\\r\\n        uint256 jotInvest\\r\\n    ) external view returns (uint256 reserve);\\r\\n    function currentEpoch(address pool) external view returns (uint256);\\r\\n    function lastEpochExecuted(address pool) external view returns (uint256);\\r\\n    function getNoteTokenAddress(address pool) external view returns (address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4cb16049f37f49450c7573605ce30e9072a3d6aa9cb1476a5510470bc254afe2\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IUniqueIdentity} from './IUniqueIdentity.sol';\\r\\n\\r\\ninterface IGo {\\r\\n    /// @notice Returns the address of the UniqueIdentity contract.\\r\\n    function uniqueIdentity() external returns (IUniqueIdentity);\\r\\n\\r\\n    function go(address account) external view returns (bool);\\r\\n\\r\\n    function goOnlyIdTypes(address account, uint256[] memory onlyIdTypes) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6acd0f6dd51e3db8f56708f118d6e888308753ca50a1cb59e28e90a47405116b\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ILoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '../libraries/DataTypes.sol';\\r\\n\\r\\ninterface ILoanKernel {\\r\\n    /****************** */\\r\\n    // CONSTANTS\\r\\n    /****************** */\\r\\n\\r\\n    enum FillingAddressesIndex {\\r\\n        SECURITIZATION_POOL,\\r\\n        PRINCIPAL_TOKEN_ADDRESS,\\r\\n        REPAYMENT_ROUTER\\r\\n    }\\r\\n\\r\\n    enum FillingNumbersIndex {\\r\\n        CREDITOR_FEE,\\r\\n        ASSET_PURPOSE\\r\\n    }\\r\\n\\r\\n    //********************************************************* */\\r\\n\\r\\n    //****** */\\r\\n    // EVENTS\\r\\n    //****** */\\r\\n\\r\\n    event LogOutputSubmit(bytes32 indexed _agreementId, uint256 indexed _tokenIndex, uint256 _totalAmount);\\r\\n\\r\\n    event AssetRepay(\\r\\n        bytes32 indexed _agreementId,\\r\\n        address indexed _payer,\\r\\n        address indexed _pool,\\r\\n        uint256 _amount,\\r\\n        uint256 _outstandingAmount,\\r\\n        address _token\\r\\n    );\\r\\n\\r\\n    event BatchAssetRepay(bytes32[] _agreementIds, address _payer, uint256[] _amounts, address _token);\\r\\n\\r\\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\\r\\n\\r\\n    //********************************************************* */\\r\\n\\r\\n    /*********** */\\r\\n    // STRUCTURES\\r\\n    /*********** */\\r\\n\\r\\n    struct LoanIssuance {\\r\\n        address version;\\r\\n        address[] debtors;\\r\\n        bytes32[] termsContractParameters; // for different loans\\r\\n        bytes32[] agreementIds;\\r\\n        uint256[] salts;\\r\\n    }\\r\\n\\r\\n    struct LoanOrder {\\r\\n        LoanIssuance issuance;\\r\\n        address principalTokenAddress;\\r\\n        uint256[] principalAmounts;\\r\\n        uint256 creditorFee;\\r\\n        uint256[] expirationTimestampInSecs;\\r\\n        bytes32[] debtOrderHashes;\\r\\n        uint8[] riskScores;\\r\\n        uint8 assetPurpose;\\r\\n    }\\r\\n\\r\\n    struct FillDebtOrderParam {\\r\\n        address[] orderAddresses; // 0-pool, 1-principal token address, 2-repayment router,...\\r\\n        uint256[] orderValues; //  0-creditorFee, 1-asset purpose,..., [x] principalAmounts, [x] expirationTimestampInSecs, [x] - salts, [x] - riskScores\\r\\n        bytes32[] termsContractParameters; // Term contract parameters from different farmers, encoded as hash strings\\r\\n        DataTypes.LoanAssetInfo[] latInfo;\\r\\n    }\\r\\n\\r\\n    /*********** */\\r\\n    // VARIABLES\\r\\n    /*********** */\\r\\n\\r\\n    /// @notice allows batch repayment of multiple loans by iterating over the given agreement IDs and amounts\\r\\n    /// @dev calls _assertRepaymentRequest and _doRepay for each repayment, and emits the LogRepayments event to indicate the successful batch repayment\\r\\n    function repayInBatch(\\r\\n        bytes32[] calldata agreementIds,\\r\\n        uint256[] calldata amounts,\\r\\n        address tokenAddress\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x288d489fe903f0225613551d2bee0c0b02a7a738b83615b54bf56f1f859f96b4\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IMintedNormalTGE.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Registry} from '../storage/Registry.sol';\\r\\n\\r\\ninterface IMintedNormalTGE {\\r\\n    event SetHasStarted(bool hasStarted);\\r\\n    event UpdateMinBidAmount(uint256 minBidAmount);\\r\\n    event UpdateTotalCap(uint256 totalCap);\\r\\n    event UpdateInitialAmount(uint256 initialAmount);\\r\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\r\\n\\r\\n    enum SaleType {\\r\\n        NORMAL_SALE\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        Registry _registry,\\r\\n        address _pool,\\r\\n        address _token,\\r\\n        address _currency,\\r\\n        uint256 _openingTime\\r\\n    ) external;\\r\\n\\r\\n    ///@notice investor bids for SOT/JOT token. Paid by pool's currency\\r\\n    function buyTokens(address payee, address beneficiary, uint256 currencyAmount) external returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function initialAmount() external view returns (uint256);\\r\\n\\r\\n    function currencyRaisedByInvestor(address _investor) external view returns (uint256);\\r\\n\\r\\n    function currencyRaised() external view returns (uint256);\\r\\n\\r\\n    function firstNoteTokenMintedTimestamp() external view returns (uint256);\\r\\n\\r\\n    function setHasStarted(bool _hasStarted) external;\\r\\n\\r\\n    function setMinBidAmount(uint256 _minBidAmount) external;\\r\\n\\r\\n    function onRedeem(uint256 _currencyAmount) external;\\r\\n\\r\\n    function setInitialAmount(uint256 _initialAmount) external;\\r\\n\\r\\n    function setOpeningTime(uint256 _openingTime) external;\\r\\n\\r\\n    function setTotalCap(uint256 _cap) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5f94dfa53dde2b8c3847d719abcdaea4177e80656263b57c4e02f4c6e310083d\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface INoteToken {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 currencyAmount) external returns (bool);\\r\\n\\r\\n    function mint(address to, uint256 currencyAmount) external;\\r\\n\\r\\n    function redeem(address user, uint256 currencyAmount) external;\\r\\n\\r\\n    function claimIncome(address user) external;\\r\\n\\r\\n    function distributeIncome(uint256 currencyAmount) external;\\r\\n\\r\\n    function calcUserIncome(address user) external view returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb3ec6ce1952e81cfacc1f42db27205a0015389d43522b34b78a0c40e2e123ba1\"},\"contracts/interfaces/INoteTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '../storage/Registry.sol';\\r\\nimport './INoteToken.sol';\\r\\n\\r\\ninterface INoteTokenFactory {\\r\\n    event TokenCreated(\\r\\n        address indexed token,\\r\\n        address indexed poolAddress,\\r\\n        Configuration.NOTE_TOKEN_TYPE indexed tokenType,\\r\\n        uint8 decimals,\\r\\n        string ticker\\r\\n    );\\r\\n\\r\\n    event UpdateNoteTokenImplementation(address indexed newAddress);\\r\\n\\r\\n    function tokens(uint256 idx) external view returns (INoteToken);\\r\\n\\r\\n    function isExistingTokens(address tokenAddress) external view returns (bool);\\r\\n\\r\\n    function changeMinterRole(address token, address newController) external;\\r\\n\\r\\n    function setNoteTokenImplementation(address newAddress) external;\\r\\n\\r\\n    function noteTokenImplementation() external view returns (address);\\r\\n\\r\\n    /// @notice Creates a new NoteToken contract instance with the specified parameters\\r\\n    /// Initializes the token with the provided parameters, including the pool address and note token type\\r\\n    function createToken(\\r\\n        address poolAddress,\\r\\n        Configuration.NOTE_TOKEN_TYPE noteTokenType,\\r\\n        uint8 _nDecimals,\\r\\n        string calldata ticker\\r\\n    ) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x420e76bb6efbfba40a48e4b90d1d46e4aec1668fcff6cc7389893d583535b2e5\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/INoteTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface INoteTokenManager {\\r\\n    struct Epoch {\\r\\n        uint256 withdrawFulfillment;\\r\\n        uint256 investFulfillment;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    struct UserOrder {\\r\\n        uint256 orderedInEpoch;\\r\\n        uint256 investAmount;\\r\\n        uint256 withdrawAmount;\\r\\n    }\\r\\n\\r\\n    struct NoteTokenInfor {\\r\\n        uint256 minBidAmount;\\r\\n        address tokenAddress;\\r\\n    }\\r\\n\\r\\n    event TokenMinted(address pool, address receiver, uint256 amount);\\r\\n    event NewTokenAdded(address pool, address tokenAddress, uint256 timestamp);\\r\\n\\r\\n    function setupNewToken(address pool, address tokenAddress, uint256 minBidAmount) external;\\r\\n\\r\\n    function hasValidUID(address sender) external view returns (bool);\\r\\n\\r\\n    function investOrder(address pool, uint256 investAmount) external;\\r\\n\\r\\n    function withdrawOrder(address pool, uint256 withdrawAmount) external;\\r\\n\\r\\n    function calcDisburse(\\r\\n        address pool,\\r\\n        address user\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 fulfilledInvest,\\r\\n            uint256 fulfilledWithdraw,\\r\\n            uint256 remainingInvest,\\r\\n            uint256 remainingWithdraw\\r\\n        );\\r\\n\\r\\n    function disburse(\\r\\n        address pool,\\r\\n        address user\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 fulfilledInvest,\\r\\n            uint256 fulfilledWithdraw,\\r\\n            uint256 remainingInvest,\\r\\n            uint256 remainingWithdraw\\r\\n        );\\r\\n\\r\\n    function closeEpoch(address pool) external returns (uint256 totalInvest_, uint256 totalWithdraw_);\\r\\n\\r\\n    function epochUpdate(\\r\\n        address pool,\\r\\n        uint256 epochID,\\r\\n        uint256 investFulfillment_,\\r\\n        uint256 withdrawFulfillment_,\\r\\n        uint256 tokenPrice_,\\r\\n        uint256 epochTotalInvest,\\r\\n        uint256 epochTotalWithdraw\\r\\n    ) external;\\r\\n\\r\\n    function getTotalValueRaised(address pool) external view returns (uint256);\\r\\n\\r\\n    function getTokenAddress(address pool) external view returns (address);\\r\\n\\r\\n    function getOrder(address pool, address user) external view returns (UserOrder memory);\\r\\n\\r\\n    function getWithdrawAmount(address pool, address user) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4cd286822fbdf17f81746428cd029117014de1100f93395e642ea7adfcc6777f\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\r\\nimport {Configuration} from '../libraries/Configuration.sol';\\r\\n\\r\\nimport '../storage/Registry.sol';\\r\\n\\r\\ninterface IPool {\\r\\n    event UpdateTGEAddress(address tge, Configuration.NOTE_TOKEN_TYPE noteType);\\r\\n    event IncreaseReserve(uint256 increasingAmount, uint256 currencyAmount);\\r\\n    event IncreaseCapitalReserve(uint256 increasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseCapitalReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseIncomeReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event UpdateDebtCeiling(uint256 _debtCeiling);\\r\\n    event UpdateMintFirstLoss(uint32 _mintFirstLoss);\\r\\n    event UpdateInterestRateSot(uint32 _interestRateSot);\\r\\n    event Withdraw(address originatorAddress, uint256 amount);\\r\\n    event ClaimCashRemain(address pot, address recipientWallet, uint256 balance);\\r\\n\\r\\n    function calcJuniorRatio() external view returns (uint256 juniorRatio);\\r\\n\\r\\n    function calcTokenPrices() external view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice);\\r\\n\\r\\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external;\\r\\n\\r\\n    function getLoansValue(\\r\\n        uint256[] memory tokenIds,\\r\\n        DataTypes.LoanEntry[] memory loanEntries\\r\\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues);\\r\\n\\r\\n    function collectAssets(\\r\\n        uint256[] memory tokenIds,\\r\\n        DataTypes.LoanEntry[] memory loanEntries\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function collectERC20Asset(address tokenAddresss) external;\\r\\n\\r\\n    function currentNAV() external view returns (uint256 nav_);\\r\\n\\r\\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256);\\r\\n\\r\\n    function debt(uint256 loan) external view returns (uint256 loanDebt);\\r\\n\\r\\n    function debtCeiling() external view returns (uint256);\\r\\n\\r\\n    function getBeneficiary() external view returns (address);\\r\\n\\r\\n    function getEarlyExitInfor() external view returns (uint256, uint256);\\r\\n\\r\\n    function capitalReserve() external view returns (uint256);\\r\\n\\r\\n    function incomeReserve() external view returns (uint256);\\r\\n\\r\\n    function decreaseCapitalReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function decreaseIncomeReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function disburse(address usr, uint256 currencyAmount) external;\\r\\n\\r\\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory);\\r\\n\\r\\n    function getTokenAssetAddresses() external view returns (address[] memory);\\r\\n\\r\\n    function increaseCapitalReserve(uint256 currencyAmount) external;\\r\\n\\r\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external;\\r\\n\\r\\n    function interestRateSOT() external view returns (uint256);\\r\\n\\r\\n    function isMinFirstLossValid() external view returns (bool);\\r\\n\\r\\n    function jotToken() external view returns (address);\\r\\n\\r\\n    function minFirstLossCushion() external view returns (uint32);\\r\\n\\r\\n    function openingBlockTimestamp() external view returns (uint64);\\r\\n\\r\\n    function pot() external view returns (address);\\r\\n\\r\\n    function rebase() external;\\r\\n\\r\\n    function registry() external returns (Registry);\\r\\n\\r\\n    function repayLoan(\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory);\\r\\n\\r\\n    function reserve() external view returns (uint256);\\r\\n\\r\\n    function risk(bytes32 nft_) external view returns (uint256 risk_);\\r\\n\\r\\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory);\\r\\n\\r\\n    function seniorDebtAndBalance() external view returns (uint256, uint256);\\r\\n\\r\\n    function setDebtCeiling(uint256 _debtCeiling) external;\\r\\n\\r\\n    function setInterestRateSOT(uint32 _newRate) external;\\r\\n\\r\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) external;\\r\\n\\r\\n    function sotToken() external view returns (address);\\r\\n\\r\\n    function totalAssetRepaidCurrency() external view returns (uint256);\\r\\n\\r\\n    function underlyingCurrency() external view returns (address);\\r\\n\\r\\n    function validatorRequired() external view returns (bool);\\r\\n\\r\\n    function withdraw(address to, uint256 amount) external;\\r\\n\\r\\n    function withdrawAssets(\\r\\n        address[] memory tokenAddresses,\\r\\n        uint256[] memory tokenIds,\\r\\n        address[] memory recipients\\r\\n    ) external;\\r\\n\\r\\n    function withdrawERC20Assets(\\r\\n        address[] memory tokenAddresses,\\r\\n        address[] memory recipients,\\r\\n        uint256[] memory amounts\\r\\n    ) external;\\r\\n\\r\\n    function distributeIncome() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6d533676188def18cf3261212d4b577be6af9143737af86276366ce921de13e5\",\"license\":\"Unlicense\"},\"contracts/interfaces/ISecuritizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '../storage/Registry.sol';\\r\\nimport './IPool.sol';\\r\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\r\\n\\r\\ninterface ISecuritizationManager {\\r\\n    event NewPoolCreated(address indexed instanceAddress);\\r\\n    event NewPoolDeployed(address indexed instanceAddress, address poolOwner, DataTypes.NewPoolParams newPoolParams);\\r\\n    event UpdatePotToPool(address indexed pot, address indexed pool);\\r\\n    event SotDeployed(address indexed sotAddress, address tgeAddress, address poolAddress);\\r\\n    event JotDeployed(address indexed jotAddress, address tgeAddress, address poolAddress);\\r\\n\\r\\n    event SetupSot(address indexed sotAddress, address tgeAddress, TGEParam tgeParam, uint256 interestRate);\\r\\n    event SetupJot(address indexed jotAddress, address tgeAddress, TGEParam tgeParam, uint256 initialJOTAmount);\\r\\n\\r\\n    event UpdateAllowedUIDTypes(uint256[] uids);\\r\\n    event TokensPurchased(address indexed investor, address indexed tgeAddress, uint256 amount, uint256 tokenAmount);\\r\\n    event NoteTokenPurchased(\\r\\n        address indexed investor,\\r\\n        address indexed tgeAddress,\\r\\n        address poolAddress,\\r\\n        uint256 amount,\\r\\n        uint256 tokenAmount\\r\\n    );\\r\\n\\r\\n    event UpdateTGEInfo(TGEInfoParam[] tgeInfos);\\r\\n\\r\\n    struct TGEParam {\\r\\n        address issuerTokenController;\\r\\n        address pool;\\r\\n        uint256 minBidAmount;\\r\\n        uint256 totalCap;\\r\\n        uint256 openingTime;\\r\\n        string ticker;\\r\\n        uint8 saleType;\\r\\n    }\\r\\n\\r\\n    struct TGEInfoParam {\\r\\n        address tgeAddress;\\r\\n        uint256 totalCap;\\r\\n        uint256 minBidAmount;\\r\\n    }\\r\\n\\r\\n    function registry() external view returns (Registry);\\r\\n\\r\\n    function isExistingPools(address pool) external view returns (bool);\\r\\n\\r\\n    function pools(uint256 idx) external view returns (address);\\r\\n\\r\\n    function potToPool(address pot) external view returns (address);\\r\\n\\r\\n    function isExistingTGEs(address tge) external view returns (bool);\\r\\n\\r\\n    function hasAllowedUID(address sender) external view returns (bool);\\r\\n\\r\\n    /// @dev Register pot to pool instance\\r\\n    /// @param pot Pool linked wallet\\r\\n    function registerPot(address pot) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdb3c27398d3027d1438bad8e8303daeab11c7fe2aecd2a7431f036e45e271074\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ISecuritizationPoolValueService.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\nimport '../libraries/DataTypes.sol';\\r\\n\\r\\ninterface ISecuritizationPoolValueService {\\r\\n    /// @notice calculates the total expected value of all assets in the securitization pool at a given timestamp\\r\\n    /// @dev iterates over the NFT assets and token assets in the pool, calling getExpectedAssetValue\\r\\n    /// or getExpectedERC20AssetValue for each asset and summing up the values\\r\\n    function getExpectedAssetsValue(address poolAddress) external view returns (uint256 expectedAssetsValue);\\r\\n\\r\\n    /// @notice returns the rate that belongs to Junior investors at the current time\\r\\n    function getJuniorRatio(address poolAddress) external view returns (uint256);\\r\\n\\r\\n    function getPoolValue(address poolAddress) external view returns (uint256);\\r\\n\\r\\n    /// @notice current individual asset price for the \\\"SOT\\\" tranche at the current timestamp\\r\\n    function getSOTTokenPrice(address securitizationPool) external view returns (uint256);\\r\\n\\r\\n    /// @notice calculates the token price for the \\\"JOT\\\" tranche at the current timestamp\\r\\n    function getJOTTokenPrice(address securitizationPool) external view returns (uint256);\\r\\n\\r\\n    /// @notice calculates the token price for a specific token address in the securitization pool\\r\\n    function calcTokenPrice(address pool, address tokenAddress) external view returns (uint256);\\r\\n\\r\\n    function getTokenValues(\\r\\n        address[] calldata tokenAddresses,\\r\\n        address[] calldata investors\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getTokenPrices(\\r\\n        address[] calldata pools,\\r\\n        address[] calldata tokenAddresses\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getExternalTokenInfos(address poolAddress) external view returns (DataTypes.NoteToken[] memory);\\r\\n\\r\\n    /// @notice the available cash balance in the securitization pool\\r\\n    // function getCashBalance(address pool) external view returns (uint256);\\r\\n\\r\\n    /// @notice calculates the corresponding total asset value for a specific token address, investor, and end time\\r\\n    function calcCorrespondingTotalAssetValue(address tokenAddress, address investor) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x10249d3324aed5a517bd4bf10deb1b4ea372ab8fce8e4d877984c671a6271e5e\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ITokenGenerationEventFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '../storage/Registry.sol';\\r\\nimport './INoteToken.sol';\\r\\n\\r\\ninterface ITokenGenerationEventFactory {\\r\\n    enum SaleType {\\r\\n        NORMAL_SALE_JOT,\\r\\n        NORMAL_SALE_SOT\\r\\n    }\\r\\n\\r\\n    event UpdateTGEImplAddress(SaleType indexed tgeType, address newImpl);\\r\\n    event TokenGenerationEventCreated(address indexed tgeInstance);\\r\\n\\r\\n    /// @notice creates a new TGE instance based on the provided parameters and the sale type\\r\\n    function createNewSaleInstance(\\r\\n        address issuerTokenController,\\r\\n        address token,\\r\\n        address currency,\\r\\n        uint8 saleType,\\r\\n        uint256 openingTime\\r\\n    ) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc0bef4958d6d7925e69355c558cb4191e954783d65c5775574f674137b292658\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IUniqueIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\r\\n\\r\\ninterface IUniqueIdentity is IERC1155Upgradeable {\\r\\n    /// @notice Mint a new UniqueIdentity token to the msgSender\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding mint params:\\r\\n    ///                  account, id, expiresAt, address(this), nonces[account], block.chainid\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function mint(uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\r\\n\\r\\n    /// @notice Mint a new UniqueIdentity token to the `recipient`\\r\\n    /// @param recipient The recipient address to be minted to.\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding mintTo params:\\r\\n    ///                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function mintTo(address recipient, uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\r\\n\\r\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account`\\r\\n    /// @param account The account which currently owns the UID\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding burn params:\\r\\n    ///                  (account, id, expiresAt, address(this), nonces[account], block.chainid)\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function burn(address account, uint256 id, uint256 expiresAt, bytes calldata signature) external;\\r\\n\\r\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\\r\\n    /// @param account The account which currently owns the UID\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    function burnFrom(address account, uint256 id) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9ccf02e406b5bcdfa6d67bfd3fde8af1ff127303241a6fa6337b0882ad43d7ae\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\r\\nimport {Registry} from '../storage/Registry.sol';\\r\\nimport {Configuration} from './Configuration.sol';\\r\\nimport {ISecuritizationManager} from '../interfaces/ISecuritizationManager.sol';\\r\\nimport {IPool} from '../interfaces/IPool.sol';\\r\\nimport {INoteTokenFactory} from '../interfaces/INoteTokenFactory.sol';\\r\\nimport {INoteToken} from '../interfaces/INoteToken.sol';\\r\\nimport {ITokenGenerationEventFactory} from '../interfaces/ITokenGenerationEventFactory.sol';\\r\\nimport {ILoanKernel} from '../interfaces/ILoanKernel.sol';\\r\\nimport {LoanAssetToken} from '../tokens/ERC721/LoanAssetToken.sol';\\r\\nimport {ISecuritizationPoolValueService} from '../interfaces/ISecuritizationPoolValueService.sol';\\r\\nimport {IGo} from '../interfaces/IGo.sol';\\r\\nimport {INoteTokenManager} from '../interfaces/INoteTokenManager.sol';\\r\\nimport {IEpochExecutor} from '../interfaces/IEpochExecutor.sol';\\r\\nimport {OWNER_ROLE} from './DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title ConfigHelper\\r\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\r\\n *  protocol, through the use of the Registry contract\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary ConfigHelper {\\r\\n    function getAddress(Registry registry, Configuration.CONTRACT_TYPE contractType) internal view returns (address) {\\r\\n        return registry.getAddress(uint8(contractType));\\r\\n    }\\r\\n\\r\\n    function getSecuritizationManager(Registry registry) internal view returns (ISecuritizationManager) {\\r\\n        return ISecuritizationManager(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER));\\r\\n    }\\r\\n\\r\\n    function getSecuritizationPool(Registry registry) internal view returns (IPool) {\\r\\n        return IPool(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL));\\r\\n    }\\r\\n\\r\\n    function getSeniorTokenManager(Registry registry) internal view returns (INoteTokenManager) {\\r\\n        return INoteTokenManager(getAddress(registry, Configuration.CONTRACT_TYPE.SENIOR_TOKEN_MANAGER));\\r\\n    }\\r\\n\\r\\n    function getJuniorTokenManager(Registry registry) internal view returns (INoteTokenManager) {\\r\\n        return INoteTokenManager(getAddress(registry, Configuration.CONTRACT_TYPE.JUNIOR_TOKEN_MANAGER));\\r\\n    }\\r\\n\\r\\n    function getEpochExecutor(Registry registry) internal view returns (IEpochExecutor) {\\r\\n        return IEpochExecutor(getAddress(registry, Configuration.CONTRACT_TYPE.EPOCH_EXECUTOR));\\r\\n    }\\r\\n\\r\\n    function getNoteTokenFactory(Registry registry) internal view returns (INoteTokenFactory) {\\r\\n        return INoteTokenFactory(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY));\\r\\n    }\\r\\n\\r\\n    function getLoanAssetToken(Registry registry) internal view returns (LoanAssetToken) {\\r\\n        return LoanAssetToken(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN));\\r\\n    }\\r\\n\\r\\n    function getLoanKernel(Registry registry) internal view returns (ILoanKernel) {\\r\\n        return ILoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_KERNEL));\\r\\n    }\\r\\n\\r\\n    function getSecuritizationPoolValueService(\\r\\n        Registry registry\\r\\n    ) internal view returns (ISecuritizationPoolValueService) {\\r\\n        return\\r\\n            ISecuritizationPoolValueService(\\r\\n                getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getGo(Registry registry) internal view returns (IGo) {\\r\\n        return IGo(getAddress(registry, Configuration.CONTRACT_TYPE.GO));\\r\\n    }\\r\\n\\r\\n    function requireSecuritizationManager(Registry registry, address account) internal view {\\r\\n        require(account == address(getSecuritizationManager(registry)), 'Registry: Only SecuritizationManager');\\r\\n    }\\r\\n\\r\\n    function requireLoanKernel(Registry registry, address account) internal view {\\r\\n        require(account == address(getLoanKernel(registry)), 'Registry: Only LoanKernel');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa63e4f64fb1d12d5445b2e8576b110a39f6bea85d03c179b8702776d7237e534\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        SENIOR_TOKEN_MANAGER,\\r\\n        JUNIOR_TOKEN_MANAGER,\\r\\n        EPOCH_EXECUTOR,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19d48a27b3b35d91fb4a5e19a2cfbd7ad5aea8bacc153fd615912892730799d2\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\n\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\n\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\n\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct NoteToken {\\r\\n        address poolAddress;\\r\\n        address noteTokenAddress;\\r\\n        uint256 balance;\\r\\n        uint256 apy;\\r\\n    }\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        uint256 debtCeiling;\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address[] tokenAssetAddresses;\\r\\n        mapping(address => bool) existsTokenAssetAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        address beneficiary;\\r\\n        uint256 protocolFee;\\r\\n        uint256 earlyExitFee;\\r\\n        uint256 exitTimestamp;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        // for base (sell-loan) operation\\r\\n        uint256 paidPrincipalAmountSOT;\\r\\n        uint256 interestRateSOT; // Annually, support 4 decimals num\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        /// @notice Interest Rate Groups are identified by a `uint` and stored in a mapping\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n\\r\\n        uint256 loanCount;\\r\\n        // loan => loan principal\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        // sum of loan principal\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf38431a3efe4b9f943c42927052044840498329e7eb06aa0a8bbbe0cbae9068\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport './Math.sol';\\r\\n\\r\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\r\\nlibrary Discounting{\\r\\n    /// @notice calculates the discount for a given loan\\r\\n    /// @param discountRate the discount rate\\r\\n    /// @param fv the future value of the loan\\r\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @return result discount for the loan\\r\\n    function calcDiscount(\\r\\n        uint256 discountRate,\\r\\n        uint256 fv,\\r\\n        uint256 normalizedBlockTimestamp,\\r\\n        uint256 maturityDate\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\r\\n    /// @param loanInterestRate the interest rate of the loan\\r\\n    /// @param amount of the loan (principal)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\r\\n    /// @return fv future value of the loan\\r\\n    function calcFutureValue(\\r\\n        uint256 loanInterestRate,\\r\\n        uint256 amount,\\r\\n        uint256 maturityDate,\\r\\n        uint256 recoveryRatePD\\r\\n    ) internal view returns (uint256 fv) {\\r\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\r\\n        uint256 timeRemaining = 0;\\r\\n        if (maturityDate > nnow) {\\r\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\r\\n        }\\r\\n\\r\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\r\\n    }\\r\\n\\r\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\r\\n    /// @param x the first value (minuend)\\r\\n    /// @param y the second value (subtrahend)\\r\\n    /// @return result result of the subtraction\\r\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (y > x) {\\r\\n            return 0;\\r\\n        }\\r\\n        return Math.safeSub(x, y);\\r\\n    }\\r\\n\\r\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\r\\n    /// @param timestamp the timestamp which should be normalized\\r\\n    /// @return nTimestamp normalized timestamp\\r\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\r\\n        return (1 days) * (timestamp / (1 days));\\r\\n    }\\r\\n\\r\\n    /// @notice rpow peforms a math pow operation with fixed point number\\r\\n    /// adopted from ds-math\\r\\n    /// @param x the base for the pow operation\\r\\n    /// @param n the exponent for the pow operation\\r\\n    /// @param base the base of the fixed point number\\r\\n    /// @return z the result of the pow operation\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd714875aff75d76f628985cd29220e1ec81f30807eb54fd1f1e72461d46e0f7e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// tinlake-math/math.sol -- Tinlake Math\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Math {\\r\\n    uint256 constant ONE = 10 ** 27;\\r\\n\\r\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'safe-add-failed');\\r\\n    }\\r\\n\\r\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'safe-sub-failed');\\r\\n    }\\r\\n\\r\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\r\\n    }\\r\\n\\r\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x / y;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = safeMul(x, y) / ONE;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        // always rounds up\\r\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5da55cb6423fc2810924e3ebea355caae8b5108c280fd3cba416e30083d8526f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97c5987f1d2bc096faf1fe6c185ce9efe919b46b47508dd500a0bd16a5d9d0e9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UntangledMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title UntangledMath\\r\\n/// @author Untangled Team\\r\\nlibrary UntangledMath {\\r\\n    uint256 public constant ONE = 10 ** 27;\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function uncheckedInc(uint256 x) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x + 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7361e1f20c36cca9b47700f18e5e8c65922f7fec4ecc9a4357bf8967868def1b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General internal License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General internal License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General internal License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary GenericLogic {\\r\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\r\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\r\\n    event IncreaseCapitalReserve(uint256 increasingAmount, uint256 newCapitalReserve);\\r\\n    event DecreaseCapitalReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseIncomeReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n\\r\\n    /** GETTER */\\r\\n    /// @notice getter function for the maturityDate\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return maturityDate_ the maturityDate of the nft\\r\\n    function maturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nft_\\r\\n    ) internal view returns (uint256 maturityDate_) {\\r\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the risk group\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return risk_ the risk group of the nft\\r\\n\\r\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\r\\n        return uint256(_poolStorage.details[nft_].risk);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the nft value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return nftValue_ the value of the nft\\r\\n\\r\\n    /// @notice getter function for the future value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return fv_ future value of the loan\\r\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\r\\n        return uint256(_poolStorage.details[nft_].futureValue);\\r\\n    }\\r\\n\\r\\n    // function discountRate() internal view  returns (uint256) {\\r\\n    //     return uint256(_getStorage().discountRate);\\r\\n    // }\\r\\n\\r\\n    /// @notice getter function for the recovery rate PD\\r\\n    /// @param riskID id of a risk group\\r\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\r\\n    function recoveryRatePD(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 riskID,\\r\\n        uint256 termLength\\r\\n    ) internal view returns (uint256 recoveryRatePD_) {\\r\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\r\\n        return\\r\\n            Math.ONE -\\r\\n            (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\r\\n            (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the borrowed amount\\r\\n    /// @param loan id of a loan\\r\\n    /// @return borrowed_ borrowed amount of the loan\\r\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\r\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\r\\n    }\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    // TODO have to use modifier in main contract\\r\\n    function getRiskScoreByIdx(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 idx\\r\\n    ) internal view returns (DataTypes.RiskScore memory) {\\r\\n        if (idx == 0 || riskScores.length == 0) {\\r\\n            // Default risk score\\r\\n            return\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: 0,\\r\\n                    advanceRate: 1000000,\\r\\n                    penaltyRate: 0,\\r\\n                    interestRate: 0,\\r\\n                    probabilityOfDefault: 0,\\r\\n                    lossGivenDefault: 0,\\r\\n                    writeOffAfterGracePeriod: 0,\\r\\n                    gracePeriod: 0,\\r\\n                    collectionPeriod: 0,\\r\\n                    writeOffAfterCollectionPeriod: 0,\\r\\n                    discountRate: 0\\r\\n                });\\r\\n        }\\r\\n        // Because risk score upload = risk score index onchain + 1\\r\\n        idx = idx - 1;\\r\\n        return riskScores[idx];\\r\\n    }\\r\\n\\r\\n    /// @notice converts a uint256 to uint128\\r\\n    /// @param value the value to be converted\\r\\n    /// @return converted value to uint128\\r\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\r\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n\\r\\n    /// @notice returns if a loan is written off\\r\\n    /// @param loan the id of the loan\\r\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\r\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV\\r\\n    /// @return nav_ current NAV\\r\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\r\\n    /// @return totalDiscount the present value of the loans\\r\\n    /// @return overdue the present value of the overdue loans\\r\\n    /// @return writeOffs the present value of the written off loans\\r\\n    function currentPVs(\\r\\n        DataTypes.Storage storage _poolStorage\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 latestDiscount;\\r\\n        uint256 overdueLoans;\\r\\n        uint256 discountRate;\\r\\n        uint256 lastNAVUpdate;\\r\\n        {\\r\\n            latestDiscount = _poolStorage.latestDiscount;\\r\\n            overdueLoans = _poolStorage.overdueLoans;\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n        }\\r\\n        if (latestDiscount == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // find all new overdue loans since the last update\\r\\n        // calculate the discount of the overdue loans which is needed\\r\\n        // for the total discount calculation\\r\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\r\\n            uint256 b = _poolStorage.buckets[i];\\r\\n            if (b != 0) {\\r\\n                errPV = Math.safeAdd(\\r\\n                    errPV,\\r\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\r\\n                );\\r\\n                overdue = Math.safeAdd(overdue, b);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\r\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\r\\n                errPV\\r\\n            ),\\r\\n            // current overdue loans not written off\\r\\n            Math.safeAdd(overdueLoans, overdue),\\r\\n            // current write-offs loans\\r\\n            currentWriteOffs(_poolStorage)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function currentAV(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 tokenId\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 _currentWriteOffs = 0;\\r\\n        uint256 discountRate;\\r\\n        uint256 latestDiscountOfNavAssetsID;\\r\\n        uint256 lastNAVUpdate;\\r\\n        uint256 overdueLoansOfNavAssetsID;\\r\\n        {\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\r\\n        }\\r\\n\\r\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\r\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\r\\n            _currentWriteOffs = Math.rmul(\\r\\n                debt(_poolStorage, uint256(tokenId)),\\r\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (latestDiscountOfNavAssetsID == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // loan is overdue since lastNAVUpdate\\r\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\r\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\r\\n            uint256 b = futureValue(_poolStorage, tokenId);\\r\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\r\\n            overdue = b;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(\\r\\n                    latestDiscountOfNavAssetsID,\\r\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\r\\n                ),\\r\\n                errPV\\r\\n            ),\\r\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\r\\n            _currentWriteOffs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the sum of all write off loans\\r\\n    /// @return sum of all write off loans\\r\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\r\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            // multiply writeOffGroupDebt with the writeOff rate\\r\\n\\r\\n            sum = Math.safeAdd(\\r\\n                sum,\\r\\n                Math.rmul(\\r\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\r\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV and updates the state\\r\\n    /// @return nav_ current NAV\\r\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n\\r\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\r\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\r\\n\\r\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\r\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\r\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\r\\n        }\\r\\n\\r\\n        _poolStorage.overdueLoans = overdue;\\r\\n        _poolStorage.latestDiscount = totalDiscount;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\r\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice re-calculates the nav in a non-optimized way\\r\\n    ///  the method is not updating the NAV to latest block.timestamp\\r\\n    /// @return nav_ current NAV\\r\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        // reCalcTotalDiscount\\r\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\r\\n        /// @return latestDiscount_ returns the total discount of the active loans\\r\\n        uint256 latestDiscount_ = 0;\\r\\n        for (uint256 loanID = 1; loanID < _poolStorage.loanCount; loanID++) {\\r\\n            bytes32 nftID_ = nftID(loanID);\\r\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\r\\n                _poolStorage.discountRate,\\r\\n                futureValue(_poolStorage, nftID_),\\r\\n                _poolStorage.lastNAVUpdate,\\r\\n                maturityDate_\\r\\n            );\\r\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\r\\n        }\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestDiscount_,\\r\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\r\\n        );\\r\\n        _poolStorage.latestDiscount = latestDiscount_;\\r\\n\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the nftID for the underlying collateral nft\\r\\n    /// @param loan the loan id\\r\\n    /// @return nftID_ the nftID of the loan\\r\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\r\\n        return bytes32(loan);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the current valid write off group of a loan\\r\\n    /// @param loan the loan id\\r\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\r\\n    function currentValidWriteOffGroup(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 writeOffGroup_) {\\r\\n        bytes32 nftID_ = nftID(loan);\\r\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\r\\n\\r\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\r\\n\\r\\n        uint128 lastValidWriteOff = type(uint128).max;\\r\\n        uint128 highestOverdueDays = 0;\\r\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\r\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\r\\n            if (\\r\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\r\\n                overdueDays >= highestOverdueDays &&\\r\\n                nnow >= maturityDate_ + overdueDays * 1 days\\r\\n            ) {\\r\\n                lastValidWriteOff = i;\\r\\n                highestOverdueDays = overdueDays;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // returns type(uint128).max if no write-off group is valid for this loan\\r\\n        return lastValidWriteOff;\\r\\n    }\\r\\n\\r\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\r\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].chi,\\r\\n                _poolStorage.rates[rate_].ratePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].penaltyChi,\\r\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function debtWithChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 chi,\\r\\n        uint256 penaltyChi\\r\\n    ) internal view returns (uint256 loanDebt) {\\r\\n        if (penaltyChi == 0) {\\r\\n            return toAmount(chi, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chiAndPenaltyChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        chi = _poolStorage.rates[rate_].chi;\\r\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\r\\n    }\\r\\n\\r\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\r\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\r\\n\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].penaltyChi,\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, pie_);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\r\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\r\\n        // rate category has to be initiated\\r\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\r\\n        _poolStorage.loanRates[loan] = rate;\\r\\n        emit SetRate(nftID(loan), rate);\\r\\n    }\\r\\n\\r\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\r\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\r\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\r\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\r\\n        }\\r\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\r\\n        drip(_poolStorage, currentRate);\\r\\n        drip(_poolStorage, newRate);\\r\\n        uint256 pie_ = _poolStorage.pie[loan];\\r\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\r\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\r\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\r\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\r\\n        _poolStorage.loanRates[loan] = newRate;\\r\\n        emit ChangeRate(nftID(loan), newRate);\\r\\n    }\\r\\n\\r\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\r\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\r\\n    }\\r\\n\\r\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            (uint256 chi, ) = compounding(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated,\\r\\n                _poolStorage.rates[rate].pie\\r\\n            );\\r\\n            _poolStorage.rates[rate].chi = chi;\\r\\n            if (\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\r\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\r\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\r\\n            ) {\\r\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\r\\n                    ? _poolStorage.rates[rate].lastUpdated\\r\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\r\\n                (uint256 penaltyChi, ) = compounding(\\r\\n                    _poolStorage.rates[rate].penaltyChi,\\r\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                    lastUpdated_,\\r\\n                    _poolStorage.rates[rate].pie\\r\\n                );\\r\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\r\\n            }\\r\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Interest functions\\r\\n    // @notice This function provides compounding in seconds\\r\\n    // @param chi Accumulated interest rate over time\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated When the interest rate was last updated\\r\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\r\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\r\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\r\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\r\\n        require(chi != 0);\\r\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\r\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\r\\n    }\\r\\n\\r\\n    // @notice This function charge interest on a interestBearingAmount\\r\\n    // @param interestBearingAmount is the interest bearing amount\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated last time the interest has been charged\\r\\n    // @return interestBearingAmount + interest\\r\\n    function chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated\\r\\n    ) internal view returns (uint) {\\r\\n        if (block.timestamp >= lastUpdated) {\\r\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        }\\r\\n        return interestBearingAmount;\\r\\n    }\\r\\n\\r\\n    function _chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated,\\r\\n        uint current\\r\\n    ) internal pure returns (uint) {\\r\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\r\\n    }\\r\\n\\r\\n    // convert pie to debt/savings amount\\r\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\r\\n        return Math.rmul(_pie, chi);\\r\\n    }\\r\\n\\r\\n    // convert debt/savings amount to pie\\r\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\r\\n        return Math.rdivup(amount, chi);\\r\\n    }\\r\\n\\r\\n    function getAsset(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 agreementId\\r\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\r\\n        return _poolStorage.details[agreementId];\\r\\n    }\\r\\n\\r\\n    function reserve(DataTypes.Storage storage _poolStorage) internal view returns (uint256) {\\r\\n        return Math.safeAdd(_poolStorage.capitalReserve, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    function increaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 amount) internal {\\r\\n        _poolStorage.capitalReserve = Math.safeAdd(_poolStorage.capitalReserve, amount);\\r\\n        emit IncreaseCapitalReserve(amount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    /// @param amortizationUnitType AmortizationUnitType enum\\r\\n    /// @return the corresponding length of the unit in seconds\\r\\n    function _getAmortizationUnitLengthInSeconds(\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\r\\n    ) private pure returns (uint256) {\\r\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\r\\n            return 1 minutes;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\r\\n            return 1 hours;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\r\\n            return 1 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\r\\n            return 7 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\r\\n            return 30 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\r\\n            return 365 days;\\r\\n        } else {\\r\\n            revert('Unknown amortization unit type.');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   Get parameters by Agreement ID (commitment hash)\\r\\n     */\\r\\n    function unpackParamsForAgreementID(\\r\\n        DataTypes.LoanEntry calldata loan\\r\\n    ) internal view returns (UnpackLoanParamtersLib.InterestParams memory params) {\\r\\n        // The principal amount denominated in the aforementioned token.\\r\\n        uint256 principalAmount;\\r\\n        // The interest rate accrued per amortization unit.\\r\\n        uint256 interestRate;\\r\\n        // The amortization unit in which the repayments installments schedule is defined.\\r\\n        uint256 rawAmortizationUnitType;\\r\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 gracePeriodInDays;\\r\\n\\r\\n        (\\r\\n            principalAmount,\\r\\n            interestRate,\\r\\n            rawAmortizationUnitType,\\r\\n            termLengthInAmortizationUnits,\\r\\n            gracePeriodInDays\\r\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\r\\n\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\r\\n            rawAmortizationUnitType\\r\\n        );\\r\\n\\r\\n        // Grant the real origination date\\r\\n        termLengthInAmortizationUnits =\\r\\n            (loan.expirationTimestamp - block.timestamp) /\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        // Calculate term length base on Amortization Unit and number\\r\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        return\\r\\n            UnpackLoanParamtersLib.InterestParams({\\r\\n                principalAmount: principalAmount,\\r\\n                interestRate: interestRate,\\r\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\r\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\r\\n                amortizationUnitType: amortizationUnitType,\\r\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\r\\n            });\\r\\n    }\\r\\n    function decreaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.capitalReserve >= currencyAmount, 'insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - currencyAmount;\\r\\n        emit DecreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.incomeReserve >= currencyAmount, 'insufficient balance of income reserve');\\r\\n        _poolStorage.incomeReserve = _poolStorage.incomeReserve - currencyAmount;\\r\\n        emit DecreaseIncomeReserve(currencyAmount, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    function setPot(DataTypes.Storage storage _poolStorage, address _pot) external {\\r\\n        require(_poolStorage.pot != _pot, 'SecuritizationPool: Same address with current pot');\\r\\n        _poolStorage.pot = _pot;\\r\\n\\r\\n        if (_pot == address(this)) {\\r\\n            require(\\r\\n                IERC20Upgradeable(_poolStorage.underlyingCurrency).approve(_pot, type(uint256).max),\\r\\n                'SecuritizationPool: Pot not approved'\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function disburse(DataTypes.Storage storage _poolStorage, address usr, uint256 currencyAmount) external {\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, usr, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function withdraw(DataTypes.Storage storage _poolStorage, address to, uint256 amount) public {\\r\\n        require(_poolStorage.capitalReserve >= amount, 'SecuritizationPool: insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - amount;\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, to, amount);\\r\\n        emit DecreaseCapitalReserve(amount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1027ea4569f38f0062682456e1d170eca5b9453a752100a832c4667c29ad5e18\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolAssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledERC721} from '../../tokens/ERC721/UntangledERC721.sol';\\r\\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\\r\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\r\\nimport {DataTypes} from '../DataTypes.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\\r\\nimport './PoolNAVLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizationPoolAsset contract\\r\\n * @notice Provides pool's asset related functions\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolAssetLogic {\\r\\n    event ExportNFTAsset(address tokenAddress, address toPoolAddress, uint256[] tokenIds);\\r\\n    event WithdrawNFTAsset(address[] tokenAddresses, uint256[] tokenIds, address[] recipients);\\r\\n    event UpdateOpeningBlockTimestamp(uint256 newTimestamp);\\r\\n    event CollectNFTAsset(uint256[] tokenIds, uint256 expectedAssetsValue);\\r\\n    event CollectERC20Asset(address token, uint256 currentBalance);\\r\\n    event WithdrawERC20Asset(address[] tokenAddresses, address[] recipients, uint256[] amounts);\\r\\n    event SetRiskScore(DataTypes.RiskScore[] riskscores);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    function _removeNFTAsset(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address tokenAddress,\\r\\n        uint256 tokenId\\r\\n    ) private returns (bool) {\\r\\n        uint256 nftAssetsLength = _nftAssets.length;\\r\\n        for (uint256 i = 0; i < nftAssetsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            if (_nftAssets[i].tokenAddress == tokenAddress && _nftAssets[i].tokenId == tokenId) {\\r\\n                // Remove i element from nftAssets\\r\\n                _removeNFTAssetIndex(_nftAssets, i);\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _removeNFTAssetIndex(DataTypes.NFTAsset[] storage _nftAssets, uint256 indexToRemove) private {\\r\\n        _nftAssets[indexToRemove] = _nftAssets[_nftAssets.length - 1];\\r\\n\\r\\n        _nftAssets.pop();\\r\\n    }\\r\\n\\r\\n    function _pushTokenAssetAddress(\\r\\n        mapping(address => bool) storage existsTokenAssetAddress,\\r\\n        address[] storage tokenAssetAddresses,\\r\\n        address tokenAddress\\r\\n    ) private {\\r\\n        if (!existsTokenAssetAddress[tokenAddress]) tokenAssetAddresses.push(tokenAddress);\\r\\n        existsTokenAssetAddress[tokenAddress] = true;\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function setupRiskScores(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint32[] calldata _daysPastDues,\\r\\n        uint32[] calldata _ratesAndDefaults,\\r\\n        uint32[] calldata _periodsAndWriteOffs\\r\\n    ) external {\\r\\n        uint256 _daysPastDuesLength = _daysPastDues.length;\\r\\n        require(\\r\\n            _daysPastDuesLength * 6 == _ratesAndDefaults.length &&\\r\\n                _daysPastDuesLength * 4 == _periodsAndWriteOffs.length,\\r\\n            'SecuritizationPool: Riskscore params length is not equal'\\r\\n        );\\r\\n\\r\\n        delete _poolStorage.riskScores;\\r\\n\\r\\n        for (uint256 i = 0; i < _daysPastDuesLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(\\r\\n                i == 0 || _daysPastDues[i] > _daysPastDues[i - 1],\\r\\n                'SecuritizationPool: Risk scores must be sorted'\\r\\n            );\\r\\n            uint32 _interestRate = _ratesAndDefaults[i + _daysPastDuesLength * 2];\\r\\n            uint32 _writeOffAfterGracePeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 2];\\r\\n            uint32 _writeOffAfterCollectionPeriod = _periodsAndWriteOffs[i + _daysPastDuesLength * 3];\\r\\n            _poolStorage.riskScores.push(\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: _daysPastDues[i],\\r\\n                    advanceRate: _ratesAndDefaults[i],\\r\\n                    penaltyRate: _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                    interestRate: _interestRate,\\r\\n                    probabilityOfDefault: _ratesAndDefaults[i + _daysPastDuesLength * 3],\\r\\n                    lossGivenDefault: _ratesAndDefaults[i + _daysPastDuesLength * 4],\\r\\n                    discountRate: _ratesAndDefaults[i + _daysPastDuesLength * 5],\\r\\n                    gracePeriod: _periodsAndWriteOffs[i],\\r\\n                    collectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength],\\r\\n                    writeOffAfterGracePeriod: _writeOffAfterGracePeriod,\\r\\n                    writeOffAfterCollectionPeriod: _periodsAndWriteOffs[i + _daysPastDuesLength * 3]\\r\\n                })\\r\\n            );\\r\\n            PoolNAVLogic.file(\\r\\n                _poolStorage,\\r\\n                'writeOffGroup',\\r\\n                _interestRate,\\r\\n                _writeOffAfterGracePeriod,\\r\\n                _periodsAndWriteOffs[i],\\r\\n                _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                i\\r\\n            );\\r\\n            PoolNAVLogic.file(\\r\\n                _poolStorage,\\r\\n                'writeOffGroup',\\r\\n                _interestRate,\\r\\n                _writeOffAfterCollectionPeriod,\\r\\n                _periodsAndWriteOffs[i + _daysPastDuesLength],\\r\\n                _ratesAndDefaults[i + _daysPastDuesLength],\\r\\n                i\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Set discount rate\\r\\n        PoolNAVLogic.file(_poolStorage, 'discountRate', _poolStorage.riskScores[0].discountRate);\\r\\n\\r\\n        emit SetRiskScore(_poolStorage.riskScores);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function exportAssets(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address tokenAddress,\\r\\n        address toPoolAddress,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(_removeNFTAsset(_nftAssets, tokenAddress, tokenIds[i]), 'SecuritizationPool: Asset does not exist');\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            UntangledERC721(tokenAddress).safeTransferFrom(address(this), toPoolAddress, tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit ExportNFTAsset(tokenAddress, toPoolAddress, tokenIds);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function withdrawAssets(\\r\\n        DataTypes.NFTAsset[] storage _nftAssets,\\r\\n        address[] calldata tokenAddresses,\\r\\n        uint256[] calldata tokenIds,\\r\\n        address[] calldata recipients\\r\\n    ) external {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        require(tokenAddresses.length == tokenIdsLength, 'tokenAddresses length and tokenIds length are not equal');\\r\\n        require(\\r\\n            tokenAddresses.length == recipients.length,\\r\\n            'tokenAddresses length and recipients length are not equal'\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(\\r\\n                _removeNFTAsset(_nftAssets, tokenAddresses[i], tokenIds[i]),\\r\\n                'SecuritizationPool: Asset does not exist'\\r\\n            );\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            UntangledERC721(tokenAddresses[i]).safeTransferFrom(address(this), recipients[i], tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit WithdrawNFTAsset(tokenAddresses, tokenIds, recipients);\\r\\n    }\\r\\n\\r\\n    function getLoansValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata tokenIds,\\r\\n        DataTypes.LoanEntry[] calldata loanEntries\\r\\n    ) external view returns (uint256 expectedAssetsValue, uint256[] memory expectedAssetValues) {\\r\\n        expectedAssetValues = new uint256[](tokenIds.length);\\r\\n        for (uint256 i = 0; i < tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\r\\n            uint256 assetValue = PoolNAVLogic.getExpectedLoanvalue(_poolStorage, loanEntries[i]);\\r\\n            expectedAssetsValue = expectedAssetsValue + assetValue;\\r\\n            expectedAssetValues[i] = assetValue;\\r\\n        }\\r\\n\\r\\n        return (expectedAssetsValue, expectedAssetValues);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function collectAssets(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata tokenIds,\\r\\n        DataTypes.LoanEntry[] calldata loanEntries\\r\\n    ) external returns (uint256) {\\r\\n        uint256 tokenIdsLength = tokenIds.length;\\r\\n        uint256 expectedAssetsValue = 0;\\r\\n        for (uint256 i = 0; i < tokenIdsLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            expectedAssetsValue = expectedAssetsValue + PoolNAVLogic.addLoan(_poolStorage, tokenIds[i], loanEntries[i]);\\r\\n        }\\r\\n\\r\\n        if (_poolStorage.firstAssetTimestamp == 0) {\\r\\n            _poolStorage.firstAssetTimestamp = uint64(block.timestamp);\\r\\n            _setUpOpeningBlockTimestamp(_poolStorage);\\r\\n        }\\r\\n        if (_poolStorage.openingBlockTimestamp == 0) {\\r\\n            // If openingBlockTimestamp is not set\\r\\n            _setOpeningBlockTimestamp(_poolStorage, uint64(block.timestamp));\\r\\n        }\\r\\n\\r\\n        emit CollectNFTAsset(tokenIds, expectedAssetsValue);\\r\\n        return expectedAssetsValue;\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function collectERC20Asset(DataTypes.Storage storage _poolStorgae, address tokenAddress) external {\\r\\n        _pushTokenAssetAddress(_poolStorgae.existsTokenAssetAddress, _poolStorgae.tokenAssetAddresses, tokenAddress);\\r\\n\\r\\n        if (_poolStorgae.openingBlockTimestamp == 0) {\\r\\n            // If openingBlockTimestamp is not set\\r\\n            _setOpeningBlockTimestamp(_poolStorgae, uint64(block.timestamp));\\r\\n        }\\r\\n\\r\\n        emit CollectERC20Asset(tokenAddress, INoteToken(tokenAddress).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function withdrawERC20Assets(\\r\\n        mapping(address => bool) storage existsTokenAssetAddress,\\r\\n        address[] calldata tokenAddresses,\\r\\n        address[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) external {\\r\\n        uint256 tokenAddressesLength = tokenAddresses.length;\\r\\n        require(tokenAddressesLength == recipients.length, 'tokenAddresses length and tokenIds length are not equal');\\r\\n        require(tokenAddressesLength == amounts.length, 'tokenAddresses length and recipients length are not equal');\\r\\n\\r\\n        for (uint256 i = 0; i < tokenAddressesLength; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(existsTokenAssetAddress[tokenAddresses[i]], 'SecuritizationPool: note token asset does not exist');\\r\\n            TransferHelper.safeTransfer(tokenAddresses[i], recipients[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        emit WithdrawERC20Asset(tokenAddresses, recipients, amounts);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n    function setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) public {\\r\\n        _setUpOpeningBlockTimestamp(_poolStorage);\\r\\n    }\\r\\n\\r\\n    /// @dev Set the opening block timestamp\\r\\n    function _setUpOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage) private {}\\r\\n\\r\\n    function _setOpeningBlockTimestamp(DataTypes.Storage storage _poolStorage, uint64 _openingBlockTimestamp) internal {\\r\\n        _poolStorage.openingBlockTimestamp = _openingBlockTimestamp;\\r\\n        emit UpdateOpeningBlockTimestamp(_openingBlockTimestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b73e7b6c8a12ca355bf7b7dee861f52be0fb64b2dcdaee77c8af2b371be21ef\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {GenericLogic} from './GenericLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolNAVLogic {\\r\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n\\r\\n    // events\\r\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\r\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\r\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\r\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n\\r\\n    function getExpectedLoanvalue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public view returns (uint256 principalAmount) {\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        principalAmount = (loanParam.principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n    }\\r\\n\\r\\n    function addLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public returns (uint256) {\\r\\n        bytes32 _tokenId = bytes32(loan);\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n\\r\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\r\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\r\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\r\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\r\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\r\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\r\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\r\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\r\\n\\r\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\r\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\r\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\r\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\r\\n\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        uint256 principalAmount = loanParam.principalAmount;\\r\\n        uint256 _convertedInterestRate;\\r\\n\\r\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n\\r\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\r\\n        _poolStorage.loanCount++;\\r\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\r\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n            // If interest rate is not set\\r\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n        }\\r\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\r\\n        GenericLogic.accrue(_poolStorage, loan);\\r\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\r\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\r\\n\\r\\n        // increase NAV\\r\\n        borrow(_poolStorage, loan, principalAmount);\\r\\n        _incDebt(_poolStorage, loan, principalAmount);\\r\\n\\r\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\r\\n\\r\\n        return principalAmount;\\r\\n    }\\r\\n\\r\\n    function setLoanMaturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\r\\n\\r\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\r\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\r\\n        );\\r\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter\\r\\n    /// @param value new value of the parameter\\r\\n\\r\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\r\\n        if (name == 'discountRate') {\\r\\n            uint256 oldDiscountRate = _poolStorage.discountRate;\\r\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            // the nav needs to be re-calculated based on the new discount rate\\r\\n            // no need to recalculate it if initialized the first time\\r\\n            if (oldDiscountRate != 0) {\\r\\n                GenericLogic.reCalcNAV(_poolStorage);\\r\\n            }\\r\\n        } else {\\r\\n            revert('unknown config parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter group\\r\\n    /// @param writeOffPercentage_ the write off rate in percent\\r\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\r\\n\\r\\n    function file(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 name,\\r\\n        uint256 rate_,\\r\\n        uint256 writeOffPercentage_,\\r\\n        uint256 overdueDays_,\\r\\n        uint256 penaltyRate_,\\r\\n        uint256 riskIndex\\r\\n    ) public {\\r\\n        if (name == 'writeOffGroup') {\\r\\n            uint256 index = _poolStorage.writeOffGroups.length;\\r\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\r\\n            uint256 _convertedPenaltyRate = Math.ONE +\\r\\n                (Math.ONE * penaltyRate_ * rate_) /\\r\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\r\\n            _poolStorage.writeOffGroups.push(\\r\\n                DataTypes.WriteOffGroup(\\r\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\r\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\r\\n                    GenericLogic.toUint128(riskIndex)\\r\\n                )\\r\\n            );\\r\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\r\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\r\\n        } else {\\r\\n            revert('unknown name');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file manages different state configs for the pile\\r\\n    /// only a ward can call this function\\r\\n    /// @param what what config to change\\r\\n    /// @param rate the interest rate group\\r\\n    /// @param value the value to change\\r\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\r\\n        if (what == 'rate') {\\r\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].chi == 0) {\\r\\n                _poolStorage.rates[rate].chi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n            _poolStorage.rates[rate].ratePerSecond = value;\\r\\n        } else if (what == 'penalty') {\\r\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\r\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n\\r\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\r\\n        } else {\\r\\n            revert('unknown parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice borrow updates the NAV for a new borrowed loan\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param amount the amount borrowed\\r\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\r\\n    function borrow(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 amount\\r\\n    ) private returns (uint256 navIncrease) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\r\\n\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // uint256 beforeNAV = latestNAV;\\r\\n\\r\\n        // calculate amount including fixed fee if applicatable\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n\\r\\n        // calculate future value FV\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            amount,\\r\\n            maturityDate_,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\r\\n        );\\r\\n\\r\\n        // add future value to the bucket of assets with the same maturity date\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n        // increase borrowed amount for future ceiling computations\\r\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\r\\n        );\\r\\n\\r\\n        // return increase NAV amount\\r\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n\\r\\n        return navIncrease;\\r\\n    }\\r\\n\\r\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\r\\n        _poolStorage.latestNAV = Discounting.secureSub(\\r\\n            _poolStorage.latestNAV,\\r\\n            Math.rmul(\\r\\n                amount,\\r\\n                GenericLogic.toUint128(\\r\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        decDebt(_poolStorage, loan, amount);\\r\\n    }\\r\\n\\r\\n    function _calcFutureValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 _debt,\\r\\n        uint256 _maturityDate\\r\\n    ) private view returns (uint256) {\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            _debt,\\r\\n            _maturityDate,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        return fv;\\r\\n    }\\r\\n\\r\\n    /// @notice repay updates the NAV for a new repaid loan\\r\\n    /// @param loans the ids of the loan\\r\\n    /// @param amounts the amounts repaid\\r\\n    function repayLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        uint256 numberOfLoans = loans.length;\\r\\n\\r\\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\\r\\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            uint256 loan = loans[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            // re-define: prevent stack too deep\\r\\n            DataTypes.Storage storage __poolStorage = _poolStorage;\\r\\n\\r\\n            GenericLogic.accrue(__poolStorage, loan);\\r\\n\\r\\n            if (nnow > __poolStorage.lastNAVUpdate) {\\r\\n                GenericLogic.calcUpdateNAV(__poolStorage);\\r\\n            }\\r\\n\\r\\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\\r\\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\\r\\n\\r\\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\\r\\n            if (amount > _currentDebt) {\\r\\n                amount = _currentDebt;\\r\\n            }\\r\\n\\r\\n            repayAmounts[i] = amount;\\r\\n            previousDebts[i] = _currentDebt;\\r\\n\\r\\n            // case 1: repayment of a written-off loan\\r\\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\\r\\n                // update nav with write-off decrease\\r\\n                _decreaseLoan(__poolStorage, loan, amount);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\\r\\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\r\\n            uint256 fvDecrease = preFV;\\r\\n\\r\\n            // prevent stack too deep\\r\\n            {\\r\\n                uint256 fv = 0;\\r\\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\r\\n                if (_debt != 0) {\\r\\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\\r\\n                    if (preFV >= fv) {\\r\\n                        fvDecrease = Math.safeSub(preFV, fv);\\r\\n                    } else {\\r\\n                        fvDecrease = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\\r\\n            }\\r\\n\\r\\n            // case 2: repayment of a loan before or on maturity date\\r\\n            if (maturityDate_ >= nnow) {\\r\\n                // remove future value decrease from bucket\\r\\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n                uint256 discountDecrease = Discounting.calcDiscount(\\r\\n                    __poolStorage.discountRate,\\r\\n                    fvDecrease,\\r\\n                    nnow,\\r\\n                    maturityDate_\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\\r\\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\\r\\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\\r\\n                    discountDecrease\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\\r\\n            } else {\\r\\n                // case 3: repayment of an overdue loan\\r\\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\\r\\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\\r\\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\\r\\n                    fvDecrease\\r\\n                );\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\\r\\n            }\\r\\n\\r\\n            decDebt(__poolStorage, loan, amount);\\r\\n            emit Repay(bytes32(loan), amount);\\r\\n        }\\r\\n        return (repayAmounts, previousDebts);\\r\\n    }\\r\\n\\r\\n    /// @notice writeOff writes off a loan if it is overdue\\r\\n    /// @param loan the id of the loan\\r\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\r\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\r\\n\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\r\\n\\r\\n        // can not write-off healthy loans\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\r\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\r\\n        // check the writeoff group based on the amount of days overdue\\r\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\r\\n\\r\\n        if (\\r\\n            writeOffGroupIndex_ < type(uint128).max &&\\r\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\r\\n        ) {\\r\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\r\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal function for the write off\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\r\\n    /// @param nftID_ the nftID of the loan\\r\\n    /// @param maturityDate_ the maturity date of the loan\\r\\n    function _writeOff(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 writeOffGroupIndex_,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        // Ensure we have an up to date NAV\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\r\\n\\r\\n        // first time written-off\\r\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\r\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\r\\n                // write off after the maturity date\\r\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\r\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\r\\n                    fv\\r\\n                );\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\r\\n            } else {\\r\\n                // write off before or on the maturity date\\r\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n                uint256 pv = Math.rmul(\\r\\n                    fv,\\r\\n                    Discounting.rpow(\\r\\n                        _poolStorage.discountRate,\\r\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\r\\n                        Math.ONE\\r\\n                    )\\r\\n                );\\r\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                    pv\\r\\n                );\\r\\n\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestNAV_,\\r\\n            Math.rmul(\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // no change in risk group\\r\\n        if (risk_ == GenericLogic.risk(_poolStorage, nftID_)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\r\\n\\r\\n        // update nav -> latestNAVUpdate = now\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\r\\n        // change to new rate interestRate immediately in pile if loan debt exists\\r\\n        uint256 loan = uint256(nftID_);\\r\\n        if (_poolStorage.pie[loan] != 0) {\\r\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\r\\n            uint256 _convertedInterestRate = Math.ONE +\\r\\n                (riskParam.interestRate * Math.ONE) /\\r\\n                (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n                // If interest rate is not set\\r\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n            }\\r\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\r\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\r\\n        }\\r\\n\\r\\n        // no currencyAmount borrowed yet\\r\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\r\\n        // New interest rate leads to a future value.\\r\\n        // recalculation required\\r\\n        {\\r\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n\\r\\n            uint256 navDecrease = Discounting.calcDiscount(_poolStorage.discountRate, fvDecrease, nnow, maturityDate_);\\r\\n\\r\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                navDecrease\\r\\n            );\\r\\n\\r\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\r\\n        }\\r\\n\\r\\n        // update latest NAV\\r\\n        // update latest Discount\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Discounting.calcFutureValue(\\r\\n                _rate.ratePerSecond,\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\r\\n                GenericLogic.recoveryRatePD(\\r\\n                    _poolStorage.riskScores,\\r\\n                    risk_,\\r\\n                    nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n        uint256 navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fvIncrease, nnow, maturityDate_);\\r\\n\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\r\\n\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\r\\n    }\\r\\n\\r\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n\\r\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        if (penaltyChi_ > 0) {\\r\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\r\\n        }\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e548101818b26d599f1295a1d10ee9ca612241ec3025a8d3a7f1f52a1c11e03\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/RebaseLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledERC721} from '../../tokens/ERC721/UntangledERC721.sol';\\r\\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\\r\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\r\\nimport {DataTypes, PRICE_DECIMAL, ONE, ONE_HUNDRED_PERCENT} from '../DataTypes.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\nimport {GenericLogic} from './GenericLogic.sol';\\r\\nimport {TGELogic} from './TGELogic.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's Rebase Logic\\r\\n * @notice Provides pool's rebase functions\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary RebaseLogic {\\r\\n    /// @notice accumulates the senior interest\\r\\n    /// @return _seniorDebt the senior debt\\r\\n    function dripSeniorDebt(DataTypes.Storage storage _poolStorage) public returns (uint256) {\\r\\n        uint256 _seniorDebt = seniorDebt(_poolStorage);\\r\\n        _poolStorage.seniorDebt = _seniorDebt;\\r\\n        _poolStorage.lastUpdateSeniorInterest = uint64(block.timestamp);\\r\\n        return _seniorDebt;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the senior debt with up to date interest\\r\\n    /// @return _seniorDebt senior debt\\r\\n    function seniorDebt(DataTypes.Storage storage _poolStorage) public view returns (uint256 _seniorDebt) {\\r\\n        uint256 lastUpdateSeniorInterest = uint256(_poolStorage.lastUpdateSeniorInterest);\\r\\n        if (block.timestamp >= lastUpdateSeniorInterest) {\\r\\n            uint256 convertedInterestRate = ONE +\\r\\n                (_poolStorage.interestRateSOT * ONE) /\\r\\n                (ONE_HUNDRED_PERCENT * 365 days);\\r\\n\\r\\n            return\\r\\n                GenericLogic.chargeInterest(_poolStorage.seniorDebt, convertedInterestRate, lastUpdateSeniorInterest);\\r\\n        }\\r\\n        return _poolStorage.seniorDebt;\\r\\n    }\\r\\n\\r\\n    function rebase(DataTypes.Storage storage _poolStorage, uint256 _nav, uint256 _reserve) public {\\r\\n        (uint256 seniorDebt_, uint256 seniorBalance_) = _rebase(\\r\\n            _nav,\\r\\n            _reserve,\\r\\n            calcExpectedSeniorAsset(_poolStorage.seniorBalance, dripSeniorDebt(_poolStorage))\\r\\n        );\\r\\n        _poolStorage.seniorDebt = seniorDebt_;\\r\\n        _poolStorage.seniorBalance = seniorBalance_;\\r\\n    }\\r\\n\\r\\n    /// @notice changes the senior asset value based on new supply or redeems\\r\\n    /// @param _seniorSupply senior supply amount\\r\\n    /// @param _seniorRedeem senior redeem amount\\r\\n    function changeSeniorAsset(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorSupply,\\r\\n        uint256 _seniorRedeem\\r\\n    ) external {\\r\\n        (uint256 seniorDebt_, uint256 seniorBalance_) = _rebase(\\r\\n            _nav,\\r\\n            _reserve,\\r\\n            calcExpectedSeniorAsset(\\r\\n                _seniorRedeem,\\r\\n                _seniorSupply,\\r\\n                _poolStorage.seniorBalance,\\r\\n                dripSeniorDebt(_poolStorage)\\r\\n            )\\r\\n        );\\r\\n        _poolStorage.seniorDebt = seniorDebt_;\\r\\n        _poolStorage.seniorBalance = seniorBalance_;\\r\\n    }\\r\\n\\r\\n    /// @notice internal function for the rebalance of senior debt and balance\\r\\n    /// @param _seniorAsset the expected senior asset value (senior debt + senior balance)\\r\\n    function _rebase(uint256 _nav, uint256 _reserve, uint256 _seniorAsset) public pure returns (uint256, uint256) {\\r\\n        // re-balancing according to new ratio\\r\\n\\r\\n        uint256 seniorRatio_ = calcSeniorRatio(_seniorAsset, _nav, _reserve);\\r\\n\\r\\n        // in that case the entire juniorAsset is lost\\r\\n        // the senior would own everything that' left\\r\\n        if (seniorRatio_ > ONE) {\\r\\n            seniorRatio_ = ONE;\\r\\n        }\\r\\n\\r\\n        uint256 seniorBalance_;\\r\\n        uint256 seniorDebt_ = Math.rmul(_nav, seniorRatio_);\\r\\n        if (seniorDebt_ > _seniorAsset) {\\r\\n            seniorDebt_ = _seniorAsset;\\r\\n            seniorBalance_ = 0;\\r\\n        } else {\\r\\n            seniorBalance_ = Math.safeSub(_seniorAsset, seniorDebt_);\\r\\n        }\\r\\n        return (seniorDebt_, seniorBalance_);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the senior ratio\\r\\n    /// @param seniorAsset the current senior asset value\\r\\n    /// @param nav the current NAV\\r\\n    /// @param reserve the current reserve\\r\\n    /// @return seniorRatio the senior ratio\\r\\n    function calcSeniorRatio(\\r\\n        uint256 seniorAsset,\\r\\n        uint256 nav,\\r\\n        uint256 reserve\\r\\n    ) public pure returns (uint256 seniorRatio) {\\r\\n        // note: NAV + reserve == seniorAsset + juniorAsset (invariant: always true)\\r\\n        uint256 assets = Math.safeAdd(nav, reserve);\\r\\n        if (assets == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // if expectedSeniorAsset is passed ratio can be greater than ONE\\r\\n        return Math.rdiv(seniorAsset, assets);\\r\\n    }\\r\\n\\r\\n    /// @notice expected senior return if no losses occur\\r\\n    /// @param _seniorRedeem the senior redeem amount\\r\\n    /// @param _seniorSupply the senior supply amount\\r\\n    /// @param _seniorBalance the current senior balance\\r\\n    /// @param _seniorDebt the current senior debt\\r\\n    /// @return expectedSeniorAsset the expected senior asset value\\r\\n    function calcExpectedSeniorAsset(\\r\\n        uint256 _seniorRedeem,\\r\\n        uint256 _seniorSupply,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _seniorDebt\\r\\n    ) public pure returns (uint256 expectedSeniorAsset) {\\r\\n        return Math.safeSub(Math.safeAdd(Math.safeAdd(_seniorDebt, _seniorBalance), _seniorSupply), _seniorRedeem);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the expected Senior asset value\\r\\n    /// @param _seniorDebt the current senior debt\\r\\n    /// @param _seniorBalance the current senior balance\\r\\n    /// @return seniorAsset returns the senior asset value\\r\\n    function calcExpectedSeniorAsset(\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance\\r\\n    ) public pure returns (uint256 seniorAsset) {\\r\\n        return Math.safeAdd(_seniorDebt, _seniorBalance);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the senior token price\\r\\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\\r\\n    function calcSeniorTokenPrice(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _sotTotalSupply\\r\\n    ) external pure returns (uint256 seniorTokenPrice) {\\r\\n        return _calcSeniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _sotTotalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the junior token price\\r\\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\\r\\n    function calcJuniorTokenPrice(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _jotTotalSupply\\r\\n    ) external pure returns (uint256 juniorTokenPrice) {\\r\\n        return _calcJuniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _jotTotalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the senior and junior token price based on current NAV and reserve\\r\\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\\r\\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\\r\\n    function calcTokenPrices(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _jotTotalSupply,\\r\\n        uint256 _sotTotalSupply\\r\\n    ) external pure returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice) {\\r\\n        return (\\r\\n            _calcJuniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _jotTotalSupply),\\r\\n            _calcSeniorTokenPrice(_nav, _reserve, _seniorDebt, _seniorBalance, _sotTotalSupply)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to calculate the senior token price\\r\\n    /// @param _nav the NAV\\r\\n    /// @param _reserve the reserve\\r\\n    /// @param _seniorDebt the senior debt\\r\\n    /// @param _seniorBalance the senior balance\\r\\n    /// @param _sotTotalSupply the token supply\\r\\n    /// @return seniorTokenPrice the senior token price in RAY decimal (10^27)\\r\\n    function _calcSeniorTokenPrice(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _sotTotalSupply\\r\\n    ) internal pure returns (uint256 seniorTokenPrice) {\\r\\n        // the coordinator interface will pass the reserveAvailable\\r\\n\\r\\n        if ((_nav == 0 && _reserve == 0) || _sotTotalSupply <= 2) {\\r\\n            // we are using a tolerance of 2 here, as there can be minimal supply leftovers after all redemptions due to rounding\\r\\n            // initial token price at start 1.00\\r\\n            return ONE;\\r\\n        }\\r\\n\\r\\n        uint256 poolValue = Math.safeAdd(_nav, _reserve);\\r\\n        uint256 seniorAssetValue = calcExpectedSeniorAsset(_seniorDebt, _seniorBalance);\\r\\n\\r\\n        if (poolValue < seniorAssetValue) {\\r\\n            seniorAssetValue = poolValue;\\r\\n        }\\r\\n        return Math.rdiv(seniorAssetValue, _sotTotalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to calculate the junior token price\\r\\n    /// @param _nav the NAV\\r\\n    /// @param _reserve the reserve\\r\\n    /// @param _seniorDebt the senior debt\\r\\n    /// @param _seniorBalance the senior balance\\r\\n    /// @param _jotTotalSupply the token supply\\r\\n    /// @return juniorTokenPrice the junior token price in RAY decimal (10^27)\\r\\n    function _calcJuniorTokenPrice(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance,\\r\\n        uint256 _jotTotalSupply\\r\\n    ) internal pure returns (uint256 juniorTokenPrice) {\\r\\n        if ((_nav == 0 && _reserve == 0) || _jotTotalSupply <= 2) {\\r\\n            // we are using a tolerance of 2 here, as there can be minimal supply leftovers after all redemptions due to rounding\\r\\n            // initial token price at start 1.00\\r\\n            return ONE;\\r\\n        }\\r\\n        // reserve includes creditline from maker\\r\\n        uint256 poolValue = Math.safeAdd(_nav, _reserve);\\r\\n\\r\\n        // includes creditline from mkr\\r\\n        uint256 seniorAssetValue = calcExpectedSeniorAsset(_seniorDebt, _seniorBalance);\\r\\n\\r\\n        if (poolValue < seniorAssetValue) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return Math.rdiv(Math.safeSub(poolValue, seniorAssetValue), _jotTotalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the current junior ratio protection in the Tinlake\\r\\n    /// @return juniorRatio_ is denominated in RATE_SCALING_FACTOR\\r\\n    function calcJuniorRatio(\\r\\n        uint256 _nav,\\r\\n        uint256 _reserve,\\r\\n        uint256 _seniorDebt,\\r\\n        uint256 _seniorBalance\\r\\n    ) external pure returns (uint256 juniorRatio_) {\\r\\n        uint256 seniorAsset_ = Math.safeAdd(_seniorDebt, _seniorBalance);\\r\\n        uint256 assets_ = Math.safeAdd(_nav, _reserve);\\r\\n\\r\\n        if (seniorAsset_ == 0 && assets_ == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (seniorAsset_ == 0 && assets_ > 0) {\\r\\n            return ONE_HUNDRED_PERCENT;\\r\\n        }\\r\\n\\r\\n        if (seniorAsset_ > assets_) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return (Math.safeSub(ONE, Math.rdiv(seniorAsset_, assets_)) * ONE_HUNDRED_PERCENT) / ONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83c3fe16eac60d7159ea44836fdb32540571eac51daa82ca834069abf6ecfe65\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/TGELogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\r\\nimport {ISecuritizationPoolValueService} from '../../interfaces/ISecuritizationPoolValueService.sol';\\r\\nimport {IMintedNormalTGE} from '../../interfaces/IMintedNormalTGE.sol';\\r\\nimport {Configuration} from '../Configuration.sol';\\r\\nimport {DataTypes, RATE_SCALING_FACTOR} from '../DataTypes.sol';\\r\\nimport {TransferHelper} from '../TransferHelper.sol';\\r\\n\\r\\nlibrary TGELogic {\\r\\n    event UpdateTGEAddress(address tge, Configuration.NOTE_TOKEN_TYPE noteType);\\r\\n    event IncreaseReserve(uint256 increasingAmount, uint256 currencyAmount);\\r\\n    event IncreaseCapitalReserve(uint256 increasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseCapitalReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event DecreaseIncomeReserve(uint256 decreasingAmount, uint256 currencyAmount);\\r\\n    event UpdateDebtCeiling(uint256 _debtCeiling);\\r\\n    event UpdateMintFirstLoss(uint32 _mintFirstLoss);\\r\\n    event UpdateInterestRateSot(uint32 _interestRateSot);\\r\\n    event Withdraw(address originatorAddress, uint256 amount);\\r\\n    event ClaimCashRemain(address pot, address recipientWallet, uint256 balance);\\r\\n\\r\\n    function underlyingCurrency(DataTypes.Storage storage _poolStorage) public view returns (address) {\\r\\n        return _poolStorage.underlyingCurrency;\\r\\n    }\\r\\n\\r\\n    function minFirstLossCushion(DataTypes.Storage storage _poolStorage) public view returns (uint32) {\\r\\n        return _poolStorage.minFirstLossCushion;\\r\\n    }\\r\\n\\r\\n    function paidPrincipalAmountSOT(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\\r\\n        return _poolStorage.paidPrincipalAmountSOT;\\r\\n    }\\r\\n\\r\\n    function debtCeiling(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\\r\\n        return _poolStorage.debtCeiling;\\r\\n    }\\r\\n\\r\\n    function interestRateSOT(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\\r\\n        return _poolStorage.interestRateSOT;\\r\\n    }\\r\\n\\r\\n    function totalAssetRepaidCurrency(DataTypes.Storage storage _poolStorage) public view returns (uint256) {\\r\\n        return _poolStorage.totalAssetRepaidCurrency;\\r\\n    }\\r\\n\\r\\n    function disburse(DataTypes.Storage storage _poolStorage, address usr, uint256 currencyAmount) external {\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, usr, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function isDebtCeilingValid(DataTypes.Storage storage _poolStorage) public view returns (bool) {\\r\\n        return _poolStorage.debtCeiling >= _poolStorage.capitalReserve;\\r\\n    }\\r\\n\\r\\n    // Increase by value\\r\\n    function increaseTotalAssetRepaidCurrency(DataTypes.Storage storage _poolStorage, uint256 amount) external {\\r\\n        _poolStorage.totalAssetRepaidCurrency = _poolStorage.totalAssetRepaidCurrency + amount;\\r\\n    }\\r\\n\\r\\n    function hasFinishedRedemption(address sotAddress, address jotAddress) public view returns (bool) {\\r\\n        if (sotAddress != address(0)) {\\r\\n            require(IERC20Upgradeable(sotAddress).totalSupply() == 0, 'SecuritizationPool: SOT still remain');\\r\\n        }\\r\\n\\r\\n        if (jotAddress != address(0)) {\\r\\n            require(IERC20Upgradeable(jotAddress).totalSupply() == 0, 'SecuritizationPool: JOT still remain');\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setPot(DataTypes.Storage storage _poolStorage, address _pot) external {\\r\\n        require(_poolStorage.pot != _pot, 'SecuritizationPool: Same address with current pot');\\r\\n        _poolStorage.pot = _pot;\\r\\n\\r\\n        if (_pot == address(this)) {\\r\\n            require(\\r\\n                IERC20Upgradeable(_poolStorage.underlyingCurrency).approve(_pot, type(uint256).max),\\r\\n                'SecuritizationPool: Pot not approved'\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMinFirstLossCushion(DataTypes.Storage storage _poolStorage, uint32 _minFirstLossCushion) external {\\r\\n        require(\\r\\n            _minFirstLossCushion <= 100 * RATE_SCALING_FACTOR,\\r\\n            'SecuritizationPool: minFirstLossCushion is greater than 100'\\r\\n        );\\r\\n\\r\\n        _poolStorage.minFirstLossCushion = _minFirstLossCushion;\\r\\n        emit UpdateMintFirstLoss(_minFirstLossCushion);\\r\\n    }\\r\\n\\r\\n    function setDebtCeiling(DataTypes.Storage storage _poolStorage, uint256 _debtCeiling) external {\\r\\n        _poolStorage.debtCeiling = _debtCeiling;\\r\\n        emit UpdateDebtCeiling(_debtCeiling);\\r\\n    }\\r\\n\\r\\n    function _setInterestRateSOT(DataTypes.Storage storage _poolStorage, uint32 _newRate) external {\\r\\n        _poolStorage.interestRateSOT = _newRate;\\r\\n        emit UpdateInterestRateSot(_newRate);\\r\\n    }\\r\\n\\r\\n    function increaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve + currencyAmount;\\r\\n        emit IncreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    function decreaseCapitalReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.capitalReserve >= currencyAmount, 'insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - currencyAmount;\\r\\n        emit DecreaseCapitalReserve(currencyAmount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n\\r\\n    function decreaseIncomeReserve(DataTypes.Storage storage _poolStorage, uint256 currencyAmount) external {\\r\\n        require(_poolStorage.incomeReserve >= currencyAmount, 'insufficient balance of income reserve');\\r\\n        _poolStorage.incomeReserve = _poolStorage.incomeReserve - currencyAmount;\\r\\n        emit DecreaseIncomeReserve(currencyAmount, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    // After closed pool and redeem all not -> get remain cash to recipient wallet\\r\\n    function claimCashRemain(DataTypes.Storage storage _poolStorage, address recipientWallet) external {\\r\\n        IERC20Upgradeable currency = IERC20Upgradeable(_poolStorage.underlyingCurrency);\\r\\n        uint256 balance = currency.balanceOf(_poolStorage.pot);\\r\\n        require(\\r\\n            currency.transferFrom(_poolStorage.pot, recipientWallet, balance),\\r\\n            'SecuritizationPool: Transfer failed'\\r\\n        );\\r\\n\\r\\n        emit ClaimCashRemain(_poolStorage.pot, recipientWallet, balance);\\r\\n    }\\r\\n\\r\\n    function withdraw(DataTypes.Storage storage _poolStorage, address to, uint256 amount) public {\\r\\n        require(_poolStorage.capitalReserve >= amount, 'SecuritizationPool: insufficient balance of capital reserve');\\r\\n        _poolStorage.capitalReserve = _poolStorage.capitalReserve - amount;\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_poolStorage.underlyingCurrency, _poolStorage.pot, to, amount);\\r\\n        emit DecreaseCapitalReserve(amount, _poolStorage.capitalReserve);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3491a50f6ca2fa87bfecb97b8d6ea708f21f1ff4587517cde437fb9f490a7ee5\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport {IPool} from '../../interfaces/IPool.sol';\\r\\nimport {IEpochExecutor} from '../../interfaces/IEpochExecutor.sol';\\r\\nimport {INoteToken} from '../../interfaces/INoteToken.sol';\\r\\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\\r\\nimport {Registry} from '../../storage/Registry.sol';\\r\\nimport {OWNER_ROLE, ORIGINATOR_ROLE, POOL_ADMIN_ROLE} from '../../libraries/DataTypes.sol';\\r\\nimport {PoolStorage} from './PoolStorage.sol';\\r\\nimport {DataTypes, ONE, ONE_HUNDRED_PERCENT, RATE_SCALING_FACTOR} from '../../libraries/DataTypes.sol';\\r\\nimport {UntangledBase} from '../../base/UntangledBase.sol';\\r\\nimport {PoolNAVLogic} from '../../libraries/logic/PoolNAVLogic.sol';\\r\\nimport {PoolAssetLogic} from '../../libraries/logic/PoolAssetLogic.sol';\\r\\nimport {GenericLogic} from '../../libraries/logic/GenericLogic.sol';\\r\\nimport {RebaseLogic} from '../../libraries/logic/RebaseLogic.sol';\\r\\nimport {Configuration} from '../../libraries/Configuration.sol';\\r\\nimport 'hardhat/console.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizationPool contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\ncontract Pool is IPool, PoolStorage, UntangledBase {\\r\\n    using ConfigHelper for Registry;\\r\\n\\r\\n    Registry public registry;\\r\\n\\r\\n    event InsertNFTAsset(address token, uint256 tokenId);\\r\\n    event Repay(address poolAddress, uint256 increaseInterestRepay, uint256 increasePrincipalRepay, uint256 timestamp);\\r\\n\\r\\n    modifier requirePoolAdminOrOwner() {\\r\\n        require(\\r\\n            hasRole(POOL_ADMIN_ROLE, _msgSender()) || hasRole(OWNER_ROLE, _msgSender()),\\r\\n            'Pool: Not an pool admin or pool owner'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /** CONSTRUCTOR */\\r\\n    function initialize(address _registryAddress, bytes memory params) public initializer {\\r\\n        __UntangledBase__init(_msgSender());\\r\\n\\r\\n        require(_registryAddress != address(0), 'Registry address cannot be empty');\\r\\n        registry = Registry(_registryAddress);\\r\\n\\r\\n        DataTypes.NewPoolParams memory newPoolParams = abi.decode(params, (DataTypes.NewPoolParams));\\r\\n\\r\\n        require(newPoolParams.currency != address(0), 'Pool: Invalid currency');\\r\\n\\r\\n        _poolStorage.underlyingCurrency = newPoolParams.currency;\\r\\n        _poolStorage.validatorRequired = newPoolParams.validatorRequired;\\r\\n        _poolStorage.pot = address(this);\\r\\n\\r\\n        setMinFirstLossCushion(newPoolParams.minFirstLossCushion);\\r\\n        setDebtCeiling(newPoolParams.debtCeiling);\\r\\n\\r\\n        require(\\r\\n            ERC20(newPoolParams.currency).approve(address(this), type(uint256).max),\\r\\n            'Pool: Currency approval failed'\\r\\n        );\\r\\n\\r\\n        registry.getLoanAssetToken().setApprovalForAll(address(registry.getLoanKernel()), true);\\r\\n    }\\r\\n\\r\\n    function getNFTAssetsLength() external view returns (uint256) {\\r\\n        return _poolStorage.nftAssets.length;\\r\\n    }\\r\\n\\r\\n    /// @notice A view function that returns an array of token asset addresses\\r\\n    function getTokenAssetAddresses() external view returns (address[] memory) {\\r\\n        return _poolStorage.tokenAssetAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Riks scores length\\r\\n    /// @return the length of the risk scores array\\r\\n    function getRiskScoresLength() external view returns (uint256) {\\r\\n        return _poolStorage.riskScores.length;\\r\\n    }\\r\\n\\r\\n    function riskScores(uint256 index) external view returns (DataTypes.RiskScore memory) {\\r\\n        return _poolStorage.riskScores[index];\\r\\n    }\\r\\n\\r\\n    function capitalReserve() external view returns (uint256) {\\r\\n        return _poolStorage.capitalReserve;\\r\\n    }\\r\\n\\r\\n    function incomeReserve() external view returns (uint256) {\\r\\n        return _poolStorage.incomeReserve;\\r\\n    }\\r\\n\\r\\n    function nftAssets(uint256 idx) external view returns (DataTypes.NFTAsset memory) {\\r\\n        return _poolStorage.nftAssets[idx];\\r\\n    }\\r\\n\\r\\n    /// @notice sets up the risk scores for the contract for pool\\r\\n    function setupRiskScores(\\r\\n        uint32[] calldata _daysPastDues,\\r\\n        uint32[] calldata _ratesAndDefaults,\\r\\n        uint32[] calldata _periodsAndWriteOffs\\r\\n    ) external whenNotPaused onlyRole(POOL_ADMIN_ROLE) {\\r\\n        PoolAssetLogic.setupRiskScores(_poolStorage, _daysPastDues, _ratesAndDefaults, _periodsAndWriteOffs);\\r\\n        // rebase\\r\\n        rebase();\\r\\n    }\\r\\n\\r\\n    /// @notice exports NFT assets to another pool address\\r\\n    function exportAssets(\\r\\n        address tokenAddress,\\r\\n        address toPoolAddress,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external whenNotPaused nonReentrant requirePoolAdminOrOwner {\\r\\n        PoolAssetLogic.exportAssets(_poolStorage.nftAssets, tokenAddress, toPoolAddress, tokenIds);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws NFT assets from the contract and transfers them to recipients\\r\\n    function withdrawAssets(\\r\\n        address[] calldata tokenAddresses,\\r\\n        uint256[] calldata tokenIds,\\r\\n        address[] calldata recipients\\r\\n    ) external whenNotPaused onlyRole(OWNER_ROLE) {\\r\\n        PoolAssetLogic.withdrawAssets(_poolStorage.nftAssets, tokenAddresses, tokenIds, recipients);\\r\\n    }\\r\\n\\r\\n    function getLoansValue(\\r\\n        uint256[] memory tokenIds,\\r\\n        DataTypes.LoanEntry[] memory loanEntries\\r\\n    ) external view returns (uint256, uint256[] memory) {\\r\\n        return PoolAssetLogic.getLoansValue(_poolStorage, tokenIds, loanEntries);\\r\\n    }\\r\\n\\r\\n    /// @notice collects NFT assets from a specified address\\r\\n    function collectAssets(\\r\\n        uint256[] calldata tokenIds,\\r\\n        DataTypes.LoanEntry[] calldata loanEntries\\r\\n    ) external whenNotPaused returns (uint256) {\\r\\n        registry.requireLoanKernel(_msgSender());\\r\\n        return PoolAssetLogic.collectAssets(_poolStorage, tokenIds, loanEntries);\\r\\n    }\\r\\n\\r\\n    /// @notice collects ERC20 assets from specified senders\\r\\n    function collectERC20Asset(address tokenAddresss) external whenNotPaused {\\r\\n        registry.requireSecuritizationManager(_msgSender());\\r\\n        PoolAssetLogic.collectERC20Asset(_poolStorage, tokenAddresss);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws ERC20 assets from the contract and transfers them to recipients\\\\ound\\r\\n    function withdrawERC20Assets(\\r\\n        address[] calldata tokenAddresses,\\r\\n        address[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) external whenNotPaused nonReentrant requirePoolAdminOrOwner {\\r\\n        PoolAssetLogic.withdrawERC20Assets(_poolStorage.existsTokenAssetAddress, tokenAddresses, recipients, amounts);\\r\\n    }\\r\\n\\r\\n    /// @dev Trigger set up opening block timestamp\\r\\n\\r\\n    function onERC721Received(address, address, uint256 tokenId, bytes memory) external returns (bytes4) {\\r\\n        address token = _msgSender();\\r\\n        require(\\r\\n            token == address(registry.getLoanAssetToken()),\\r\\n            'SecuritizationPool: Must be token issued by Untangled'\\r\\n        );\\r\\n        DataTypes.NFTAsset[] storage _nftAssets = _poolStorage.nftAssets;\\r\\n        _nftAssets.push(DataTypes.NFTAsset({tokenAddress: token, tokenId: tokenId}));\\r\\n        emit InsertNFTAsset(token, tokenId);\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    /*==================== NAV ====================*/\\r\\n    function writeOff(uint256 loan) public {\\r\\n        PoolNAVLogic.writeOff(_poolStorage, loan);\\r\\n        // rebase\\r\\n        rebase();\\r\\n    }\\r\\n\\r\\n    function repayLoan(\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory) {\\r\\n        require(address(registry.getLoanKernel()) == msg.sender, 'not authorized');\\r\\n\\r\\n        uint256 numberOfLoans = loans.length;\\r\\n        require(numberOfLoans == amounts.length, 'Invalid length');\\r\\n\\r\\n        uint256[] memory lastOutstandingDebt = new uint256[](numberOfLoans);\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            (uint256 chi, uint256 penaltyChi) = GenericLogic.chiAndPenaltyChi(_poolStorage, loans[i]);\\r\\n            lastOutstandingDebt[i] = GenericLogic.debtWithChi(_poolStorage, loans[i], chi, penaltyChi);\\r\\n        }\\r\\n\\r\\n        (uint256[] memory repayAmounts, uint256[] memory previousDebts) = PoolNAVLogic.repayLoan(\\r\\n            _poolStorage,\\r\\n            loans,\\r\\n            amounts\\r\\n        );\\r\\n\\r\\n        uint256 totalInterestRepay;\\r\\n        uint256 totalPrincipalRepay;\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            uint256 interestAmount = previousDebts[i] - lastOutstandingDebt[i];\\r\\n\\r\\n            if (repayAmounts[i] <= interestAmount) {\\r\\n                totalInterestRepay += repayAmounts[i];\\r\\n            } else {\\r\\n                totalInterestRepay += interestAmount;\\r\\n                totalPrincipalRepay += repayAmounts[i] - interestAmount;\\r\\n            }\\r\\n        }\\r\\n        // distribute fee\\r\\n        uint256 protocolFee = (totalInterestRepay * _poolStorage.protocolFee) / ONE_HUNDRED_PERCENT;\\r\\n        GenericLogic.disburse(_poolStorage, _poolStorage.beneficiary, protocolFee);\\r\\n\\r\\n        _poolStorage.incomeReserve += totalInterestRepay - protocolFee;\\r\\n        _poolStorage.capitalReserve += totalPrincipalRepay;\\r\\n\\r\\n        emit Repay(address(this), totalInterestRepay, totalPrincipalRepay, block.timestamp);\\r\\n        return (repayAmounts, previousDebts);\\r\\n    }\\r\\n\\r\\n    function distributeIncome() external {\\r\\n        registry.requireLoanKernel(_msgSender());\\r\\n        uint256 juniorRatio = calcJuniorRatio();\\r\\n        uint256 jotIncomeAmt = (_poolStorage.incomeReserve * juniorRatio) / ONE_HUNDRED_PERCENT;\\r\\n        uint256 sotIncomeAmt = _poolStorage.incomeReserve - jotIncomeAmt;\\r\\n        // Increase income for each type of token\\r\\n        INoteToken(jotToken()).distributeIncome(jotIncomeAmt);\\r\\n        _poolStorage.incomeReserve -= jotIncomeAmt;\\r\\n        INoteToken(sotToken()).distributeIncome(sotIncomeAmt);\\r\\n        _poolStorage.incomeReserve -= sotIncomeAmt;\\r\\n        RebaseLogic.changeSeniorAsset(\\r\\n            _poolStorage,\\r\\n            GenericLogic.currentNAV(_poolStorage),\\r\\n            GenericLogic.reserve(_poolStorage),\\r\\n            0,\\r\\n            sotIncomeAmt\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getEarlyExitInfor() external view returns (uint256, uint256) {\\r\\n        return (_poolStorage.earlyExitFee, _poolStorage.exitTimestamp);\\r\\n    }\\r\\n\\r\\n    function getBeneficiary() external view returns (address) {\\r\\n        return _poolStorage.beneficiary;\\r\\n    }\\r\\n\\r\\n    function getRepaidAmount() external view returns (uint256, uint256) {\\r\\n        return (_poolStorage.totalPrincipalRepaid, _poolStorage.totalInterestRepaid);\\r\\n    }\\r\\n\\r\\n    function debt(uint256 loan) external view returns (uint256 loanDebt) {\\r\\n        return GenericLogic.debt(_poolStorage, loan);\\r\\n    }\\r\\n\\r\\n    function risk(bytes32 nft_) external view returns (uint256 risk_) {\\r\\n        return uint256(_poolStorage.details[nft_].risk);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV\\r\\n    /// @return nav_ current NAV\\r\\n    function currentNAV() external view returns (uint256 nav_) {\\r\\n        return GenericLogic.currentNAV(_poolStorage);\\r\\n    }\\r\\n\\r\\n    function currentNAVAsset(bytes32 tokenId) external view returns (uint256) {\\r\\n        return GenericLogic.currentNAVAsset(_poolStorage, tokenId);\\r\\n    }\\r\\n\\r\\n    function futureValue(bytes32 nft_) external view returns (uint256) {\\r\\n        return uint256(_poolStorage.details[nft_].futureValue);\\r\\n    }\\r\\n\\r\\n    function maturityDate(bytes32 nft_) external view returns (uint256) {\\r\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\r\\n    }\\r\\n\\r\\n    function discountRate() external view returns (uint256) {\\r\\n        return uint256(_poolStorage.discountRate);\\r\\n    }\\r\\n\\r\\n    function updateAssetRiskScore(bytes32 nftID_, uint256 risk_) external onlyRole(POOL_ADMIN_ROLE) {\\r\\n        PoolNAVLogic.updateAssetRiskScore(_poolStorage, nftID_, risk_);\\r\\n    }\\r\\n\\r\\n    /// @notice retrieves loan information\\r\\n    function getAsset(bytes32 agreementId) external view returns (DataTypes.NFTDetails memory) {\\r\\n        return _poolStorage.details[agreementId];\\r\\n    }\\r\\n\\r\\n    function setPot(address _pot) external whenNotPaused nonReentrant requirePoolAdminOrOwner {\\r\\n        GenericLogic.setPot(_poolStorage, _pot);\\r\\n        registry.getSecuritizationManager().registerPot(_pot);\\r\\n    }\\r\\n\\r\\n    /// @notice sets debt ceiling value\\r\\n    function setDebtCeiling(uint256 _debtCeiling) public whenNotPaused requirePoolAdminOrOwner {\\r\\n        _poolStorage.debtCeiling = _debtCeiling;\\r\\n        emit UpdateDebtCeiling(_debtCeiling);\\r\\n    }\\r\\n\\r\\n    /// @notice sets mint first loss value\\r\\n    function setMinFirstLossCushion(uint32 _minFirstLossCushion) public whenNotPaused requirePoolAdminOrOwner {\\r\\n        require(\\r\\n            _minFirstLossCushion <= 100 * RATE_SCALING_FACTOR,\\r\\n            'SecuritizationPool: minFirstLossCushion is greater than 100'\\r\\n        );\\r\\n\\r\\n        _poolStorage.minFirstLossCushion = _minFirstLossCushion;\\r\\n        emit UpdateMintFirstLoss(_minFirstLossCushion);\\r\\n    }\\r\\n\\r\\n    function pot() external view returns (address) {\\r\\n        return _poolStorage.pot;\\r\\n    }\\r\\n\\r\\n    /// @dev trigger update reserve when buy note token action happens\\r\\n    function increaseCapitalReserve(uint256 currencyAmount) external whenNotPaused {\\r\\n        require(\\r\\n            _msgSender() == address(registry.getEpochExecutor()),\\r\\n            // _msgSender() == address(registry.getNoteTokenVault()),\\r\\n            'SecuritizationPool: Caller must be EpochExecutor'\\r\\n        );\\r\\n        GenericLogic.increaseCapitalReserve(_poolStorage, currencyAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev trigger update reserve\\r\\n    function decreaseIncomeReserve(uint256 currencyAmount) external whenNotPaused {\\r\\n        require(\\r\\n            _msgSender() == address(registry.getEpochExecutor()),\\r\\n            // _msgSender() == address(registry.getNoteTokenVault()),\\r\\n            'SecuritizationPool: Caller must be EpochExecutor'\\r\\n        );\\r\\n        GenericLogic.decreaseIncomeReserve(_poolStorage, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function decreaseCapitalReserve(uint256 currencyAmount) external whenNotPaused {\\r\\n        require(\\r\\n            _msgSender() == address(registry.getEpochExecutor()),\\r\\n            // _msgSender() == address(registry.getNoteTokenVault())\\r\\n            'SecuritizationPool: Caller must be EpochExecutor '\\r\\n        );\\r\\n        GenericLogic.decreaseCapitalReserve(_poolStorage, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function sotToken() public view returns (address) {\\r\\n        return registry.getSeniorTokenManager().getTokenAddress(address(this));\\r\\n    }\\r\\n\\r\\n    function jotToken() public view returns (address) {\\r\\n        return registry.getJuniorTokenManager().getTokenAddress(address(this));\\r\\n    }\\r\\n\\r\\n    function underlyingCurrency() external view returns (address) {\\r\\n        return _poolStorage.underlyingCurrency;\\r\\n    }\\r\\n\\r\\n    function paidPrincipalAmountSOT() external view returns (uint256) {\\r\\n        return _poolStorage.paidPrincipalAmountSOT;\\r\\n    }\\r\\n\\r\\n    function reserve() external view returns (uint256) {\\r\\n        return GenericLogic.reserve(_poolStorage);\\r\\n    }\\r\\n\\r\\n    function debtCeiling() external view returns (uint256) {\\r\\n        return _poolStorage.debtCeiling;\\r\\n    }\\r\\n\\r\\n    // Annually, support 4 decimals num\\r\\n    function interestRateSOT() external view returns (uint256) {\\r\\n        return _poolStorage.interestRateSOT;\\r\\n    }\\r\\n\\r\\n    function setInterestRateSOT(uint32 _newRate) external {\\r\\n        registry.requireSecuritizationManager(_msgSender());\\r\\n        _poolStorage.interestRateSOT = _newRate;\\r\\n        emit UpdateInterestRateSot(_newRate);\\r\\n    }\\r\\n\\r\\n    function minFirstLossCushion() external view returns (uint32) {\\r\\n        return _poolStorage.minFirstLossCushion;\\r\\n    }\\r\\n\\r\\n    // Total $ (cUSD) paid for Asset repayment - repayInBatch\\r\\n    function totalAssetRepaidCurrency() external view returns (uint256) {\\r\\n        return _poolStorage.totalAssetRepaidCurrency;\\r\\n    }\\r\\n\\r\\n    function injectNoteToken() external whenNotPaused {\\r\\n        registry.requireSecuritizationManager(_msgSender());\\r\\n        (address sotAddress, address jotAddress) = registry.getEpochExecutor().getNoteTokenAddress(address(this));\\r\\n        _poolStorage.sotToken = sotAddress;\\r\\n        _poolStorage.jotToken = jotAddress;\\r\\n    }\\r\\n\\r\\n    /// @dev trigger update asset value repaid\\r\\n    function increaseTotalAssetRepaidCurrency(uint256 amount) external whenNotPaused {\\r\\n        registry.requireLoanKernel(_msgSender());\\r\\n        _poolStorage.totalAssetRepaidCurrency = _poolStorage.totalAssetRepaidCurrency + amount;\\r\\n    }\\r\\n\\r\\n    /// @dev Disburses a specified amount of currency to the given user.\\r\\n    /// @param usr The address of the user to receive the currency.\\r\\n    /// @param currencyAmount The amount of currency to disburse.\\r\\n    function disburse(address usr, uint256 currencyAmount) external whenNotPaused {\\r\\n        require(\\r\\n            _msgSender() == address(registry.getSeniorTokenManager()) ||\\r\\n                _msgSender() == address(registry.getJuniorTokenManager()),\\r\\n            'SecuritizationPool: Caller must be NoteTokenManager'\\r\\n        );\\r\\n        GenericLogic.disburse(_poolStorage, usr, currencyAmount);\\r\\n    }\\r\\n\\r\\n    function openingBlockTimestamp() external view returns (uint64) {\\r\\n        return _poolStorage.openingBlockTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice allows the originator to withdraw from reserve\\r\\n    function withdraw(address to, uint256 amount) external whenNotPaused {\\r\\n        registry.requireLoanKernel(_msgSender());\\r\\n        require(hasRole(ORIGINATOR_ROLE, to), 'SecuritizationPool: Only Originator can drawdown');\\r\\n        // require(!registry.getNoteTokenVault().redeemDisabled(address(this)), 'SecuritizationPool: withdraw paused');\\r\\n        GenericLogic.withdraw(_poolStorage, to, amount);\\r\\n    }\\r\\n\\r\\n    function validatorRequired() external view returns (bool) {\\r\\n        return _poolStorage.validatorRequired;\\r\\n    }\\r\\n\\r\\n    /*==================== REBASE ====================*/\\r\\n    /// @notice rebase the debt and balance of the senior tranche according to\\r\\n    /// the current ratio between senior and junior\\r\\n    function rebase() public {\\r\\n        RebaseLogic.rebase(_poolStorage, GenericLogic.currentNAV(_poolStorage), GenericLogic.reserve(_poolStorage));\\r\\n    }\\r\\n\\r\\n    /// @notice changes the senior asset value based on new supply or redeems\\r\\n    /// @param _seniorSupply senior supply amount\\r\\n    /// @param _seniorRedeem senior redeem amount\\r\\n    function changeSeniorAsset(uint256 _seniorSupply, uint256 _seniorRedeem) external {\\r\\n        require(\\r\\n            _msgSender() == address(registry.getSecuritizationManager()) ||\\r\\n                _msgSender() == address(registry.getEpochExecutor()),\\r\\n            'SecuritizationPool: Caller must be SecuritizationManager or EpochExecutor'\\r\\n        );\\r\\n        RebaseLogic.changeSeniorAsset(\\r\\n            _poolStorage,\\r\\n            GenericLogic.currentNAV(_poolStorage),\\r\\n            GenericLogic.reserve(_poolStorage),\\r\\n            _seniorSupply,\\r\\n            _seniorRedeem\\r\\n        );\\r\\n\\r\\n        if (_seniorSupply > 0) require(isMinFirstLossValid(), 'Pool: Exceeds MinFirstLoss');\\r\\n    }\\r\\n\\r\\n    function seniorDebtAndBalance() external view returns (uint256, uint256) {\\r\\n        return (RebaseLogic.seniorDebt(_poolStorage), _poolStorage.seniorBalance);\\r\\n    }\\r\\n\\r\\n    function calcTokenPrices() public view returns (uint256 juniorTokenPrice, uint256 seniorTokenPrice) {\\r\\n        address jotTokenAddress = jotToken();\\r\\n        address sotTokenAddress = sotToken();\\r\\n        uint256 noteTokenDecimal = (10 ** INoteToken(sotTokenAddress).decimals());\\r\\n        (uint256 _juniorTokenPrice, uint256 _seniorTokenPrice) = RebaseLogic.calcTokenPrices(\\r\\n            GenericLogic.currentNAV(_poolStorage),\\r\\n            GenericLogic.reserve(_poolStorage),\\r\\n            RebaseLogic.seniorDebt(_poolStorage),\\r\\n            _poolStorage.seniorBalance,\\r\\n            INoteToken(jotTokenAddress).totalSupply(),\\r\\n            INoteToken(sotTokenAddress).totalSupply()\\r\\n        );\\r\\n        return ((_juniorTokenPrice * noteTokenDecimal) / ONE, (_seniorTokenPrice * noteTokenDecimal) / ONE);\\r\\n    }\\r\\n\\r\\n    function calcJuniorRatio() public view returns (uint256 juniorRatio) {\\r\\n        return\\r\\n            RebaseLogic.calcJuniorRatio(\\r\\n                GenericLogic.currentNAV(_poolStorage),\\r\\n                GenericLogic.reserve(_poolStorage),\\r\\n                RebaseLogic.seniorDebt(_poolStorage),\\r\\n                _poolStorage.seniorBalance\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function isMinFirstLossValid() public view returns (bool) {\\r\\n        return _poolStorage.minFirstLossCushion <= calcJuniorRatio();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa548991f90f48b4c04f5f3ef66d73a14a8870a912f1bfac88dffb8fd20cadc23\",\"license\":\"AGPL-3.0-only\"},\"contracts/protocol/pool/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\nimport {DataTypes} from '../../libraries/DataTypes.sol';\\r\\ncontract PoolStorage {\\r\\n    DataTypes.Storage internal _poolStorage;\\r\\n}\\r\\n\",\"keccak256\":\"0x78dcc96d24767ee3e44712655900ad2390e421114326f40d50d6253e44df4716\",\"license\":\"AGPL-3.0-only\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledBase} from '../base/UntangledBase.sol';\\r\\nimport {Configuration} from '../libraries/Configuration.sol';\\r\\n\\r\\n/**\\r\\n * @title Registry\\r\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\r\\n *  for all other contracts to access it. These config vars\\r\\n *  are enumerated in the `Configuration` library, and can only be changed by admins of the protocol.\\r\\n * @author Untangled Team\\r\\n */\\r\\ncontract Registry is UntangledBase {\\r\\n    mapping(uint8 => address) public contractAddresses;\\r\\n\\r\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __UntangledBase__init(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\r\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\r\\n        contractAddresses[addressIndex] = newAddress;\\r\\n    }\\r\\n\\r\\n    function getAddress(uint8 index) public view returns (address) {\\r\\n        return contractAddresses[index];\\r\\n    }\\r\\n\\r\\n    function setSecuritizationManager(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPool(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setNoteTokenFactory(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSeniorTokenManager(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SENIOR_TOKEN_MANAGER), newAddress);\\r\\n    }\\r\\n\\r\\n    function setJuniorTokenManager(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.JUNIOR_TOKEN_MANAGER), newAddress);\\r\\n    }\\r\\n\\r\\n    function setEpochExecutor(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.EPOCH_EXECUTOR), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanAssetToken(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\r\\n    }\\r\\n\\r\\n    function setSecuritizationPoolValueService(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\r\\n    }\\r\\n\\r\\n    function setLoanKernel(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\r\\n    }\\r\\n\\r\\n    function setGo(address newAddress) public onlyAdmin whenNotPaused {\\r\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.GO), newAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb1de71b6c30868b4dabee1dae73b50d60c2c34f64236c77e1e7dac996dd01244\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/LATValidator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {EIP712Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol';\\r\\nimport {ECDSAUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\r\\nimport {SignatureCheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol';\\r\\nimport {ERC165CheckerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol';\\r\\nimport {IPool} from '../../interfaces/IPool.sol';\\r\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\r\\nimport {IERC5008} from '../../interfaces/IERC5008.sol';\\r\\nimport {DataTypes} from '../../libraries/DataTypes.sol';\\r\\n\\r\\nabstract contract LATValidator is IERC5008, EIP712Upgradeable {\\r\\n    using SignatureCheckerUpgradeable for address;\\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n    using ERC165CheckerUpgradeable for address;\\r\\n\\r\\n    bytes32 internal constant LAT_TYPEHASH =\\r\\n        keccak256('LoanAssetToken(uint256[] tokenIds,uint256[] nonces,address validator)');\\r\\n\\r\\n    mapping(uint256 => uint256) internal _nonces;\\r\\n\\r\\n    modifier validateCreditor(address creditor, DataTypes.LoanAssetInfo calldata info) {\\r\\n        if (IPool(creditor).validatorRequired()) {\\r\\n            _checkNonceValid(info);\\r\\n\\r\\n            require(_checkValidator(info), 'LATValidator: invalid validator signature');\\r\\n            require(isValidator(creditor, info.validator), 'LATValidator: invalid validator');\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requireValidator(DataTypes.LoanAssetInfo calldata info) {\\r\\n        require(_checkValidator(info), 'LATValidator: invalid validator signature');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier requireNonceValid(DataTypes.LoanAssetInfo calldata info) {\\r\\n        _checkNonceValid(info);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _checkNonceValid(DataTypes.LoanAssetInfo calldata info) internal {\\r\\n        for (uint256 i = 0; i < info.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\r\\n            require(_nonces[info.tokenIds[i]] == info.nonces[i], 'LATValidator: invalid nonce');\\r\\n            unchecked {\\r\\n                _nonces[info.tokenIds[i]] = _nonces[info.tokenIds[i]] + 1;\\r\\n            }\\r\\n\\r\\n            emit NonceChanged(info.tokenIds[i], _nonces[info.tokenIds[i]]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function __LATValidator_init() internal onlyInitializing {\\r\\n        __EIP712_init_unchained('UntangledLoanAssetToken', '0.0.1');\\r\\n        __LATValidator_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __LATValidator_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n    function isValidator(address pool, address sender) public view virtual returns (bool);\\r\\n\\r\\n    function nonce(uint256 tokenId) external view override returns (uint256) {\\r\\n        return _nonces[tokenId];\\r\\n    }\\r\\n\\r\\n    function _checkValidator(DataTypes.LoanAssetInfo calldata latInfo) internal view returns (bool) {\\r\\n        bytes32 digest = _hashTypedDataV4(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    LAT_TYPEHASH,\\r\\n                    keccak256(abi.encodePacked(latInfo.tokenIds)),\\r\\n                    keccak256(abi.encodePacked(latInfo.nonces)),\\r\\n                    latInfo.validator\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return latInfo.validator.isValidSignatureNow(digest, latInfo.validateSignature);\\r\\n    }\\r\\n\\r\\n    function domainSeparatorV4() external view returns (bytes32) {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xa5ddb95b18e2f33024ae50af7de7612e64a50acdeb3f162f30a36dd7d1c8d201\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/LoanAssetToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {UntangledERC721} from './UntangledERC721.sol';\\r\\nimport {ConfigHelper} from '../../libraries/ConfigHelper.sol';\\r\\nimport {LATValidator} from './LATValidator.sol';\\r\\nimport {Registry} from '../../storage/Registry.sol';\\r\\nimport {DataTypes, VALIDATOR_ROLE} from '../../libraries/DataTypes.sol';\\r\\nimport {UntangledMath} from '../../libraries/UntangledMath.sol';\\r\\nimport {IAccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\r\\n\\r\\n/**\\r\\n * LoanAssetToken: The representative for ownership of a Loan\\r\\n */\\r\\ncontract LoanAssetToken is UntangledERC721, LATValidator {\\r\\n    using ConfigHelper for Registry;\\r\\n\\r\\n    /** CONSTRUCTOR */\\r\\n    function initialize(\\r\\n        Registry _registry,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) public initializer {\\r\\n        __UntangledERC721__init(name, symbol, baseTokenURI);\\r\\n        __LATValidator_init();\\r\\n\\r\\n        registry = _registry;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n        require(\\r\\n            address(registry.getSecuritizationManager()) != address(0x0),\\r\\n            'SECURITIZATION_MANAGER is zero address.'\\r\\n        );\\r\\n\\r\\n        require(address(registry.getLoanKernel()) != address(0x0), 'LOAN_KERNEL is zero address.');\\r\\n\\r\\n        _setupRole(MINTER_ROLE, address(registry.getLoanKernel()));\\r\\n        _revokeRole(MINTER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address creditor,\\r\\n        DataTypes.LoanAssetInfo calldata latInfo\\r\\n    ) public onlyRole(MINTER_ROLE) validateCreditor(creditor, latInfo) {\\r\\n        for (uint i = 0; i < latInfo.tokenIds.length; i = UntangledMath.uncheckedInc(i)) {\\r\\n            _safeMint(creditor, latInfo.tokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidator(address pool, address sender) public view virtual override returns (bool) {\\r\\n        return IAccessControlUpgradeable(pool).hasRole(VALIDATOR_ROLE, sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe4622adca4ac656e7f3eb76ec35b333bae329165a811e65e307bdeaa73f232ce\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/ERC721/UntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '../../storage/Registry.sol';\\r\\n\\r\\nabstract contract UntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\\r\\n    Registry public registry;\\r\\n\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    function __UntangledERC721__init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) internal onlyInitializing {\\r\\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\\r\\n    }\\r\\n\\r\\n    function __UntangledERC721__init_unchained(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) internal onlyInitializing {\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\r\\n        _mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseTokenURI) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        baseURI,\\r\\n                        Strings.toHexString(tokenId),\\r\\n                        '?chain_id=',\\r\\n                        Strings.toString(block.chainid)\\r\\n                    )\\r\\n                )\\r\\n                : '';\\r\\n    }\\r\\n\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x2a42952eb0e8a31848c24a0c4ff8221007b2f07ab8054bb102540717c0c5441e\",\"license\":\"AGPL-3.0-only\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a5e80620000216000396000f3fe608060405234801561001057600080fd5b50600436106104545760003560e01c80636b70f71d11610241578063c3d2129d1161013b578063e3178bc4116100c3578063ed34889511610087578063ed3488951461098d578063f3fef3a3146109a0578063f70a726e146109b3578063fa3908b1146109c6578063febd6018146109fd57600080fd5b8063e3178bc414610941578063e3adb7f014610954578063e681542d14610967578063e6c0e6d51461097a578063e87ac8431461098257600080fd5b8063cee7b6a11161010a578063cee7b6a1146108f8578063d1f5789414610900578063d547741f14610913578063dec2858714610926578063e1c84ea41461093957600080fd5b8063c3d2129d146108b4578063ca15c873146108d5578063cd3293de146108e8578063ce8fcab1146108f057600080fd5b80639b3e2291116101c9578063af14052c1161018d578063af14052c14610876578063b1511cc91461087e578063b3c6501514610891578063b6db75a014610899578063ba81a936146108a157600080fd5b80639b3e229114610838578063a217fddf1461084b578063a5688a9014610853578063a6c595471461085b578063ade0ea6d1461086e57600080fd5b80638456cb59116102105780638456cb59146107df5780638fd6b71e146107e75780639010d07c146107ff578063901617051461081257806391d148541461082557600080fd5b80636b70f71d1461079d57806373ffe3c7146107a55780637b103999146107b85780637f3bd56e146107cc57600080fd5b80632f2ff15d11610352578063477035d1116102da578063586fd8a11161029e578063586fd8a1146107295780635c975abb1461074a5780636421cede14610755578063644b4ead1461076a578063659306461461078a57600080fd5b8063477035d1146106c157806349110ac4146106ed5780634ba2363a146106f557806353069df61461070d578063565a2e2c1461071857600080fd5b80633bf4045f116103215780633bf4045f146106675780633f12dc101461067a5780633f4ba83a146106a65780634020c8d1146106ae57806340301264146106b957600080fd5b80632f2ff15d1461061b578063339443571461062e57806336568abe146106415780633aa29d7a1461065457600080fd5b8063185acf74116103e05780632b71b450116103a45780632b71b450146105db5780632bb14ff0146105e35780632bcc3682146105eb5780632cbf3da0146105f35780632cc3ce80146105fb57600080fd5b8063185acf741461056c5780631bf51b701461057f5780631e0029c8146105925780631e4e0091146105a5578063248a9ca3146105b857600080fd5b80630b7792f1116104275780630b7792f1146104ec5780630bc6bffc146104f45780630e9bf4e414610519578063150b7a021461053657806317a7ad1d1461056257600080fd5b806301ffc9a71461045957806304a3f19c14610481578063065dad8f1461049357806306823e8c146104c3575b600080fd5b61046c6104673660046145e6565b610a05565b60405190151581526020015b60405180910390f35b6009545b604051908152602001610478565b6104856104a1366004614610565b600090815260196020526040902054600160801b90046001600160801b031690565b6104856104d1366004614610565b6000908152601960205260409020546001600160801b031690565b600254610485565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610478565b610521610a30565b60408051928352602083019190915201610478565b61054961054436600461472c565b610cfd565b6040516001600160e01b03199091168152602001610478565b61056a610e7b565b005b61056a61057a366004614610565b610f4f565b61056a61058d3660046147db565b611043565b6104856105a0366004614610565b6110e8565b61056a6105b3366004614874565b6110f5565b6104856105c6366004614610565b600090815260f3602052604090206001015490565b61050161110f565b601054610485565b600154610485565b610485611197565b61060e610609366004614610565b6111a3565b60405161047891906148d0565b61056a6106293660046149df565b6112dd565b61048561063c366004614a0f565b611302565b61056a61064f3660046149df565b6113ae565b61056a610662366004614874565b61142c565b61056a6106753660046147db565b6115f0565b610485610688366004614610565b6000908152601960205260409020600101546001600160801b031690565b61056a6116d7565b60005460ff1661046c565b600854610485565b600e5464010000000090046001600160401b03166040516001600160401b039091168152602001610478565b61046c611705565b600e54600160601b90046001600160a01b0316610501565b602554602654610521565b600a546001600160a01b0316610501565b61073c610737366004614aa8565b61171f565b604051610478929190614b4e565b605d5460ff1661046c565b61075d611b77565b6040516104789190614b73565b61077d610778366004614610565b611bdc565b6040516104789190614bc0565b61056a610798366004614cba565b611d0d565b610521611d65565b61056a6107b3366004614ce9565b611dea565b61018954610501906001600160a01b031681565b61056a6107da366004614d06565b611f1b565b61056a61204a565b600e5460405163ffffffff9091168152602001610478565b61050161080d366004614874565b612076565b61056a610820366004614610565b612096565b61046c6108333660046149df565b6120bb565b61056a610846366004614610565b6120e6565b610485600081565b61048561215b565b61056a6108693660046147db565b612274565b600f54610485565b61056a612311565b61056a61088c366004614610565b61239f565b61048561242e565b61046c612444565b61056a6108af366004614ce9565b61246f565b6108c76108c2366004614e60565b6124b4565b604051610478929190614f18565b6104856108e3366004614610565b612545565b61048561255d565b61056a612569565b601154610485565b61056a61090e366004614f31565b612756565b61056a6109213660046149df565b612b13565b61056a610934366004614f76565b612b38565b601254610485565b61048561094f366004614610565b612c14565b61056a610962366004614874565b612c21565b61056a610975366004614610565b612c7f565b601d54610485565b600c54600d54610521565b61056a61099b366004614cba565b612cd8565b61056a6109ae366004614d06565b612e2a565b61056a6109c1366004614610565b612f18565b6109d96109d4366004614610565b612fa5565b6040805182516001600160a01b031681526020928301519281019290925201610478565b610501613006565b60006001600160e01b03198216635a05180f60e01b1480610a2a5750610a2a8261301f565b92915050565b6000806000610a3d61110f565b90506000610a49613006565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190614fce565b610aba90600a6150e1565b905060008073786EC98A0f46782fc4065Ff8D47Fd52DD20dF2466328774cad610ae36000613054565b610aed600061307c565b604051639a1140b960e01b81526000600482015273786EC98A0f46782fc4065Ff8D47Fd52DD20dF24690639a1140b990602401602060405180830381865af4158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190614fce565b6000602801548a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190614fce565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190614fce565b6040516001600160e01b031960e089901b1681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c4016040805180830381865af4158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca991906150ed565b90925090506b033b2e3c9fd0803ce8000000610cc58484615111565b610ccf9190615128565b6b033b2e3c9fd0803ce8000000610ce68584615111565b610cf09190615128565b9650965050505050509091565b610189546000903390610d18906001600160a01b0316613090565b6001600160a01b0316816001600160a01b031614610d9b5760405162461bcd60e51b815260206004820152603560248201527f53656375726974697a6174696f6e506f6f6c3a204d75737420626520746f6b656044820152741b881a5cdcdd595908189e48155b9d185b99db1959605a1b60648201526084015b60405180910390fd5b6040805180820182526001600160a01b03838116808352602080840189815260028054600181018255600082905295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace96820296870180546001600160a01b0319169190961617909455517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf909401939093558351908152918201879052917ff1c19e8856063adce43b5f307c6ac9d0af46fd0787c590550c51d7cf02d2e5f4910160405180910390a150630a85bd0160e11b9150505b949350505050565b610e8361309d565b610e9b335b610189546001600160a01b0316906130e3565b610189546000908190610eb6906001600160a01b0316613158565b6040516304a2828b60e41b81523060048201526001600160a01b039190911690634a2828b0906024016040805180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f919061514a565b600580546001600160a01b039384166001600160a01b031991821617909155600680549290931691161790555050565b610f5761309d565b61018954610f6d906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614610fd55760405162461bcd60e51b81526020600482015260316024820152600080516020615a09833981519152604482015270031329022b837b1b422bc32b1baba37b91607d1b6064820152608401610d92565b6040516338ca404b60e21b8152600060048201526024810182905273739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063e329012c906044015b60006040518083038186803b15801561102857600080fd5b505af415801561103c573d6000803e3d6000fd5b5050505050565b61104b61309d565b6000805160206159e983398151915261106381613165565b6040516318d6411560e31b815273Fb94240006b52111570eB6C28Bb195f9b5908c999063c6b208a8906110a7906000908b908b908b908b908b908b906004016151b4565b60006040518083038186803b1580156110bf57600080fd5b505af41580156110d3573d6000803e3d6000fd5b505050506110df612311565b50505050505050565b6000610a2a60008361316f565b600061110081613165565b61110a8383613272565b505050565b61018954600090611128906001600160a01b03166132bd565b60405163b8d7b66960e01b81523060048201526001600160a01b03919091169063b8d7b66990602401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190615204565b905090565b60006111926000613054565b6111ab614563565b60008281526019602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff169081111561125457611254614896565b600181111561126557611265614896565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff1660058111156112ae576112ae614896565b60058111156112bf576112bf614896565b8152600d8201546020820152600e9091015460409091015292915050565b600082815260f360205260409020600101546112f881613165565b61110a83836132ca565b600061130c61309d565b611324335b610189546001600160a01b0316906132ed565b604051637f337ae160e11b815273Fb94240006b52111570eB6C28Bb195f9b5908c999063fe66f5c290611364906000908990899089908990600401615253565b602060405180830381865af4158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190614fce565b95945050505050565b6001600160a01b038116331461141e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d92565b6114288282613356565b5050565b61018954611442906001600160a01b0316613379565b6001600160a01b0316336001600160a01b03161480611487575061018954611472906001600160a01b0316613158565b6001600160a01b0316336001600160a01b0316145b6114f95760405162461bcd60e51b81526020600482015260496024820152600080516020615a0983398151915260448201527f62652053656375726974697a6174696f6e4d616e61676572206f722045706f636064820152683422bc32b1baba37b960b91b608482015260a401610d92565b73786EC98A0f46782fc4065Ff8D47Fd52DD20dF246632fb86262600061151f6000613054565b611529600061307c565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606481018590526084810184905260a40160006040518083038186803b15801561157b57600080fd5b505af415801561158f573d6000803e3d6000fd5b505050506000821115611428576115a4611705565b6114285760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c3a2045786365656473204d696e46697273744c6f73730000000000006044820152606401610d92565b6115f861309d565b611600613386565b6116186000805160206159e9833981519152336120bb565b8061163657506116366000805160206159c9833981519152336120bb565b6116525760405162461bcd60e51b8152600401610d929061532e565b60405163563bc1a160e01b815273Fb94240006b52111570eB6C28Bb195f9b5908c999063563bc1a190611695906004908a908a908a908a908a908a9087016153b1565b60006040518083038186803b1580156116ad57600080fd5b505af41580156116c1573d6000803e3d6000fd5b505050506116cf6001608f55565b505050505050565b6116df612444565b6116fb5760405162461bcd60e51b8152600401610d92906153f3565b6117036133e6565b565b600061170f61215b565b600e5463ffffffff161115919050565b610189546060908190339061173c906001600160a01b0316613438565b6001600160a01b0316146117835760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606401610d92565b848381146117c45760405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840d8cadccee8d60931b6044820152606401610d92565b6000816001600160401b038111156117de576117de61464e565b604051908082528060200260200182016040528015611807578160200160208202803683370190505b50905060005b828110156118bf5760008061186360008c8c8681811061182f5761182f615450565b9050602002013560009081526015820160209081526040808320548352601390930190522060018101546004909101549091565b9150915061188c60008c8c8681811061187e5761187e615450565b905060200201358484613445565b84848151811061189e5761189e615450565b602002602001018181525050505080806118b790615466565b91505061180d565b5060008073dFFd058059e26fF1a76be0cf6371A008C108A0e0632f3e0ce060008c8c8c8c6040518663ffffffff1660e01b815260040161190395949392919061547f565b600060405180830381865af4158015611920573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119489190810190615513565b9150915060008060005b86811015611a3957600086828151811061196e5761196e615450565b602002602001015185838151811061198857611988615450565b602002602001015161199a919061556c565b9050808683815181106119af576119af615450565b6020026020010151116119e8578582815181106119ce576119ce615450565b6020026020010151846119e1919061557f565b9350611a26565b6119f2818561557f565b935080868381518110611a0757611a07615450565b6020026020010151611a19919061556c565b611a23908461557f565b92505b5080611a3181615466565b915050611952565b506000611a496127106064615111565b600b54611a569085615111565b611a609190615128565b600a54604051630837ca3160e11b8152600060048201526001600160a01b0390911660248201526044810182905290915073739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063106f94629060640160006040518083038186803b158015611ac857600080fd5b505af4158015611adc573d6000803e3d6000fd5b505050508083611aec919061556c565b60088054600090611afe90849061557f565b909155505060098054839190600090611b1890849061557f565b909155505060408051308152602081018590529081018390524260608201527f2fe77b1c99aca6b022b8efc6e3e8dd1b48b30748709339b65c50ef3263443e099060800160405180910390a150929b919a509098505050505050505050565b60606000600301805480602002602001604051908101604052809291908181526020018280548015611bd257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bb4575b5050505050905090565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526001805483908110611c4957611c49615450565b600091825260209182902060408051610160810182526002909302909101805463ffffffff808216855264010000000080830482169686019690965268010000000000000000808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e08501526001909101548082166101008501529384048116610120840152920490911661014082015292915050565b611d1561309d565b611d1e33610e88565b60405163af2f761760e01b8152600060048201526001600160a01b038216602482015273Fb94240006b52111570eB6C28Bb195f9b5908c999063af2f761790604401611010565b604051639a1140b960e01b815260006004820181905290819073786EC98A0f46782fc4065Ff8D47Fd52DD20dF24690639a1140b990602401602060405180830381865af4158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde9190614fce565b60285490939092509050565b611df261309d565b611e0a6000805160206159e9833981519152336120bb565b80611e285750611e286000805160206159c9833981519152336120bb565b611e445760405162461bcd60e51b8152600401610d929061532e565b611e516127106064615111565b8163ffffffff161115611ecc5760405162461bcd60e51b815260206004820152603b60248201527f53656375726974697a6174696f6e506f6f6c3a206d696e46697273744c6f737360448201527f43757368696f6e2069732067726561746572207468616e2031303000000000006064820152608401610d92565b600e805463ffffffff191663ffffffff83169081179091556040519081527f091193ea2a1d71a11f3479abe1d30b1ba8fecf8b18e1c728e3ee787de54d0399906020015b60405180910390a150565b611f2361309d565b61018954611f39906001600160a01b0316613495565b6001600160a01b0316336001600160a01b03161480611f7e575061018954611f69906001600160a01b03166132bd565b6001600160a01b0316336001600160a01b0316145b611fd45760405162461bcd60e51b81526020600482015260336024820152600080516020615a098339815191526044820152723132902737ba32aa37b5b2b726b0b730b3b2b960691b6064820152608401610d92565b604051630837ca3160e11b8152600060048201526001600160a01b03831660248201526044810182905273739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063106f9462906064015b60006040518083038186803b15801561203657600080fd5b505af41580156116cf573d6000803e3d6000fd5b612052612444565b61206e5760405162461bcd60e51b8152600401610d92906153f3565b6117036134a2565b60008281526101256020526040812061208f90836134df565b9392505050565b61209e61309d565b6120a733611311565b6011546120b590829061557f565b60115550565b600091825260f3602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051632915c6ef60e21b8152600060048201526024810182905273dFFd058059e26fF1a76be0cf6371A008C108A0e09063a4571bbc9060440160006040518083038186803b15801561213857600080fd5b505af415801561214c573d6000803e3d6000fd5b50505050612158612311565b50565b600073786EC98A0f46782fc4065Ff8D47Fd52DD20dF24663937e8cbf6121816000613054565b61218b600061307c565b604051639a1140b960e01b81526000600482015273786EC98A0f46782fc4065Ff8D47Fd52DD20dF24690639a1140b990602401602060405180830381865af41580156121db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ff9190614fce565b60285460405160e086901b6001600160e01b03191681526004810194909452602484019290925260448301526064820152608401602060405180830381865af4158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190614fce565b61227c61309d565b6000805160206159c983398151915261229481613165565b60405163d37cc71360e01b815273Fb94240006b52111570eB6C28Bb195f9b5908c999063d37cc713906122d8906002908b908b908b908b908b908b90600401615592565b60006040518083038186803b1580156122f057600080fd5b505af4158015612304573d6000803e3d6000fd5b5050505050505050505050565b73786EC98A0f46782fc4065Ff8D47Fd52DD20dF24663c1a5db1c60006123376000613054565b612341600061307c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160006040518083038186803b15801561238557600080fd5b505af4158015612399573d6000803e3d6000fd5b50505050565b6123a761309d565b6123bf6000805160206159e9833981519152336120bb565b806123dd57506123dd6000805160206159c9833981519152336120bb565b6123f95760405162461bcd60e51b8152600401610d929061532e565b60128190556040518181527f3fb30b6090e6989c6819119c2885012949e75471ed4ce5e80c9be541ea0e2f3f90602001611f10565b600061243c602a5460ff1690565b60ff16905090565b600061245e6000805160206159c9833981519152336120bb565b8061119257506111926000336120bb565b61247833610e88565b63ffffffff811660108190556040519081527fae7402a7c6591be272f2a698eff734559f48c90b946dc122fec30db4033aa30d90602001611f10565b6000606073Fb94240006b52111570eB6C28Bb195f9b5908c9963aa12d15f600086866040518463ffffffff1660e01b81526004016124f4939291906155d4565b600060405180830381865af4158015612511573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261253991908101906156bf565b915091505b9250929050565b600081815261012560205260408120610a2a906134eb565b6000611192600061307c565b61257233611311565b600061257c61215b565b9050600061258d6127106064615111565b60085461259b908490615111565b6125a59190615128565b90506000816000600801546125ba919061556c565b90506125c461110f565b6001600160a01b031663ef06fb73836040518263ffffffff1660e01b81526004016125f191815260200190565b600060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050508160006008016000828254612638919061556c565b909155506126469050613006565b6001600160a01b031663ef06fb73826040518263ffffffff1660e01b815260040161267391815260200190565b600060405180830381600087803b15801561268d57600080fd5b505af11580156126a1573d6000803e3d6000fd5b5050505080600060080160008282546126ba919061556c565b9091555073786EC98A0f46782fc4065Ff8D47Fd52DD20dF2469050632fb8626260006126e581613054565b6126ef600061307c565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152600060648201526084810184905260a4015b60006040518083038186803b15801561274257600080fd5b505af41580156110df573d6000803e3d6000fd5b602a54610100900460ff16158080156127765750602a54600160ff909116105b806127905750303b1580156127905750602a5460ff166001145b6127f35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d92565b602a805460ff19166001179055801561281657602a805461ff0019166101001790555b61281f336134f5565b6001600160a01b0383166128755760405162461bcd60e51b815260206004820181905260248201527f526567697374727920616464726573732063616e6e6f7420626520656d7074796044820152606401610d92565b61018980546001600160a01b0319166001600160a01b03851617905581516000906128a9906020908501810190850161570b565b60208101519091506001600160a01b03166128ff5760405162461bcd60e51b8152602060048201526016602482015275506f6f6c3a20496e76616c69642063757272656e637960501b6044820152606401610d92565b6020810151600780546001600160a01b0319166001600160a01b0390921691909117905560608101516000805460ff1916911515919091179055600e80546bffffffffffffffffffffffff1630600160601b02179055604081015161296390611dea565b805161296e9061239f565b602081015160405163095ea7b360e01b815230600482015260001960248201526001600160a01b039091169063095ea7b3906044016020604051808303816000875af11580156129c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e69190615784565b612a325760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a2043757272656e637920617070726f76616c206661696c656400006044820152606401610d92565b61018954612a48906001600160a01b0316613090565b610189546001600160a01b039182169163a22cb46591612a689116613438565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015612ab057600080fd5b505af1158015612ac4573d6000803e3d6000fd5b5050505050801561110a57602a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600082815260f36020526040902060010154612b2e81613165565b61110a8383613356565b612b4061309d565b612b48613386565b612b606000805160206159e9833981519152336120bb565b80612b7e5750612b7e6000805160206159c9833981519152336120bb565b612b9a5760405162461bcd60e51b8152600401610d929061532e565b604051639178a8a160e01b815273Fb94240006b52111570eB6C28Bb195f9b5908c9990639178a8a190612bda90600290889088908890889060040161579f565b60006040518083038186803b158015612bf257600080fd5b505af4158015612c06573d6000803e3d6000fd5b505050506123996001608f55565b6000610a2a60008361353d565b6000805160206159e9833981519152612c3981613165565b6040516356a5a29960e01b815260006004820152602481018490526044810183905273dFFd058059e26fF1a76be0cf6371A008C108A0e0906356a5a2999060640161272a565b612c8761309d565b61018954612c9d906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614612ccd5760405162461bcd60e51b8152600401610d92906157dd565b61215860008261356b565b612ce061309d565b612ce8613386565b612d006000805160206159e9833981519152336120bb565b80612d1e5750612d1e6000805160206159c9833981519152336120bb565b612d3a5760405162461bcd60e51b8152600401610d929061532e565b604051635cd35d6360e11b8152600060048201526001600160a01b038216602482015273739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063b9a6bac69060440160006040518083038186803b158015612d9457600080fd5b505af4158015612da8573d6000803e3d6000fd5b505061018954612dc392506001600160a01b03169050613379565b60405163dc90f9fd60e01b81526001600160a01b038381166004830152919091169063dc90f9fd90602401600060405180830381600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506121586001608f55565b612e3261309d565b612e3b33611311565b612e657f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e836120bb565b612eca5760405162461bcd60e51b815260206004820152603060248201527f53656375726974697a6174696f6e506f6f6c3a204f6e6c79204f726967696e6160448201526f3a37b91031b0b710323930bbb237bbb760811b6064820152608401610d92565b604051635d46333760e11b8152600060048201526001600160a01b03831660248201526044810182905273739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063ba8c666e9060640161201e565b612f2061309d565b61018954612f36906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614612f665760405162461bcd60e51b8152600401610d92906157dd565b604051637564542160e11b8152600060048201526024810182905273739c93545CAD9EE3202A524ef50ebfDaf452C8dF9063eac8a84290604401611010565b60408051808201909152600080825260208201526002805483908110612fcd57612fcd615450565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915292915050565b61018954600090611128906001600160a01b0316613495565b60006001600160e01b03198216637965db0b60e01b1480610a2a57506301ffc9a760e01b6001600160e01b0319831614610a2a565b600080600080613063856135be565b9250925092506113a58361307784846136c3565b6136c3565b6000610a2a826009015483600801546136c3565b6000610a2a826007613713565b605d5460ff16156117035760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d92565b6130ec82613379565b6001600160a01b0316816001600160a01b0316146114285760405162461bcd60e51b8152602060048201526024808201527f52656769737472793a204f6e6c792053656375726974697a6174696f6e4d616e60448201526330b3b2b960e11b6064820152608401610d92565b6000610a2a826005613713565b6121588133613798565b60008181526015830160209081526040808320548084526013860190925282206001810154600482015460059092015490919065ffffffffffff16421061321c5760008381526013870160205260409020600181015460028201546005909201546131e2929065ffffffffffff166137f1565b60008481526013880160205260409020600481015460038201546005909201549294506132199290919065ffffffffffff166137f1565b90505b8060000361324a576000858152601487016020526040902054613240908390613811565b9350505050610a2a565b6132408161326d848960140160008a815260200190815260200160002054613811565b613811565b600082815260f36020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610a2a826004613713565b6132d4828261381d565b60008281526101256020526040902061110a90826138a3565b6132f682613438565b6001600160a01b0316816001600160a01b0316146114285760405162461bcd60e51b815260206004820152601960248201527f52656769737472793a204f6e6c79204c6f616e4b65726e656c000000000000006044820152606401610d92565b61336082826138b8565b60008281526101256020526040902061110a908261391f565b6000610a2a826000613713565b6002608f54036133d85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d92565b6002608f55565b6001608f55565b6133ee613934565b605d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000610a2a826008613713565b60008160000361347257600084815260148601602052604090205461346b908490613811565b9050610e73565b61346b8261326d8588601401600089815260200190815260200160002054613811565b6000610a2a826003613713565b6134aa61309d565b605d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861341b3390565b600061208f838361397d565b6000610a2a825490565b602a54610100900460ff1661351c5760405162461bcd60e51b8152600401610d929061581b565b6135246139a7565b61352c6139da565b613534613a01565b61215881613a28565b60008060008061354d8686613af3565b9250925092506135618361307784846136c3565b9695505050505050565b6135798260090154826136c3565b600983018190556040805183815260208101929092527f918efcc3fbab932d4dd5f5d71315810f6d34460b2a009f613454f4a7b3e6f385910160405180910390a15050565b601f8101546021820154601d8301546020840154600093849384939192909190838503613600576000836135f18a613c5e565b965096509650505050506136bc565b60008061360c42613cd0565b9050825b81811015613680576000818152601b8c016020526040902054801561366b5761365c84613077836136578a6136458989613cec565b6b033b2e3c9fd0803ce8000000613d3c565b613dfa565b93506136688a826136c3565b99505b50613679816201518061557f565b9050613610565b5061369c61369687613657876136458689613cec565b83613e1d565b6136a6868a6136c3565b6136af8c613c5e565b9850985098505050505050505b9193909250565b6000826136d0838261557f565b9150811015610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610d92565b6000826001600160a01b031663bcaa0c5583600a81111561373657613736614896565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa158015613774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f9190615204565b6137a282826120bb565b611428576137af81613e39565b6137ba836020613e4b565b6040516020016137cb92919061588a565b60408051601f198184030181529082905262461bcd60e51b8252610d92916004016158ff565b60008142106138095761380684848442613fe6565b93505b509192915050565b600061208f8284613dfa565b61382782826120bb565b61142857600082815260f3602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561385f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061208f836001600160a01b038416613fff565b6138c282826120bb565b1561142857600082815260f3602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061208f836001600160a01b03841661404e565b605d5460ff166117035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d92565b600082600001828154811061399457613994615450565b9060005260206000200154905092915050565b602a54610100900460ff166139ce5760405162461bcd60e51b8152600401610d929061581b565b605d805460ff19169055565b602a54610100900460ff166133df5760405162461bcd60e51b8152600401610d929061581b565b602a54610100900460ff166117035760405162461bcd60e51b8152600401610d929061581b565b602a54610100900460ff16613a4f5760405162461bcd60e51b8152600401610d929061581b565b6001600160a01b038116613a605750335b613a6b600033614148565b613a836000805160206159c983398151915282614148565b613abb7f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e6000805160206159c9833981519152613272565b6121587f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989266000805160206159e9833981519152613272565b601d8201546000828152602284016020908152604080832054828701546023880190935290832054929384938493849391613b2e8a8a614152565b15613b86576000613b3f8b8b614185565b9050613b82613b4e8c8c61316f565b8c601c018381548110613b6357613b63615450565b60009182526020909120600290910201546001600160801b0316613dfa565b9550505b82600003613ba057600097509550929350613c5792505050565b600080613bac42613cd0565b60008c815260198e01602052604081205491925090613bda90600160801b90046001600160801b0316613cd0565b9050848110158015613beb57508181105b15613c225760008c815260198e0160205260409020546001600160801b0316613c1c816136578a6136458787613cec565b909a5092505b613c3d613c37876136578a613645878b613cec565b84613e1d565b613c47858c6136c3565b899a509a509a5050505050505050505b9250925092565b6000805b601c830154811015613cca57613cb682613077613ca18685613c926b033b2e3c9fd0803ce80000006103e8615111565b613c9c919061557f565b614304565b86601c018581548110613b6357613b63615450565b915080613cc281615466565b915050613c62565b50919050565b6000613cdf6201518083615128565b610a2a9062015180615111565b600082613cf9838261556c565b9150811115610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610d92565b6000838015613ddc57600184168015613d5757859250613d5b565b8392505b50600283046002850494505b8415613dd6578586028687820414613d7e57600080fd5b81810181811015613d8e57600080fd5b8590049650506001851615613dcb578583028387820414158715151615613db457600080fd5b81810181811015613dc457600080fd5b8590049350505b600285049450613d67565b50613df2565b838015613dec5760009250613df0565b8392505b505b509392505050565b60006b033b2e3c9fd0803ce8000000613e1384846143c4565b61208f9190615128565b600082821115613e2f57506000610a2a565b61208f8383613cec565b6060610a2a6001600160a01b03831660145b60606000613e5a836002615111565b613e6590600261557f565b6001600160401b03811115613e7c57613e7c61464e565b6040519080825280601f01601f191660200182016040528015613ea6576020820181803683370190505b509050600360fc1b81600081518110613ec157613ec1615450565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613ef057613ef0615450565b60200101906001600160f81b031916908160001a9053506000613f14846002615111565b613f1f90600161557f565b90505b6001811115613f97576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613f5357613f53615450565b1a60f81b828281518110613f6957613f69615450565b60200101906001600160f81b031916908160001a90535060049490941c93613f9081615932565b9050613f22565b50831561208f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d92565b60006113a5613ff985613645868661556c565b86613dfa565b600081815260018301602052604081205461404657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a2a565b506000610a2a565b6000818152600183016020526040812054801561413757600061407260018361556c565b85549091506000906140869060019061556c565b90508181146140eb5760008660000182815481106140a6576140a6615450565b90600052602060002001549050808760000184815481106140c9576140c9615450565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140fc576140fc615949565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a2a565b6000915050610a2a565b5092915050565b61142882826132ca565b600061416c6b033b2e3c9fd0803ce80000006103e8615111565b6000928352601593909301602052506040902054101590565b60008181526019830160205260408120548290600160801b90046001600160801b0316826141b242613cd0565b905060006141c08785614426565b90506000600182604001516141d5919061595f565b90506001600160801b036000805b601c8b01546001600160801b03821610156142ed5760008b601c01826001600160801b03168154811061421857614218615450565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c601c01836001600160801b03168154811061426757614267615450565b60009182526020909120600160029092020101546001600160801b03161480156142a35750826001600160801b0316816001600160801b031610155b80156142ce57506142b7816201518061597f565b6142ca906001600160801b03168961557f565b8710155b156142da578193508092505b50806142e5816159a2565b9150506141e3565b50506001600160801b031698975050505050505050565b600081815260138301602052604081206001810154600482015482546005909301549192909165ffffffffffff1642106143a457600085815260138701602052604090206001810154600282015460059092015461436a929065ffffffffffff166137f1565b60008681526013880160205260409020600481015460038201546005909201549295506143a19290919065ffffffffffff166137f1565b91505b816000036143b6576132408382613811565b6132408261326d8584613811565b60008115806143e8575082826143da8183615111565b92506143e69083615128565b145b610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610d92565b61442e614563565b600082815260198401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff16908111156144d9576144d9614896565b60018111156144ea576144ea614896565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff16600581111561453357614533614896565b600581111561454457614544614896565b8152600d8201546020820152600e909101546040909101529392505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a0820190815260200160008152602001600081525090565b6000602082840312156145f857600080fd5b81356001600160e01b03198116811461208f57600080fd5b60006020828403121561462257600080fd5b5035919050565b6001600160a01b038116811461215857600080fd5b803561464981614629565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156146875761468761464e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146b5576146b561464e565b604052919050565b600082601f8301126146ce57600080fd5b81356001600160401b038111156146e7576146e761464e565b6146fa601f8201601f191660200161468d565b81815284602083860101111561470f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561474257600080fd5b843561474d81614629565b9350602085013561475d81614629565b92506040850135915060608501356001600160401b0381111561477f57600080fd5b61478b878288016146bd565b91505092959194509250565b60008083601f8401126147a957600080fd5b5081356001600160401b038111156147c057600080fd5b6020830191508360208260051b850101111561253e57600080fd5b600080600080600080606087890312156147f457600080fd5b86356001600160401b038082111561480b57600080fd5b6148178a838b01614797565b9098509650602089013591508082111561483057600080fd5b61483c8a838b01614797565b9096509450604089013591508082111561485557600080fd5b5061486289828a01614797565b979a9699509497509295939492505050565b6000806040838503121561488757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600281106148bc576148bc614896565b9052565b600681106148bc576148bc614896565b81516001600160801b03168152610200810160208301516148fc60208401826001600160801b03169052565b50604083015161491760408401826001600160801b03169052565b50606083015161493260608401826001600160a01b03169052565b50608083015161494d60808401826001600160a01b03169052565b5060a083015160a083015260c083015160c083015260e083015160e08301526101008084015161497f828501826148ac565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a0808401516149c0828501826148c0565b50506101c083810151908301526101e092830151929091019190915290565b600080604083850312156149f257600080fd5b823591506020830135614a0481614629565b809150509250929050565b60008060008060408587031215614a2557600080fd5b84356001600160401b0380821115614a3c57600080fd5b614a4888838901614797565b90965094506020870135915080821115614a6157600080fd5b818701915087601f830112614a7557600080fd5b813581811115614a8457600080fd5b8860208260081b8501011115614a9957600080fd5b95989497505060200194505050565b60008060008060408587031215614abe57600080fd5b84356001600160401b0380821115614ad557600080fd5b614ae188838901614797565b90965094506020870135915080821115614afa57600080fd5b50614b0787828801614797565b95989497509550505050565b600081518084526020808501945080840160005b83811015614b4357815187529582019590820190600101614b27565b509495945050505050565b604081526000614b616040830185614b13565b82810360208401526113a58185614b13565b6020808252825182820181905260009190848201906040850190845b81811015614bb45783516001600160a01b031683529284019291840191600101614b8f565b50909695505050505050565b815163ffffffff16815261016081016020830151614be6602084018263ffffffff169052565b506040830151614bfe604084018263ffffffff169052565b506060830151614c16606084018263ffffffff169052565b506080830151614c2e608084018263ffffffff169052565b5060a0830151614c4660a084018263ffffffff169052565b5060c0830151614c5e60c084018263ffffffff169052565b5060e0830151614c7660e084018263ffffffff169052565b506101008381015163ffffffff81168483015250506101208381015163ffffffff81168483015250506101408381015163ffffffff8116848301525b505092915050565b600060208284031215614ccc57600080fd5b813561208f81614629565b63ffffffff8116811461215857600080fd5b600060208284031215614cfb57600080fd5b813561208f81614cd7565b60008060408385031215614d1957600080fd5b8235614d2481614629565b946020939093013593505050565b60006001600160401b03821115614d4b57614d4b61464e565b5060051b60200190565b803560ff8116811461464957600080fd5b80356002811061464957600080fd5b600082601f830112614d8657600080fd5b81356020614d9b614d9683614d32565b61468d565b82815260089290921b84018101918181019086841115614dba57600080fd5b8286015b84811015614e55576101008189031215614dd85760008081fd5b614de0614664565b8135614deb81614629565b8152614df882860161463e565b8186015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c0614e31818401614d55565b9082015260e0614e42838201614d66565b9082015283529183019161010001614dbe565b509695505050505050565b60008060408385031215614e7357600080fd5b82356001600160401b0380821115614e8a57600080fd5b818501915085601f830112614e9e57600080fd5b81356020614eae614d9683614d32565b82815260059290921b84018101918181019089841115614ecd57600080fd5b948201945b83861015614eeb57853582529482019490820190614ed2565b96505086013592505080821115614f0157600080fd5b50614f0e85828601614d75565b9150509250929050565b828152604060208201526000610e736040830184614b13565b60008060408385031215614f4457600080fd5b8235614f4f81614629565b915060208301356001600160401b03811115614f6a57600080fd5b614f0e858286016146bd565b60008060008060608587031215614f8c57600080fd5b8435614f9781614629565b93506020850135614fa781614629565b925060408501356001600160401b03811115614fc257600080fd5b614b0787828801614797565b600060208284031215614fe057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561503857816000190482111561501e5761501e614fe7565b8085161561502b57918102915b93841c9390800290615002565b509250929050565b60008261504f57506001610a2a565b8161505c57506000610a2a565b8160018114615072576002811461507c57615098565b6001915050610a2a565b60ff84111561508d5761508d614fe7565b50506001821b610a2a565b5060208310610133831016604e8410600b84101617156150bb575081810a610a2a565b6150c58383614ffd565b80600019048211156150d9576150d9614fe7565b029392505050565b600061208f8383615040565b6000806040838503121561510057600080fd5b505080516020909101519092909150565b8082028115828204841417610a2a57610a2a614fe7565b60008261514557634e487b7160e01b600052601260045260246000fd5b500490565b6000806040838503121561515d57600080fd5b825161516881614629565b6020840151909250614a0481614629565b8183526000602080850194508260005b85811015614b4357813561519c81614cd7565b63ffffffff1687529582019590820190600101615189565b8781526080602082015260006151ce60808301888a615179565b82810360408401526151e1818789615179565b905082810360608401526151f6818587615179565b9a9950505050505050505050565b60006020828403121561521657600080fd5b815161208f81614629565b81835260006001600160fb1b0383111561523a57600080fd5b8260051b80836020870137939093016020019392505050565b600060608783526020818185015261526e828501888a615221565b8481036040868101919091528682528791830160005b8881101561531e57833561529781614629565b6001600160a01b03908116835284860135906152b282614629565b1682860152838301358383015285840135868301526080808501359083015260a0808501359083015260c06152e8818601614d55565b60ff169083015260e06152fc858201614d66565b615308828501826148ac565b5050610100938401939190910190600101615284565b509b9a5050505050505050505050565b60208082526025908201527f506f6f6c3a204e6f7420616e20706f6f6c2061646d696e206f7220706f6f6c2060408201526437bbb732b960d91b606082015260800190565b8183526000602080850194508260005b85811015614b4357813561539681614629565b6001600160a01b031687529582019590820190600101615383565b8781526080602082015260006153cb60808301888a615373565b82810360408401526153de818789615373565b905082810360608401526151f6818587615221565b6020808252603a908201527f556e74616e676c6564426173653a204d75737420686176652061646d696e207260408201527f6f6c6520746f20706572666f726d207468697320616374696f6e000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161547857615478614fe7565b5060010190565b858152606060208201526000615499606083018688615221565b82810360408401526154ac818587615221565b98975050505050505050565b600082601f8301126154c957600080fd5b815160206154d9614d9683614d32565b82815260059290921b840181019181810190868411156154f857600080fd5b8286015b84811015614e5557805183529183019183016154fc565b6000806040838503121561552657600080fd5b82516001600160401b038082111561553d57600080fd5b615549868387016154b8565b9350602085015191508082111561555f57600080fd5b50614f0e858286016154b8565b81810381811115610a2a57610a2a614fe7565b80820180821115610a2a57610a2a614fe7565b8781526080602082015260006155ac60808301888a615373565b82810360408401526155bf818789615221565b905082810360608401526151f6818587615373565b600060608083018684526020828186015281875180845260809350838701915082890160005b82811015615616578151845292840192908401906001016155fa565b50505085810360408781019190915287518083528389019284019060005b818110156156ae57845180516001600160a01b03908116855287820151168785015284810151858501528881015189850152878101518885015260a0808201519085015260c08082015160ff169085015260e09081015190615698818601836148ac565b5050938501936101009290920191600101615634565b50909b9a5050505050505050505050565b600080604083850312156156d257600080fd5b8251915060208301516001600160401b038111156156ef57600080fd5b614f0e858286016154b8565b8051801515811461464957600080fd5b60006080828403121561571d57600080fd5b604051608081018181106001600160401b038211171561573f5761573f61464e565b60405282518152602083015161575481614629565b6020820152604083015161576781614cd7565b6040820152615778606084016156fb565b60608201529392505050565b60006020828403121561579657600080fd5b61208f826156fb565b8581526001600160a01b038581166020830152841660408201526080606082018190526000906157d29083018486615221565b979650505050505050565b6020808252603090820152600080516020615a0983398151915260408201526f31329022b837b1b422bc32b1baba37b960811b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015615881578181015183820152602001615869565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516158c2816017850160208801615866565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516158f3816028840160208801615866565b01602801949350505050565b602081526000825180602084015261591e816040850160208701615866565b601f01601f19169190910160400192915050565b60008161594157615941614fe7565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160801b0382811682821603908082111561414157614141614fe7565b6001600160801b03818116838216028082169190828114614cb257614cb2614fe7565b60006001600160801b038083168181036159be576159be614fe7565b600101939250505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d753656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d75737420a2646970667358221220fbe656a08bbe3ca0d66823e07f78623e0f7f9ba6a6fb6c3383f47e815687dd0f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104545760003560e01c80636b70f71d11610241578063c3d2129d1161013b578063e3178bc4116100c3578063ed34889511610087578063ed3488951461098d578063f3fef3a3146109a0578063f70a726e146109b3578063fa3908b1146109c6578063febd6018146109fd57600080fd5b8063e3178bc414610941578063e3adb7f014610954578063e681542d14610967578063e6c0e6d51461097a578063e87ac8431461098257600080fd5b8063cee7b6a11161010a578063cee7b6a1146108f8578063d1f5789414610900578063d547741f14610913578063dec2858714610926578063e1c84ea41461093957600080fd5b8063c3d2129d146108b4578063ca15c873146108d5578063cd3293de146108e8578063ce8fcab1146108f057600080fd5b80639b3e2291116101c9578063af14052c1161018d578063af14052c14610876578063b1511cc91461087e578063b3c6501514610891578063b6db75a014610899578063ba81a936146108a157600080fd5b80639b3e229114610838578063a217fddf1461084b578063a5688a9014610853578063a6c595471461085b578063ade0ea6d1461086e57600080fd5b80638456cb59116102105780638456cb59146107df5780638fd6b71e146107e75780639010d07c146107ff578063901617051461081257806391d148541461082557600080fd5b80636b70f71d1461079d57806373ffe3c7146107a55780637b103999146107b85780637f3bd56e146107cc57600080fd5b80632f2ff15d11610352578063477035d1116102da578063586fd8a11161029e578063586fd8a1146107295780635c975abb1461074a5780636421cede14610755578063644b4ead1461076a578063659306461461078a57600080fd5b8063477035d1146106c157806349110ac4146106ed5780634ba2363a146106f557806353069df61461070d578063565a2e2c1461071857600080fd5b80633bf4045f116103215780633bf4045f146106675780633f12dc101461067a5780633f4ba83a146106a65780634020c8d1146106ae57806340301264146106b957600080fd5b80632f2ff15d1461061b578063339443571461062e57806336568abe146106415780633aa29d7a1461065457600080fd5b8063185acf74116103e05780632b71b450116103a45780632b71b450146105db5780632bb14ff0146105e35780632bcc3682146105eb5780632cbf3da0146105f35780632cc3ce80146105fb57600080fd5b8063185acf741461056c5780631bf51b701461057f5780631e0029c8146105925780631e4e0091146105a5578063248a9ca3146105b857600080fd5b80630b7792f1116104275780630b7792f1146104ec5780630bc6bffc146104f45780630e9bf4e414610519578063150b7a021461053657806317a7ad1d1461056257600080fd5b806301ffc9a71461045957806304a3f19c14610481578063065dad8f1461049357806306823e8c146104c3575b600080fd5b61046c6104673660046145e6565b610a05565b60405190151581526020015b60405180910390f35b6009545b604051908152602001610478565b6104856104a1366004614610565b600090815260196020526040902054600160801b90046001600160801b031690565b6104856104d1366004614610565b6000908152601960205260409020546001600160801b031690565b600254610485565b6007546001600160a01b03165b6040516001600160a01b039091168152602001610478565b610521610a30565b60408051928352602083019190915201610478565b61054961054436600461472c565b610cfd565b6040516001600160e01b03199091168152602001610478565b61056a610e7b565b005b61056a61057a366004614610565b610f4f565b61056a61058d3660046147db565b611043565b6104856105a0366004614610565b6110e8565b61056a6105b3366004614874565b6110f5565b6104856105c6366004614610565b600090815260f3602052604090206001015490565b61050161110f565b601054610485565b600154610485565b610485611197565b61060e610609366004614610565b6111a3565b60405161047891906148d0565b61056a6106293660046149df565b6112dd565b61048561063c366004614a0f565b611302565b61056a61064f3660046149df565b6113ae565b61056a610662366004614874565b61142c565b61056a6106753660046147db565b6115f0565b610485610688366004614610565b6000908152601960205260409020600101546001600160801b031690565b61056a6116d7565b60005460ff1661046c565b600854610485565b600e5464010000000090046001600160401b03166040516001600160401b039091168152602001610478565b61046c611705565b600e54600160601b90046001600160a01b0316610501565b602554602654610521565b600a546001600160a01b0316610501565b61073c610737366004614aa8565b61171f565b604051610478929190614b4e565b605d5460ff1661046c565b61075d611b77565b6040516104789190614b73565b61077d610778366004614610565b611bdc565b6040516104789190614bc0565b61056a610798366004614cba565b611d0d565b610521611d65565b61056a6107b3366004614ce9565b611dea565b61018954610501906001600160a01b031681565b61056a6107da366004614d06565b611f1b565b61056a61204a565b600e5460405163ffffffff9091168152602001610478565b61050161080d366004614874565b612076565b61056a610820366004614610565b612096565b61046c6108333660046149df565b6120bb565b61056a610846366004614610565b6120e6565b610485600081565b61048561215b565b61056a6108693660046147db565b612274565b600f54610485565b61056a612311565b61056a61088c366004614610565b61239f565b61048561242e565b61046c612444565b61056a6108af366004614ce9565b61246f565b6108c76108c2366004614e60565b6124b4565b604051610478929190614f18565b6104856108e3366004614610565b612545565b61048561255d565b61056a612569565b601154610485565b61056a61090e366004614f31565b612756565b61056a6109213660046149df565b612b13565b61056a610934366004614f76565b612b38565b601254610485565b61048561094f366004614610565b612c14565b61056a610962366004614874565b612c21565b61056a610975366004614610565b612c7f565b601d54610485565b600c54600d54610521565b61056a61099b366004614cba565b612cd8565b61056a6109ae366004614d06565b612e2a565b61056a6109c1366004614610565b612f18565b6109d96109d4366004614610565b612fa5565b6040805182516001600160a01b031681526020928301519281019290925201610478565b610501613006565b60006001600160e01b03198216635a05180f60e01b1480610a2a5750610a2a8261301f565b92915050565b6000806000610a3d61110f565b90506000610a49613006565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190614fce565b610aba90600a6150e1565b905060008073__$a68f613c3bdb728f6ba077784ec1fd15de$__6328774cad610ae36000613054565b610aed600061307c565b604051639a1140b960e01b81526000600482015273__$a68f613c3bdb728f6ba077784ec1fd15de$__90639a1140b990602401602060405180830381865af4158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190614fce565b6000602801548a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190614fce565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b9190614fce565b6040516001600160e01b031960e089901b1681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c4016040805180830381865af4158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca991906150ed565b90925090506b033b2e3c9fd0803ce8000000610cc58484615111565b610ccf9190615128565b6b033b2e3c9fd0803ce8000000610ce68584615111565b610cf09190615128565b9650965050505050509091565b610189546000903390610d18906001600160a01b0316613090565b6001600160a01b0316816001600160a01b031614610d9b5760405162461bcd60e51b815260206004820152603560248201527f53656375726974697a6174696f6e506f6f6c3a204d75737420626520746f6b656044820152741b881a5cdcdd595908189e48155b9d185b99db1959605a1b60648201526084015b60405180910390fd5b6040805180820182526001600160a01b03838116808352602080840189815260028054600181018255600082905295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace96820296870180546001600160a01b0319169190961617909455517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf909401939093558351908152918201879052917ff1c19e8856063adce43b5f307c6ac9d0af46fd0787c590550c51d7cf02d2e5f4910160405180910390a150630a85bd0160e11b9150505b949350505050565b610e8361309d565b610e9b335b610189546001600160a01b0316906130e3565b610189546000908190610eb6906001600160a01b0316613158565b6040516304a2828b60e41b81523060048201526001600160a01b039190911690634a2828b0906024016040805180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f919061514a565b600580546001600160a01b039384166001600160a01b031991821617909155600680549290931691161790555050565b610f5761309d565b61018954610f6d906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614610fd55760405162461bcd60e51b81526020600482015260316024820152600080516020615a09833981519152604482015270031329022b837b1b422bc32b1baba37b91607d1b6064820152608401610d92565b6040516338ca404b60e21b8152600060048201526024810182905273__$4c26be947d349222af871a3168b3fe584b$__9063e329012c906044015b60006040518083038186803b15801561102857600080fd5b505af415801561103c573d6000803e3d6000fd5b5050505050565b61104b61309d565b6000805160206159e983398151915261106381613165565b6040516318d6411560e31b815273__$e2770451a2a37dcdd32d3c1720bab879c1$__9063c6b208a8906110a7906000908b908b908b908b908b908b906004016151b4565b60006040518083038186803b1580156110bf57600080fd5b505af41580156110d3573d6000803e3d6000fd5b505050506110df612311565b50505050505050565b6000610a2a60008361316f565b600061110081613165565b61110a8383613272565b505050565b61018954600090611128906001600160a01b03166132bd565b60405163b8d7b66960e01b81523060048201526001600160a01b03919091169063b8d7b66990602401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190615204565b905090565b60006111926000613054565b6111ab614563565b60008281526019602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff169081111561125457611254614896565b600181111561126557611265614896565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff1660058111156112ae576112ae614896565b60058111156112bf576112bf614896565b8152600d8201546020820152600e9091015460409091015292915050565b600082815260f360205260409020600101546112f881613165565b61110a83836132ca565b600061130c61309d565b611324335b610189546001600160a01b0316906132ed565b604051637f337ae160e11b815273__$e2770451a2a37dcdd32d3c1720bab879c1$__9063fe66f5c290611364906000908990899089908990600401615253565b602060405180830381865af4158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190614fce565b95945050505050565b6001600160a01b038116331461141e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d92565b6114288282613356565b5050565b61018954611442906001600160a01b0316613379565b6001600160a01b0316336001600160a01b03161480611487575061018954611472906001600160a01b0316613158565b6001600160a01b0316336001600160a01b0316145b6114f95760405162461bcd60e51b81526020600482015260496024820152600080516020615a0983398151915260448201527f62652053656375726974697a6174696f6e4d616e61676572206f722045706f636064820152683422bc32b1baba37b960b91b608482015260a401610d92565b73__$a68f613c3bdb728f6ba077784ec1fd15de$__632fb86262600061151f6000613054565b611529600061307c565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606481018590526084810184905260a40160006040518083038186803b15801561157b57600080fd5b505af415801561158f573d6000803e3d6000fd5b505050506000821115611428576115a4611705565b6114285760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c3a2045786365656473204d696e46697273744c6f73730000000000006044820152606401610d92565b6115f861309d565b611600613386565b6116186000805160206159e9833981519152336120bb565b8061163657506116366000805160206159c9833981519152336120bb565b6116525760405162461bcd60e51b8152600401610d929061532e565b60405163563bc1a160e01b815273__$e2770451a2a37dcdd32d3c1720bab879c1$__9063563bc1a190611695906004908a908a908a908a908a908a9087016153b1565b60006040518083038186803b1580156116ad57600080fd5b505af41580156116c1573d6000803e3d6000fd5b505050506116cf6001608f55565b505050505050565b6116df612444565b6116fb5760405162461bcd60e51b8152600401610d92906153f3565b6117036133e6565b565b600061170f61215b565b600e5463ffffffff161115919050565b610189546060908190339061173c906001600160a01b0316613438565b6001600160a01b0316146117835760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b6044820152606401610d92565b848381146117c45760405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840d8cadccee8d60931b6044820152606401610d92565b6000816001600160401b038111156117de576117de61464e565b604051908082528060200260200182016040528015611807578160200160208202803683370190505b50905060005b828110156118bf5760008061186360008c8c8681811061182f5761182f615450565b9050602002013560009081526015820160209081526040808320548352601390930190522060018101546004909101549091565b9150915061188c60008c8c8681811061187e5761187e615450565b905060200201358484613445565b84848151811061189e5761189e615450565b602002602001018181525050505080806118b790615466565b91505061180d565b5060008073__$7f0f8de4978e89001c10ba53aee4a3ea4c$__632f3e0ce060008c8c8c8c6040518663ffffffff1660e01b815260040161190395949392919061547f565b600060405180830381865af4158015611920573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119489190810190615513565b9150915060008060005b86811015611a3957600086828151811061196e5761196e615450565b602002602001015185838151811061198857611988615450565b602002602001015161199a919061556c565b9050808683815181106119af576119af615450565b6020026020010151116119e8578582815181106119ce576119ce615450565b6020026020010151846119e1919061557f565b9350611a26565b6119f2818561557f565b935080868381518110611a0757611a07615450565b6020026020010151611a19919061556c565b611a23908461557f565b92505b5080611a3181615466565b915050611952565b506000611a496127106064615111565b600b54611a569085615111565b611a609190615128565b600a54604051630837ca3160e11b8152600060048201526001600160a01b0390911660248201526044810182905290915073__$4c26be947d349222af871a3168b3fe584b$__9063106f94629060640160006040518083038186803b158015611ac857600080fd5b505af4158015611adc573d6000803e3d6000fd5b505050508083611aec919061556c565b60088054600090611afe90849061557f565b909155505060098054839190600090611b1890849061557f565b909155505060408051308152602081018590529081018390524260608201527f2fe77b1c99aca6b022b8efc6e3e8dd1b48b30748709339b65c50ef3263443e099060800160405180910390a150929b919a509098505050505050505050565b60606000600301805480602002602001604051908101604052809291908181526020018280548015611bd257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bb4575b5050505050905090565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526001805483908110611c4957611c49615450565b600091825260209182902060408051610160810182526002909302909101805463ffffffff808216855264010000000080830482169686019690965268010000000000000000808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e08501526001909101548082166101008501529384048116610120840152920490911661014082015292915050565b611d1561309d565b611d1e33610e88565b60405163af2f761760e01b8152600060048201526001600160a01b038216602482015273__$e2770451a2a37dcdd32d3c1720bab879c1$__9063af2f761790604401611010565b604051639a1140b960e01b815260006004820181905290819073__$a68f613c3bdb728f6ba077784ec1fd15de$__90639a1140b990602401602060405180830381865af4158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde9190614fce565b60285490939092509050565b611df261309d565b611e0a6000805160206159e9833981519152336120bb565b80611e285750611e286000805160206159c9833981519152336120bb565b611e445760405162461bcd60e51b8152600401610d929061532e565b611e516127106064615111565b8163ffffffff161115611ecc5760405162461bcd60e51b815260206004820152603b60248201527f53656375726974697a6174696f6e506f6f6c3a206d696e46697273744c6f737360448201527f43757368696f6e2069732067726561746572207468616e2031303000000000006064820152608401610d92565b600e805463ffffffff191663ffffffff83169081179091556040519081527f091193ea2a1d71a11f3479abe1d30b1ba8fecf8b18e1c728e3ee787de54d0399906020015b60405180910390a150565b611f2361309d565b61018954611f39906001600160a01b0316613495565b6001600160a01b0316336001600160a01b03161480611f7e575061018954611f69906001600160a01b03166132bd565b6001600160a01b0316336001600160a01b0316145b611fd45760405162461bcd60e51b81526020600482015260336024820152600080516020615a098339815191526044820152723132902737ba32aa37b5b2b726b0b730b3b2b960691b6064820152608401610d92565b604051630837ca3160e11b8152600060048201526001600160a01b03831660248201526044810182905273__$4c26be947d349222af871a3168b3fe584b$__9063106f9462906064015b60006040518083038186803b15801561203657600080fd5b505af41580156116cf573d6000803e3d6000fd5b612052612444565b61206e5760405162461bcd60e51b8152600401610d92906153f3565b6117036134a2565b60008281526101256020526040812061208f90836134df565b9392505050565b61209e61309d565b6120a733611311565b6011546120b590829061557f565b60115550565b600091825260f3602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051632915c6ef60e21b8152600060048201526024810182905273__$7f0f8de4978e89001c10ba53aee4a3ea4c$__9063a4571bbc9060440160006040518083038186803b15801561213857600080fd5b505af415801561214c573d6000803e3d6000fd5b50505050612158612311565b50565b600073__$a68f613c3bdb728f6ba077784ec1fd15de$__63937e8cbf6121816000613054565b61218b600061307c565b604051639a1140b960e01b81526000600482015273__$a68f613c3bdb728f6ba077784ec1fd15de$__90639a1140b990602401602060405180830381865af41580156121db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ff9190614fce565b60285460405160e086901b6001600160e01b03191681526004810194909452602484019290925260448301526064820152608401602060405180830381865af4158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190614fce565b61227c61309d565b6000805160206159c983398151915261229481613165565b60405163d37cc71360e01b815273__$e2770451a2a37dcdd32d3c1720bab879c1$__9063d37cc713906122d8906002908b908b908b908b908b908b90600401615592565b60006040518083038186803b1580156122f057600080fd5b505af4158015612304573d6000803e3d6000fd5b5050505050505050505050565b73__$a68f613c3bdb728f6ba077784ec1fd15de$__63c1a5db1c60006123376000613054565b612341600061307c565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160006040518083038186803b15801561238557600080fd5b505af4158015612399573d6000803e3d6000fd5b50505050565b6123a761309d565b6123bf6000805160206159e9833981519152336120bb565b806123dd57506123dd6000805160206159c9833981519152336120bb565b6123f95760405162461bcd60e51b8152600401610d929061532e565b60128190556040518181527f3fb30b6090e6989c6819119c2885012949e75471ed4ce5e80c9be541ea0e2f3f90602001611f10565b600061243c602a5460ff1690565b60ff16905090565b600061245e6000805160206159c9833981519152336120bb565b8061119257506111926000336120bb565b61247833610e88565b63ffffffff811660108190556040519081527fae7402a7c6591be272f2a698eff734559f48c90b946dc122fec30db4033aa30d90602001611f10565b6000606073__$e2770451a2a37dcdd32d3c1720bab879c1$__63aa12d15f600086866040518463ffffffff1660e01b81526004016124f4939291906155d4565b600060405180830381865af4158015612511573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261253991908101906156bf565b915091505b9250929050565b600081815261012560205260408120610a2a906134eb565b6000611192600061307c565b61257233611311565b600061257c61215b565b9050600061258d6127106064615111565b60085461259b908490615111565b6125a59190615128565b90506000816000600801546125ba919061556c565b90506125c461110f565b6001600160a01b031663ef06fb73836040518263ffffffff1660e01b81526004016125f191815260200190565b600060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050508160006008016000828254612638919061556c565b909155506126469050613006565b6001600160a01b031663ef06fb73826040518263ffffffff1660e01b815260040161267391815260200190565b600060405180830381600087803b15801561268d57600080fd5b505af11580156126a1573d6000803e3d6000fd5b5050505080600060080160008282546126ba919061556c565b9091555073__$a68f613c3bdb728f6ba077784ec1fd15de$__9050632fb8626260006126e581613054565b6126ef600061307c565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152600060648201526084810184905260a4015b60006040518083038186803b15801561274257600080fd5b505af41580156110df573d6000803e3d6000fd5b602a54610100900460ff16158080156127765750602a54600160ff909116105b806127905750303b1580156127905750602a5460ff166001145b6127f35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d92565b602a805460ff19166001179055801561281657602a805461ff0019166101001790555b61281f336134f5565b6001600160a01b0383166128755760405162461bcd60e51b815260206004820181905260248201527f526567697374727920616464726573732063616e6e6f7420626520656d7074796044820152606401610d92565b61018980546001600160a01b0319166001600160a01b03851617905581516000906128a9906020908501810190850161570b565b60208101519091506001600160a01b03166128ff5760405162461bcd60e51b8152602060048201526016602482015275506f6f6c3a20496e76616c69642063757272656e637960501b6044820152606401610d92565b6020810151600780546001600160a01b0319166001600160a01b0390921691909117905560608101516000805460ff1916911515919091179055600e80546bffffffffffffffffffffffff1630600160601b02179055604081015161296390611dea565b805161296e9061239f565b602081015160405163095ea7b360e01b815230600482015260001960248201526001600160a01b039091169063095ea7b3906044016020604051808303816000875af11580156129c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e69190615784565b612a325760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a2043757272656e637920617070726f76616c206661696c656400006044820152606401610d92565b61018954612a48906001600160a01b0316613090565b610189546001600160a01b039182169163a22cb46591612a689116613438565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015612ab057600080fd5b505af1158015612ac4573d6000803e3d6000fd5b5050505050801561110a57602a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600082815260f36020526040902060010154612b2e81613165565b61110a8383613356565b612b4061309d565b612b48613386565b612b606000805160206159e9833981519152336120bb565b80612b7e5750612b7e6000805160206159c9833981519152336120bb565b612b9a5760405162461bcd60e51b8152600401610d929061532e565b604051639178a8a160e01b815273__$e2770451a2a37dcdd32d3c1720bab879c1$__90639178a8a190612bda90600290889088908890889060040161579f565b60006040518083038186803b158015612bf257600080fd5b505af4158015612c06573d6000803e3d6000fd5b505050506123996001608f55565b6000610a2a60008361353d565b6000805160206159e9833981519152612c3981613165565b6040516356a5a29960e01b815260006004820152602481018490526044810183905273__$7f0f8de4978e89001c10ba53aee4a3ea4c$__906356a5a2999060640161272a565b612c8761309d565b61018954612c9d906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614612ccd5760405162461bcd60e51b8152600401610d92906157dd565b61215860008261356b565b612ce061309d565b612ce8613386565b612d006000805160206159e9833981519152336120bb565b80612d1e5750612d1e6000805160206159c9833981519152336120bb565b612d3a5760405162461bcd60e51b8152600401610d929061532e565b604051635cd35d6360e11b8152600060048201526001600160a01b038216602482015273__$4c26be947d349222af871a3168b3fe584b$__9063b9a6bac69060440160006040518083038186803b158015612d9457600080fd5b505af4158015612da8573d6000803e3d6000fd5b505061018954612dc392506001600160a01b03169050613379565b60405163dc90f9fd60e01b81526001600160a01b038381166004830152919091169063dc90f9fd90602401600060405180830381600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506121586001608f55565b612e3261309d565b612e3b33611311565b612e657f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e836120bb565b612eca5760405162461bcd60e51b815260206004820152603060248201527f53656375726974697a6174696f6e506f6f6c3a204f6e6c79204f726967696e6160448201526f3a37b91031b0b710323930bbb237bbb760811b6064820152608401610d92565b604051635d46333760e11b8152600060048201526001600160a01b03831660248201526044810182905273__$4c26be947d349222af871a3168b3fe584b$__9063ba8c666e9060640161201e565b612f2061309d565b61018954612f36906001600160a01b0316613158565b6001600160a01b0316336001600160a01b031614612f665760405162461bcd60e51b8152600401610d92906157dd565b604051637564542160e11b8152600060048201526024810182905273__$4c26be947d349222af871a3168b3fe584b$__9063eac8a84290604401611010565b60408051808201909152600080825260208201526002805483908110612fcd57612fcd615450565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915292915050565b61018954600090611128906001600160a01b0316613495565b60006001600160e01b03198216637965db0b60e01b1480610a2a57506301ffc9a760e01b6001600160e01b0319831614610a2a565b600080600080613063856135be565b9250925092506113a58361307784846136c3565b6136c3565b6000610a2a826009015483600801546136c3565b6000610a2a826007613713565b605d5460ff16156117035760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610d92565b6130ec82613379565b6001600160a01b0316816001600160a01b0316146114285760405162461bcd60e51b8152602060048201526024808201527f52656769737472793a204f6e6c792053656375726974697a6174696f6e4d616e60448201526330b3b2b960e11b6064820152608401610d92565b6000610a2a826005613713565b6121588133613798565b60008181526015830160209081526040808320548084526013860190925282206001810154600482015460059092015490919065ffffffffffff16421061321c5760008381526013870160205260409020600181015460028201546005909201546131e2929065ffffffffffff166137f1565b60008481526013880160205260409020600481015460038201546005909201549294506132199290919065ffffffffffff166137f1565b90505b8060000361324a576000858152601487016020526040902054613240908390613811565b9350505050610a2a565b6132408161326d848960140160008a815260200190815260200160002054613811565b613811565b600082815260f36020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000610a2a826004613713565b6132d4828261381d565b60008281526101256020526040902061110a90826138a3565b6132f682613438565b6001600160a01b0316816001600160a01b0316146114285760405162461bcd60e51b815260206004820152601960248201527f52656769737472793a204f6e6c79204c6f616e4b65726e656c000000000000006044820152606401610d92565b61336082826138b8565b60008281526101256020526040902061110a908261391f565b6000610a2a826000613713565b6002608f54036133d85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d92565b6002608f55565b6001608f55565b6133ee613934565b605d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000610a2a826008613713565b60008160000361347257600084815260148601602052604090205461346b908490613811565b9050610e73565b61346b8261326d8588601401600089815260200190815260200160002054613811565b6000610a2a826003613713565b6134aa61309d565b605d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861341b3390565b600061208f838361397d565b6000610a2a825490565b602a54610100900460ff1661351c5760405162461bcd60e51b8152600401610d929061581b565b6135246139a7565b61352c6139da565b613534613a01565b61215881613a28565b60008060008061354d8686613af3565b9250925092506135618361307784846136c3565b9695505050505050565b6135798260090154826136c3565b600983018190556040805183815260208101929092527f918efcc3fbab932d4dd5f5d71315810f6d34460b2a009f613454f4a7b3e6f385910160405180910390a15050565b601f8101546021820154601d8301546020840154600093849384939192909190838503613600576000836135f18a613c5e565b965096509650505050506136bc565b60008061360c42613cd0565b9050825b81811015613680576000818152601b8c016020526040902054801561366b5761365c84613077836136578a6136458989613cec565b6b033b2e3c9fd0803ce8000000613d3c565b613dfa565b93506136688a826136c3565b99505b50613679816201518061557f565b9050613610565b5061369c61369687613657876136458689613cec565b83613e1d565b6136a6868a6136c3565b6136af8c613c5e565b9850985098505050505050505b9193909250565b6000826136d0838261557f565b9150811015610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610d92565b6000826001600160a01b031663bcaa0c5583600a81111561373657613736614896565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa158015613774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f9190615204565b6137a282826120bb565b611428576137af81613e39565b6137ba836020613e4b565b6040516020016137cb92919061588a565b60408051601f198184030181529082905262461bcd60e51b8252610d92916004016158ff565b60008142106138095761380684848442613fe6565b93505b509192915050565b600061208f8284613dfa565b61382782826120bb565b61142857600082815260f3602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561385f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061208f836001600160a01b038416613fff565b6138c282826120bb565b1561142857600082815260f3602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061208f836001600160a01b03841661404e565b605d5460ff166117035760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610d92565b600082600001828154811061399457613994615450565b9060005260206000200154905092915050565b602a54610100900460ff166139ce5760405162461bcd60e51b8152600401610d929061581b565b605d805460ff19169055565b602a54610100900460ff166133df5760405162461bcd60e51b8152600401610d929061581b565b602a54610100900460ff166117035760405162461bcd60e51b8152600401610d929061581b565b602a54610100900460ff16613a4f5760405162461bcd60e51b8152600401610d929061581b565b6001600160a01b038116613a605750335b613a6b600033614148565b613a836000805160206159c983398151915282614148565b613abb7f59abfac6520ec36a6556b2a4dd949cc40007459bcd5cd2507f1e5cc77b6bc97e6000805160206159c9833981519152613272565b6121587f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989266000805160206159e9833981519152613272565b601d8201546000828152602284016020908152604080832054828701546023880190935290832054929384938493849391613b2e8a8a614152565b15613b86576000613b3f8b8b614185565b9050613b82613b4e8c8c61316f565b8c601c018381548110613b6357613b63615450565b60009182526020909120600290910201546001600160801b0316613dfa565b9550505b82600003613ba057600097509550929350613c5792505050565b600080613bac42613cd0565b60008c815260198e01602052604081205491925090613bda90600160801b90046001600160801b0316613cd0565b9050848110158015613beb57508181105b15613c225760008c815260198e0160205260409020546001600160801b0316613c1c816136578a6136458787613cec565b909a5092505b613c3d613c37876136578a613645878b613cec565b84613e1d565b613c47858c6136c3565b899a509a509a5050505050505050505b9250925092565b6000805b601c830154811015613cca57613cb682613077613ca18685613c926b033b2e3c9fd0803ce80000006103e8615111565b613c9c919061557f565b614304565b86601c018581548110613b6357613b63615450565b915080613cc281615466565b915050613c62565b50919050565b6000613cdf6201518083615128565b610a2a9062015180615111565b600082613cf9838261556c565b9150811115610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610d92565b6000838015613ddc57600184168015613d5757859250613d5b565b8392505b50600283046002850494505b8415613dd6578586028687820414613d7e57600080fd5b81810181811015613d8e57600080fd5b8590049650506001851615613dcb578583028387820414158715151615613db457600080fd5b81810181811015613dc457600080fd5b8590049350505b600285049450613d67565b50613df2565b838015613dec5760009250613df0565b8392505b505b509392505050565b60006b033b2e3c9fd0803ce8000000613e1384846143c4565b61208f9190615128565b600082821115613e2f57506000610a2a565b61208f8383613cec565b6060610a2a6001600160a01b03831660145b60606000613e5a836002615111565b613e6590600261557f565b6001600160401b03811115613e7c57613e7c61464e565b6040519080825280601f01601f191660200182016040528015613ea6576020820181803683370190505b509050600360fc1b81600081518110613ec157613ec1615450565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613ef057613ef0615450565b60200101906001600160f81b031916908160001a9053506000613f14846002615111565b613f1f90600161557f565b90505b6001811115613f97576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613f5357613f53615450565b1a60f81b828281518110613f6957613f69615450565b60200101906001600160f81b031916908160001a90535060049490941c93613f9081615932565b9050613f22565b50831561208f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d92565b60006113a5613ff985613645868661556c565b86613dfa565b600081815260018301602052604081205461404657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a2a565b506000610a2a565b6000818152600183016020526040812054801561413757600061407260018361556c565b85549091506000906140869060019061556c565b90508181146140eb5760008660000182815481106140a6576140a6615450565b90600052602060002001549050808760000184815481106140c9576140c9615450565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140fc576140fc615949565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a2a565b6000915050610a2a565b5092915050565b61142882826132ca565b600061416c6b033b2e3c9fd0803ce80000006103e8615111565b6000928352601593909301602052506040902054101590565b60008181526019830160205260408120548290600160801b90046001600160801b0316826141b242613cd0565b905060006141c08785614426565b90506000600182604001516141d5919061595f565b90506001600160801b036000805b601c8b01546001600160801b03821610156142ed5760008b601c01826001600160801b03168154811061421857614218615450565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c601c01836001600160801b03168154811061426757614267615450565b60009182526020909120600160029092020101546001600160801b03161480156142a35750826001600160801b0316816001600160801b031610155b80156142ce57506142b7816201518061597f565b6142ca906001600160801b03168961557f565b8710155b156142da578193508092505b50806142e5816159a2565b9150506141e3565b50506001600160801b031698975050505050505050565b600081815260138301602052604081206001810154600482015482546005909301549192909165ffffffffffff1642106143a457600085815260138701602052604090206001810154600282015460059092015461436a929065ffffffffffff166137f1565b60008681526013880160205260409020600481015460038201546005909201549295506143a19290919065ffffffffffff166137f1565b91505b816000036143b6576132408382613811565b6132408261326d8584613811565b60008115806143e8575082826143da8183615111565b92506143e69083615128565b145b610a2a5760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610d92565b61442e614563565b600082815260198401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff16908111156144d9576144d9614896565b60018111156144ea576144ea614896565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff16600581111561453357614533614896565b600581111561454457614544614896565b8152600d8201546020820152600e909101546040909101529392505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a0820190815260200160008152602001600081525090565b6000602082840312156145f857600080fd5b81356001600160e01b03198116811461208f57600080fd5b60006020828403121561462257600080fd5b5035919050565b6001600160a01b038116811461215857600080fd5b803561464981614629565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156146875761468761464e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146b5576146b561464e565b604052919050565b600082601f8301126146ce57600080fd5b81356001600160401b038111156146e7576146e761464e565b6146fa601f8201601f191660200161468d565b81815284602083860101111561470f57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561474257600080fd5b843561474d81614629565b9350602085013561475d81614629565b92506040850135915060608501356001600160401b0381111561477f57600080fd5b61478b878288016146bd565b91505092959194509250565b60008083601f8401126147a957600080fd5b5081356001600160401b038111156147c057600080fd5b6020830191508360208260051b850101111561253e57600080fd5b600080600080600080606087890312156147f457600080fd5b86356001600160401b038082111561480b57600080fd5b6148178a838b01614797565b9098509650602089013591508082111561483057600080fd5b61483c8a838b01614797565b9096509450604089013591508082111561485557600080fd5b5061486289828a01614797565b979a9699509497509295939492505050565b6000806040838503121561488757600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600281106148bc576148bc614896565b9052565b600681106148bc576148bc614896565b81516001600160801b03168152610200810160208301516148fc60208401826001600160801b03169052565b50604083015161491760408401826001600160801b03169052565b50606083015161493260608401826001600160a01b03169052565b50608083015161494d60808401826001600160a01b03169052565b5060a083015160a083015260c083015160c083015260e083015160e08301526101008084015161497f828501826148ac565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a0808401516149c0828501826148c0565b50506101c083810151908301526101e092830151929091019190915290565b600080604083850312156149f257600080fd5b823591506020830135614a0481614629565b809150509250929050565b60008060008060408587031215614a2557600080fd5b84356001600160401b0380821115614a3c57600080fd5b614a4888838901614797565b90965094506020870135915080821115614a6157600080fd5b818701915087601f830112614a7557600080fd5b813581811115614a8457600080fd5b8860208260081b8501011115614a9957600080fd5b95989497505060200194505050565b60008060008060408587031215614abe57600080fd5b84356001600160401b0380821115614ad557600080fd5b614ae188838901614797565b90965094506020870135915080821115614afa57600080fd5b50614b0787828801614797565b95989497509550505050565b600081518084526020808501945080840160005b83811015614b4357815187529582019590820190600101614b27565b509495945050505050565b604081526000614b616040830185614b13565b82810360208401526113a58185614b13565b6020808252825182820181905260009190848201906040850190845b81811015614bb45783516001600160a01b031683529284019291840191600101614b8f565b50909695505050505050565b815163ffffffff16815261016081016020830151614be6602084018263ffffffff169052565b506040830151614bfe604084018263ffffffff169052565b506060830151614c16606084018263ffffffff169052565b506080830151614c2e608084018263ffffffff169052565b5060a0830151614c4660a084018263ffffffff169052565b5060c0830151614c5e60c084018263ffffffff169052565b5060e0830151614c7660e084018263ffffffff169052565b506101008381015163ffffffff81168483015250506101208381015163ffffffff81168483015250506101408381015163ffffffff8116848301525b505092915050565b600060208284031215614ccc57600080fd5b813561208f81614629565b63ffffffff8116811461215857600080fd5b600060208284031215614cfb57600080fd5b813561208f81614cd7565b60008060408385031215614d1957600080fd5b8235614d2481614629565b946020939093013593505050565b60006001600160401b03821115614d4b57614d4b61464e565b5060051b60200190565b803560ff8116811461464957600080fd5b80356002811061464957600080fd5b600082601f830112614d8657600080fd5b81356020614d9b614d9683614d32565b61468d565b82815260089290921b84018101918181019086841115614dba57600080fd5b8286015b84811015614e55576101008189031215614dd85760008081fd5b614de0614664565b8135614deb81614629565b8152614df882860161463e565b8186015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c0614e31818401614d55565b9082015260e0614e42838201614d66565b9082015283529183019161010001614dbe565b509695505050505050565b60008060408385031215614e7357600080fd5b82356001600160401b0380821115614e8a57600080fd5b818501915085601f830112614e9e57600080fd5b81356020614eae614d9683614d32565b82815260059290921b84018101918181019089841115614ecd57600080fd5b948201945b83861015614eeb57853582529482019490820190614ed2565b96505086013592505080821115614f0157600080fd5b50614f0e85828601614d75565b9150509250929050565b828152604060208201526000610e736040830184614b13565b60008060408385031215614f4457600080fd5b8235614f4f81614629565b915060208301356001600160401b03811115614f6a57600080fd5b614f0e858286016146bd565b60008060008060608587031215614f8c57600080fd5b8435614f9781614629565b93506020850135614fa781614629565b925060408501356001600160401b03811115614fc257600080fd5b614b0787828801614797565b600060208284031215614fe057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561503857816000190482111561501e5761501e614fe7565b8085161561502b57918102915b93841c9390800290615002565b509250929050565b60008261504f57506001610a2a565b8161505c57506000610a2a565b8160018114615072576002811461507c57615098565b6001915050610a2a565b60ff84111561508d5761508d614fe7565b50506001821b610a2a565b5060208310610133831016604e8410600b84101617156150bb575081810a610a2a565b6150c58383614ffd565b80600019048211156150d9576150d9614fe7565b029392505050565b600061208f8383615040565b6000806040838503121561510057600080fd5b505080516020909101519092909150565b8082028115828204841417610a2a57610a2a614fe7565b60008261514557634e487b7160e01b600052601260045260246000fd5b500490565b6000806040838503121561515d57600080fd5b825161516881614629565b6020840151909250614a0481614629565b8183526000602080850194508260005b85811015614b4357813561519c81614cd7565b63ffffffff1687529582019590820190600101615189565b8781526080602082015260006151ce60808301888a615179565b82810360408401526151e1818789615179565b905082810360608401526151f6818587615179565b9a9950505050505050505050565b60006020828403121561521657600080fd5b815161208f81614629565b81835260006001600160fb1b0383111561523a57600080fd5b8260051b80836020870137939093016020019392505050565b600060608783526020818185015261526e828501888a615221565b8481036040868101919091528682528791830160005b8881101561531e57833561529781614629565b6001600160a01b03908116835284860135906152b282614629565b1682860152838301358383015285840135868301526080808501359083015260a0808501359083015260c06152e8818601614d55565b60ff169083015260e06152fc858201614d66565b615308828501826148ac565b5050610100938401939190910190600101615284565b509b9a5050505050505050505050565b60208082526025908201527f506f6f6c3a204e6f7420616e20706f6f6c2061646d696e206f7220706f6f6c2060408201526437bbb732b960d91b606082015260800190565b8183526000602080850194508260005b85811015614b4357813561539681614629565b6001600160a01b031687529582019590820190600101615383565b8781526080602082015260006153cb60808301888a615373565b82810360408401526153de818789615373565b905082810360608401526151f6818587615221565b6020808252603a908201527f556e74616e676c6564426173653a204d75737420686176652061646d696e207260408201527f6f6c6520746f20706572666f726d207468697320616374696f6e000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161547857615478614fe7565b5060010190565b858152606060208201526000615499606083018688615221565b82810360408401526154ac818587615221565b98975050505050505050565b600082601f8301126154c957600080fd5b815160206154d9614d9683614d32565b82815260059290921b840181019181810190868411156154f857600080fd5b8286015b84811015614e5557805183529183019183016154fc565b6000806040838503121561552657600080fd5b82516001600160401b038082111561553d57600080fd5b615549868387016154b8565b9350602085015191508082111561555f57600080fd5b50614f0e858286016154b8565b81810381811115610a2a57610a2a614fe7565b80820180821115610a2a57610a2a614fe7565b8781526080602082015260006155ac60808301888a615373565b82810360408401526155bf818789615221565b905082810360608401526151f6818587615373565b600060608083018684526020828186015281875180845260809350838701915082890160005b82811015615616578151845292840192908401906001016155fa565b50505085810360408781019190915287518083528389019284019060005b818110156156ae57845180516001600160a01b03908116855287820151168785015284810151858501528881015189850152878101518885015260a0808201519085015260c08082015160ff169085015260e09081015190615698818601836148ac565b5050938501936101009290920191600101615634565b50909b9a5050505050505050505050565b600080604083850312156156d257600080fd5b8251915060208301516001600160401b038111156156ef57600080fd5b614f0e858286016154b8565b8051801515811461464957600080fd5b60006080828403121561571d57600080fd5b604051608081018181106001600160401b038211171561573f5761573f61464e565b60405282518152602083015161575481614629565b6020820152604083015161576781614cd7565b6040820152615778606084016156fb565b60608201529392505050565b60006020828403121561579657600080fd5b61208f826156fb565b8581526001600160a01b038581166020830152841660408201526080606082018190526000906157d29083018486615221565b979650505050505050565b6020808252603090820152600080516020615a0983398151915260408201526f31329022b837b1b422bc32b1baba37b960811b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015615881578181015183820152602001615869565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516158c2816017850160208801615866565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516158f3816028840160208801615866565b01602801949350505050565b602081526000825180602084015261591e816040850160208701615866565b601f01601f19169190910160400192915050565b60008161594157615941614fe7565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160801b0382811682821603908082111561414157614141614fe7565b6001600160801b03818116838216028082169190828114614cb257614cb2614fe7565b60006001600160801b038083168181036159be576159be614fe7565b600101939250505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3e9c05fb0f9da4414e033bb9bf190a6e2072adf7e3077394fce683220513b8d753656375726974697a6174696f6e506f6f6c3a2043616c6c6572206d75737420a2646970667358221220fbe656a08bbe3ca0d66823e07f78623e0f7f9ba6a6fb6c3383f47e815687dd0f64736f6c63430008130033",
  "libraries": {
    "PoolAssetLogic": "0xFb94240006b52111570eB6C28Bb195f9b5908c99",
    "PoolNAVLogic": "0xdFFd058059e26fF1a76be0cf6371A008C108A0e0",
    "GenericLogic": "0x739c93545CAD9EE3202A524ef50ebfDaf452C8dF",
    "RebaseLogic": "0x786EC98A0f46782fc4065Ff8D47Fd52DD20dF246"
  },
  "devdoc": {
    "author": "Untangled Team",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "changeSeniorAsset(uint256,uint256)": {
        "params": {
          "_seniorRedeem": "senior redeem amount",
          "_seniorSupply": "senior supply amount"
        }
      },
      "currentNAV()": {
        "returns": {
          "nav_": "current NAV"
        }
      },
      "decreaseIncomeReserve(uint256)": {
        "details": "trigger update reserve"
      },
      "disburse(address,uint256)": {
        "details": "Disburses a specified amount of currency to the given user.",
        "params": {
          "currencyAmount": "The amount of currency to disburse.",
          "usr": "The address of the user to receive the currency."
        }
      },
      "getRiskScoresLength()": {
        "returns": {
          "_0": "the length of the risk scores array"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseCapitalReserve(uint256)": {
        "details": "trigger update reserve when buy note token action happens"
      },
      "increaseTotalAssetRepaidCurrency(uint256)": {
        "details": "trigger update asset value repaid"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Trigger set up opening block timestamp"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Untangled's SecuritizationPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeSeniorAsset(uint256,uint256)": {
        "notice": "changes the senior asset value based on new supply or redeems"
      },
      "collectAssets(uint256[],(address,address,bytes32,uint256,uint256,uint256,uint8,uint8)[])": {
        "notice": "collects NFT assets from a specified address"
      },
      "collectERC20Asset(address)": {
        "notice": "collects ERC20 assets from specified senders"
      },
      "currentNAV()": {
        "notice": "calculates and returns the current NAV"
      },
      "exportAssets(address,address,uint256[])": {
        "notice": "exports NFT assets to another pool address"
      },
      "getAsset(bytes32)": {
        "notice": "retrieves loan information"
      },
      "getRiskScoresLength()": {
        "notice": "Riks scores length"
      },
      "getTokenAssetAddresses()": {
        "notice": "A view function that returns an array of token asset addresses"
      },
      "initialize(address,bytes)": {
        "notice": "CONSTRUCTOR "
      },
      "rebase()": {
        "notice": "rebase the debt and balance of the senior tranche according to the current ratio between senior and junior"
      },
      "setDebtCeiling(uint256)": {
        "notice": "sets debt ceiling value"
      },
      "setMinFirstLossCushion(uint32)": {
        "notice": "sets mint first loss value"
      },
      "setupRiskScores(uint32[],uint32[],uint32[])": {
        "notice": "sets up the risk scores for the contract for pool"
      },
      "withdraw(address,uint256)": {
        "notice": "allows the originator to withdraw from reserve"
      },
      "withdrawAssets(address[],uint256[],address[])": {
        "notice": "withdraws NFT assets from the contract and transfers them to recipients"
      },
      "withdrawERC20Assets(address[],address[],uint256[])": {
        "notice": "withdraws ERC20 assets from the contract and transfers them to recipients\\ound"
      }
    },
    "notice": "Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25743,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_poolStorage",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Storage)12102_storage"
      },
      {
        "astId": 759,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "42",
        "type": "t_uint8"
      },
      {
        "astId": 762,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "42",
        "type": "t_bool"
      },
      {
        "astId": 3575,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "43",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 942,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "93",
        "type": "t_bool"
      },
      {
        "astId": 1047,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "94",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1062,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "143",
        "type": "t_uint256"
      },
      {
        "astId": 1131,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "144",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4865,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "193",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "243",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "244",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "293",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6175_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "294",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10019,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "343",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24118,
        "contract": "contracts/protocol/pool/Pool.sol:Pool",
        "label": "registry",
        "offset": 0,
        "slot": "393",
        "type": "t_contract(Registry)27710"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NFTAsset)11905_storage)dyn_storage": {
        "base": "t_struct(NFTAsset)11905_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.NFTAsset[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RiskScore)11882_storage)dyn_storage": {
        "base": "t_struct(RiskScore)11882_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.RiskScore[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WriteOffGroup)11976_storage)dyn_storage": {
        "base": "t_struct(WriteOffGroup)11976_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.WriteOffGroup[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Registry)27710": {
        "encoding": "inplace",
        "label": "contract Registry",
        "numberOfBytes": "20"
      },
      "t_enum(ASSET_PURPOSE)11765": {
        "encoding": "inplace",
        "label": "enum Configuration.ASSET_PURPOSE",
        "numberOfBytes": "1"
      },
      "t_enum(AmortizationUnitType)12631": {
        "encoding": "inplace",
        "label": "enum UnpackLoanParamtersLib.AmortizationUnitType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6175_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6175_storage"
      },
      "t_mapping(t_bytes32,t_struct(NFTDetails)11949_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataTypes.NFTDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTDetails)11949_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(LoanDetails)11969_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.LoanDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanDetails)11969_storage"
      },
      "t_mapping(t_uint256,t_struct(Rate)11964_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Rate)",
        "numberOfBytes": "32",
        "value": "t_struct(Rate)11964_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6175_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 6174,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5860_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LoanDetails)11969_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.LoanDetails",
        "members": [
          {
            "astId": 11966,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11968,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "authWriteOff",
            "offset": 16,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NFTAsset)11905_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.NFTAsset",
        "members": [
          {
            "astId": 11902,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11904,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTDetails)11949_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.NFTDetails",
        "members": [
          {
            "astId": 11916,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "futureValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11918,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "maturityDate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11920,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "risk",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 11922,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "debtor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11924,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "principalTokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11926,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "salt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11928,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "issuanceBlockTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11930,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11933,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "assetPurpose",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(ASSET_PURPOSE)11765"
          },
          {
            "astId": 11935,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "termsParam",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 11937,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "principalAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11939,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "termStartUnixTimestamp",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 11941,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "termEndUnixTimestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 11944,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "amortizationUnitType",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(AmortizationUnitType)12631"
          },
          {
            "astId": 11946,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "termLengthInAmortizationUnits",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 11948,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "interestRate",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Rate)11964_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Rate",
        "members": [
          {
            "astId": 11951,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "pie",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11953,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "chi",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11955,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11957,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "penaltyRatePerSecond",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11959,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "penaltyChi",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11961,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint48"
          },
          {
            "astId": 11963,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "timeStartPenalty",
            "offset": 6,
            "slot": "5",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RiskScore)11882_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.RiskScore",
        "members": [
          {
            "astId": 11861,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "daysPastDue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11863,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "advanceRate",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11865,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "penaltyRate",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11867,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "interestRate",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11869,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "probabilityOfDefault",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11871,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "lossGivenDefault",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11873,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "writeOffAfterGracePeriod",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11875,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "gracePeriod",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11877,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "collectionPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 11879,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "writeOffAfterCollectionPeriod",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 11881,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "discountRate",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5860_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5855,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5859,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)12102_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Storage",
        "members": [
          {
            "astId": 11978,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "validatorRequired",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11980,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "firstAssetTimestamp",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 11984,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "riskScores",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RiskScore)11882_storage)dyn_storage"
          },
          {
            "astId": 11988,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "nftAssets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(NFTAsset)11905_storage)dyn_storage"
          },
          {
            "astId": 11991,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "tokenAssetAddresses",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11995,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "existsTokenAssetAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 11997,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "sotToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11999,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "jotToken",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 12001,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "underlyingCurrency",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 12003,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "incomeReserve",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12005,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "capitalReserve",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12007,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "beneficiary",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 12009,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "protocolFee",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 12011,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "earlyExitFee",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 12013,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "exitTimestamp",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 12015,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "minFirstLossCushion",
            "offset": 0,
            "slot": "14",
            "type": "t_uint32"
          },
          {
            "astId": 12017,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "openingBlockTimestamp",
            "offset": 4,
            "slot": "14",
            "type": "t_uint64"
          },
          {
            "astId": 12019,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "pot",
            "offset": 12,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 12021,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "paidPrincipalAmountSOT",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 12023,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "interestRateSOT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 12025,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "totalAssetRepaidCurrency",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 12027,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 12033,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "rates",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Rate)11964_storage)"
          },
          {
            "astId": 12037,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "pie",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12042,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "loanRates",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12045,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "loanCount",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 12049,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "balances",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12051,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "balance",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 12056,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "details",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_bytes32,t_struct(NFTDetails)11949_storage)"
          },
          {
            "astId": 12061,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "loanDetails",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_struct(LoanDetails)11969_storage)"
          },
          {
            "astId": 12065,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "buckets",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12069,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "writeOffGroups",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(WriteOffGroup)11976_storage)dyn_storage"
          },
          {
            "astId": 12071,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "discountRate",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256"
          },
          {
            "astId": 12073,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "latestNAV",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256"
          },
          {
            "astId": 12075,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "latestDiscount",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          },
          {
            "astId": 12077,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "lastNAVUpdate",
            "offset": 0,
            "slot": "32",
            "type": "t_uint256"
          },
          {
            "astId": 12079,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "overdueLoans",
            "offset": 0,
            "slot": "33",
            "type": "t_uint256"
          },
          {
            "astId": 12083,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "latestDiscountOfNavAssets",
            "offset": 0,
            "slot": "34",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 12087,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "overdueLoansOfNavAssets",
            "offset": 0,
            "slot": "35",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 12091,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "loanToNFT",
            "offset": 0,
            "slot": "36",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 12093,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "totalPrincipalRepaid",
            "offset": 0,
            "slot": "37",
            "type": "t_uint256"
          },
          {
            "astId": 12095,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "totalInterestRepaid",
            "offset": 0,
            "slot": "38",
            "type": "t_uint256"
          },
          {
            "astId": 12097,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "seniorDebt",
            "offset": 0,
            "slot": "39",
            "type": "t_uint256"
          },
          {
            "astId": 12099,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "seniorBalance",
            "offset": 0,
            "slot": "40",
            "type": "t_uint256"
          },
          {
            "astId": 12101,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "lastUpdateSeniorInterest",
            "offset": 0,
            "slot": "41",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "1344"
      },
      "t_struct(WriteOffGroup)11976_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.WriteOffGroup",
        "members": [
          {
            "astId": 11971,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "percentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11973,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "overdueDays",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11975,
            "contract": "contracts/protocol/pool/Pool.sol:Pool",
            "label": "riskIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}