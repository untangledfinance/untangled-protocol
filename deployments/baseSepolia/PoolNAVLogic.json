{
  "address": "0xFb94240006b52111570eB6C28Bb195f9b5908c99",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "futureValue",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maturityDate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "risk",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "principalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuanceBlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum Configuration.ASSET_PURPOSE",
              "name": "assetPurpose",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "termsParam",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termStartUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termEndUnixTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum UnpackLoanParamtersLib.AmortizationUnitType",
              "name": "amortizationUnitType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "termLengthInAmortizationUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.NFTDetails",
          "name": "nftdetails",
          "type": "tuple"
        }
      ],
      "name": "AddLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate_",
          "type": "uint256"
        }
      ],
      "name": "SetLoanMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "risk",
          "type": "uint256"
        }
      ],
      "name": "UpdateAssetRiskScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loan",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "writeOffGroupsIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "override_",
          "type": "bool"
        }
      ],
      "name": "WriteOff",
      "type": "event"
    }
  ],
  "transactionHash": "0x6559a9326606cb978e6bbe0efc3876372619ab0fcd15fb42d586f829a431554a",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0xFb94240006b52111570eB6C28Bb195f9b5908c99",
    "transactionIndex": 15,
    "gasUsed": "3286280",
    "logsBloom": "0x
    "blockHash": "0x9d18a1b91f8df4211bc690446eb996deca4c7a236783aa83888bd11bc443d9f0",
    "transactionHash": "0x6559a9326606cb978e6bbe0efc3876372619ab0fcd15fb42d586f829a431554a",
    "logs": [],
    "blockNumber": 16265740,
    "cumulativeGasUsed": "6937916",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28c74a8c94428243a2756fd51ab4a3b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"futureValue\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maturityDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"risk\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"principalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Configuration.ASSET_PURPOSE\",\"name\":\"assetPurpose\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"termsParam\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termStartUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndUnixTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum UnpackLoanParamtersLib.AmortizationUnitType\",\"name\":\"amortizationUnitType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"termLengthInAmortizationUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.NFTDetails\",\"name\":\"nftdetails\",\"type\":\"tuple\"}],\"name\":\"AddLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate_\",\"type\":\"uint256\"}],\"name\":\"SetLoanMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"name\":\"UpdateAssetRiskScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loan\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"writeOffGroupsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"override_\",\"type\":\"bool\"}],\"name\":\"WriteOff\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Untangled Team\",\"kind\":\"dev\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"params\":{\"name\":\"name of the parameter\",\"value\":\"new value of the parameter\"}},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"name\":\"name of the parameter group\",\"overdueDays_\":\"the number of days after which a loan is considered overdue\",\"writeOffPercentage_\":\"the write off rate in percent\"}},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"params\":{\"amounts\":\"the amounts repaid\",\"loans\":\"the ids of the loan\"}},\"writeOff(DataTypes.Storage storage,uint256)\":{\"params\":{\"loan\":\"the id of the loan\"}}},\"title\":\"Untangled's SecuritizaionPoolNAV contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"file(DataTypes.Storage storage,bytes32,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"file allows governance to change parameters of the contract\"},\"getExpectedLoanvalue(DataTypes.Storage storage,DataTypes.LoanEntry)\":{\"notice\":\"UTILITY FUNCTION \"},\"repayLoan(DataTypes.Storage storage,uint256[],uint256[])\":{\"notice\":\"repay updates the NAV for a new repaid loan\"},\"writeOff(DataTypes.Storage storage,uint256)\":{\"notice\":\"writeOff writes off a loan if it is overdue\"}},\"notice\":\"Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/PoolNAVLogic.sol\":\"PoolNAVLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        TOKEN_GENERATION_EVENT_FACTORY,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO,\\r\\n        NOTE_TOKEN_VAULT\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x667c8e731fed3ece0d945ec16fb7c55e668743b9bda26dc4d87de9dd8666d73f\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n        uint256 debtCeiling;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address tgeAddress;\\r\\n        address secondTGEAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        uint256 interestRateSOT;\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n        uint256 loanCount;\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b6120a2810775ef84487aa845d03070b7c10a0defa78324dce9d8e0b094abbd\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Discounting.sol\":{\"content\":\"/// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/discounting.sol -- Tinlake Discounting\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport './Math.sol';\\r\\n\\r\\n/// @notice Discounting contract without a state which defines the relevant formulas for the navfeed\\r\\nlibrary Discounting {\\r\\n    /// @notice calculates the discount for a given loan\\r\\n    /// @param discountRate the discount rate\\r\\n    /// @param fv the future value of the loan\\r\\n    /// @param normalizedBlockTimestamp the normalized block time (each day to midnight)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @return result discount for the loan\\r\\n    function calcDiscount(\\r\\n        uint256 discountRate,\\r\\n        uint256 fv,\\r\\n        uint256 normalizedBlockTimestamp,\\r\\n        uint256 maturityDate\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        return Math.rdiv(fv, rpow(discountRate, Math.safeSub(maturityDate, normalizedBlockTimestamp), Math.ONE));\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the future value based on the amount, maturityDate interestRate and recoveryRate\\r\\n    /// @param loanInterestRate the interest rate of the loan\\r\\n    /// @param amount of the loan (principal)\\r\\n    /// @param maturityDate the maturity date of the loan\\r\\n    /// @param recoveryRatePD the recovery rate together with the probability of default of the loan\\r\\n    /// @return fv future value of the loan\\r\\n    function calcFutureValue(\\r\\n        uint256 loanInterestRate,\\r\\n        uint256 amount,\\r\\n        uint256 maturityDate,\\r\\n        uint256 recoveryRatePD\\r\\n    ) internal view returns (uint256 fv) {\\r\\n        uint256 nnow = uniqueDayTimestamp(block.timestamp);\\r\\n        uint256 timeRemaining = 0;\\r\\n        if (maturityDate > nnow) {\\r\\n            timeRemaining = Math.safeSub(maturityDate, nnow);\\r\\n        }\\r\\n\\r\\n        return Math.rmul(Math.rmul(rpow(loanInterestRate, timeRemaining, Math.ONE), amount), recoveryRatePD);\\r\\n    }\\r\\n\\r\\n    /// @notice substracts to values if the result smaller than 0 it returns 0\\r\\n    /// @param x the first value (minuend)\\r\\n    /// @param y the second value (subtrahend)\\r\\n    /// @return result result of the subtraction\\r\\n    function secureSub(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (y > x) {\\r\\n            return 0;\\r\\n        }\\r\\n        return Math.safeSub(x, y);\\r\\n    }\\r\\n\\r\\n    /// @notice normalizes a timestamp to round down to the nearest midnight (UTC)\\r\\n    /// @param timestamp the timestamp which should be normalized\\r\\n    /// @return nTimestamp normalized timestamp\\r\\n    function uniqueDayTimestamp(uint256 timestamp) internal pure returns (uint256 nTimestamp) {\\r\\n        return (1 days) * (timestamp / (1 days));\\r\\n    }\\r\\n\\r\\n    /// @notice rpow peforms a math pow operation with fixed point number\\r\\n    /// adopted from ds-math\\r\\n    /// @param x the base for the pow operation\\r\\n    /// @param n the exponent for the pow operation\\r\\n    /// @param base the base of the fixed point number\\r\\n    /// @return z the result of the pow operation\\r\\n\\r\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c5b75f63c3bbe2ed6cc9d676385802140bdd5aef5fc238807b652d946661b49\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// tinlake-math/math.sol -- Tinlake Math\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Math {\\r\\n    uint256 constant ONE = 10 ** 27;\\r\\n\\r\\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'safe-add-failed');\\r\\n    }\\r\\n\\r\\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'safe-sub-failed');\\r\\n    }\\r\\n\\r\\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'safe-mul-failed');\\r\\n    }\\r\\n\\r\\n    function safeDiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x / y;\\r\\n    }\\r\\n\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = safeMul(x, y) / ONE;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y > 0, 'division by zero');\\r\\n        // always rounds up\\r\\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5da55cb6423fc2810924e3ebea355caae8b5108c280fd3cba416e30083d8526f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General internal License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General internal License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General internal License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary GenericLogic {\\r\\n    event SetRate(bytes32 indexed loan, uint256 rate);\\r\\n    event ChangeRate(bytes32 indexed loan, uint256 newRate);\\r\\n\\r\\n    /** GETTER */\\r\\n    /// @notice getter function for the maturityDate\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return maturityDate_ the maturityDate of the nft\\r\\n    function maturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nft_\\r\\n    ) internal view returns (uint256 maturityDate_) {\\r\\n        return uint256(_poolStorage.details[nft_].maturityDate);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the risk group\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return risk_ the risk group of the nft\\r\\n\\r\\n    function risk(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 risk_) {\\r\\n        return uint256(_poolStorage.details[nft_].risk);\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the nft value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return nftValue_ the value of the nft\\r\\n\\r\\n    /// @notice getter function for the future value\\r\\n    /// @param nft_ the id of the nft based on the hash of registry and tokenId\\r\\n    /// @return fv_ future value of the loan\\r\\n    function futureValue(DataTypes.Storage storage _poolStorage, bytes32 nft_) internal view returns (uint256 fv_) {\\r\\n        return uint256(_poolStorage.details[nft_].futureValue);\\r\\n    }\\r\\n\\r\\n    // function discountRate() internal view  returns (uint256) {\\r\\n    //     return uint256(_getStorage().discountRate);\\r\\n    // }\\r\\n\\r\\n    /// @notice getter function for the recovery rate PD\\r\\n    /// @param riskID id of a risk group\\r\\n    /// @return recoveryRatePD_ recovery rate PD of the risk group\\r\\n    function recoveryRatePD(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 riskID,\\r\\n        uint256 termLength\\r\\n    ) internal view returns (uint256 recoveryRatePD_) {\\r\\n        DataTypes.RiskScore memory riskParam = getRiskScoreByIdx(riskScores, riskID);\\r\\n\\r\\n        return\\r\\n            Discounting.secureSub(\\r\\n                Math.ONE,\\r\\n                (Math.ONE * riskParam.probabilityOfDefault * riskParam.lossGivenDefault * termLength) /\\r\\n                    (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice getter function for the borrowed amount\\r\\n    /// @param loan id of a loan\\r\\n    /// @return borrowed_ borrowed amount of the loan\\r\\n    function borrowed(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 borrowed_) {\\r\\n        return uint256(_poolStorage.loanDetails[loan].borrowed);\\r\\n    }\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n    // TODO have to use modifier in main contract\\r\\n    function getRiskScoreByIdx(\\r\\n        DataTypes.RiskScore[] storage riskScores,\\r\\n        uint256 idx\\r\\n    ) internal view returns (DataTypes.RiskScore memory) {\\r\\n        if (idx == 0 || riskScores.length == 0) {\\r\\n            // Default risk score\\r\\n            return\\r\\n                DataTypes.RiskScore({\\r\\n                    daysPastDue: 0,\\r\\n                    advanceRate: 1000000,\\r\\n                    penaltyRate: 0,\\r\\n                    interestRate: 0,\\r\\n                    probabilityOfDefault: 0,\\r\\n                    lossGivenDefault: 0,\\r\\n                    writeOffAfterGracePeriod: 0,\\r\\n                    gracePeriod: 0,\\r\\n                    collectionPeriod: 0,\\r\\n                    writeOffAfterCollectionPeriod: 0,\\r\\n                    discountRate: 0\\r\\n                });\\r\\n        }\\r\\n        // Because risk score upload = risk score index onchain + 1\\r\\n        idx = idx - 1;\\r\\n        return riskScores[idx];\\r\\n    }\\r\\n\\r\\n    /// @notice converts a uint256 to uint128\\r\\n    /// @param value the value to be converted\\r\\n    /// @return converted value to uint128\\r\\n    function toUint128(uint256 value) internal pure returns (uint128 converted) {\\r\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n\\r\\n    // TODO have to use modifier in main contract\\r\\n\\r\\n    /// @notice returns if a loan is written off\\r\\n    /// @param loan the id of the loan\\r\\n    function isLoanWrittenOff(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (bool) {\\r\\n        return _poolStorage.loanRates[loan] >= WRITEOFF_RATE_GROUP_START;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV\\r\\n    /// @return nav_ current NAV\\r\\n    function currentNAV(DataTypes.Storage storage _poolStorage) internal view returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    function currentNAVAsset(DataTypes.Storage storage _poolStorage, bytes32 tokenId) internal view returns (uint256) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentAV(_poolStorage, tokenId);\\r\\n        return Math.safeAdd(totalDiscount, Math.safeAdd(overdue, writeOffs));\\r\\n    }\\r\\n\\r\\n    /// @notice calculates the present value of the loans together with overdue and written off loans\\r\\n    /// @return totalDiscount the present value of the loans\\r\\n    /// @return overdue the present value of the overdue loans\\r\\n    /// @return writeOffs the present value of the written off loans\\r\\n    function currentPVs(\\r\\n        DataTypes.Storage storage _poolStorage\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 latestDiscount;\\r\\n        uint256 overdueLoans;\\r\\n        uint256 discountRate;\\r\\n        uint256 lastNAVUpdate;\\r\\n        {\\r\\n            latestDiscount = _poolStorage.latestDiscount;\\r\\n            overdueLoans = _poolStorage.overdueLoans;\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n        }\\r\\n        if (latestDiscount == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoans, currentWriteOffs(_poolStorage));\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // find all new overdue loans since the last update\\r\\n        // calculate the discount of the overdue loans which is needed\\r\\n        // for the total discount calculation\\r\\n        for (uint256 i = lastNAVUpdate; i < nnow; i = i + 1 days) {\\r\\n            uint256 b = _poolStorage.buckets[i];\\r\\n            if (b != 0) {\\r\\n                errPV = Math.safeAdd(\\r\\n                    errPV,\\r\\n                    Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, i), Math.ONE))\\r\\n                );\\r\\n                overdue = Math.safeAdd(overdue, b);\\r\\n            }\\r\\n        }\\r\\n        return (\\r\\n            // calculate current totalDiscount based on the previous totalDiscount (optimized calculation)\\r\\n            // the overdue loans are incorrectly in this new result with their current PV and need to be removed\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(latestDiscount, Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)),\\r\\n                errPV\\r\\n            ),\\r\\n            // current overdue loans not written off\\r\\n            Math.safeAdd(overdueLoans, overdue),\\r\\n            // current write-offs loans\\r\\n            currentWriteOffs(_poolStorage)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function currentAV(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 tokenId\\r\\n    ) internal view returns (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) {\\r\\n        uint256 _currentWriteOffs = 0;\\r\\n        uint256 discountRate;\\r\\n        uint256 latestDiscountOfNavAssetsID;\\r\\n        uint256 lastNAVUpdate;\\r\\n        uint256 overdueLoansOfNavAssetsID;\\r\\n        {\\r\\n            discountRate = _poolStorage.discountRate;\\r\\n            latestDiscountOfNavAssetsID = _poolStorage.latestDiscountOfNavAssets[tokenId];\\r\\n            lastNAVUpdate = _poolStorage.lastNAVUpdate;\\r\\n            overdueLoansOfNavAssetsID = _poolStorage.overdueLoansOfNavAssets[tokenId];\\r\\n        }\\r\\n\\r\\n        if (isLoanWrittenOff(_poolStorage, uint256(tokenId))) {\\r\\n            uint256 writeOffGroupIndex = currentValidWriteOffGroup(_poolStorage, uint256(tokenId));\\r\\n            _currentWriteOffs = Math.rmul(\\r\\n                debt(_poolStorage, uint256(tokenId)),\\r\\n                uint256(_poolStorage.writeOffGroups[writeOffGroupIndex].percentage)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (latestDiscountOfNavAssetsID == 0) {\\r\\n            // all loans are overdue or writtenOff\\r\\n            return (0, overdueLoansOfNavAssetsID, _currentWriteOffs);\\r\\n        }\\r\\n\\r\\n        uint256 errPV = 0;\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        // loan is overdue since lastNAVUpdate\\r\\n        uint256 mat = Discounting.uniqueDayTimestamp(maturityDate(_poolStorage, tokenId));\\r\\n        if (mat >= lastNAVUpdate && mat < nnow) {\\r\\n            uint256 b = futureValue(_poolStorage, tokenId);\\r\\n            errPV = Math.rmul(b, Discounting.rpow(discountRate, Math.safeSub(nnow, mat), Math.ONE));\\r\\n            overdue = b;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            Discounting.secureSub(\\r\\n                Math.rmul(\\r\\n                    latestDiscountOfNavAssetsID,\\r\\n                    Discounting.rpow(discountRate, Math.safeSub(nnow, lastNAVUpdate), Math.ONE)\\r\\n                ),\\r\\n                errPV\\r\\n            ),\\r\\n            Math.safeAdd(overdueLoansOfNavAssetsID, overdue),\\r\\n            _currentWriteOffs\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the sum of all write off loans\\r\\n    /// @return sum of all write off loans\\r\\n    function currentWriteOffs(DataTypes.Storage storage _poolStorage) internal view returns (uint256 sum) {\\r\\n        for (uint256 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            // multiply writeOffGroupDebt with the writeOff rate\\r\\n\\r\\n            sum = Math.safeAdd(\\r\\n                sum,\\r\\n                Math.rmul(\\r\\n                    rateDebt(_poolStorage, WRITEOFF_RATE_GROUP_START + i),\\r\\n                    uint256(_poolStorage.writeOffGroups[i].percentage)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /// @notice calculates and returns the current NAV and updates the state\\r\\n    /// @return nav_ current NAV\\r\\n    function calcUpdateNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        (uint256 totalDiscount, uint256 overdue, uint256 writeOffs) = currentPVs(_poolStorage);\\r\\n\\r\\n        for (uint i = 0; i < _poolStorage.loanCount; ++i) {\\r\\n            bytes32 _nftID = _poolStorage.loanToNFT[i];\\r\\n\\r\\n            (uint256 td, uint256 ol, ) = currentAV(_poolStorage, _nftID);\\r\\n            _poolStorage.overdueLoansOfNavAssets[_nftID] = ol;\\r\\n            _poolStorage.latestDiscountOfNavAssets[_nftID] = td;\\r\\n        }\\r\\n\\r\\n        _poolStorage.overdueLoans = overdue;\\r\\n        _poolStorage.latestDiscount = totalDiscount;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(Math.safeAdd(totalDiscount, overdue), writeOffs);\\r\\n        _poolStorage.lastNAVUpdate = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice re-calculates the nav in a non-optimized way\\r\\n    ///  the method is not updating the NAV to latest block.timestamp\\r\\n    /// @return nav_ current NAV\\r\\n    function reCalcNAV(DataTypes.Storage storage _poolStorage) internal returns (uint256 nav_) {\\r\\n        // reCalcTotalDiscount\\r\\n        /// @notice re-calculates the totalDiscount in a non-optimized way based on lastNAVUpdate\\r\\n        /// @return latestDiscount_ returns the total discount of the active loans\\r\\n        uint256 latestDiscount_ = 0;\\r\\n        for (uint256 count = 0; count < _poolStorage.loanCount; count++) {\\r\\n            uint256 loanID = _poolStorage.nftAssets[count].tokenId;\\r\\n            bytes32 nftID_ = nftID(loanID);\\r\\n            uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n            if (maturityDate_ < _poolStorage.lastNAVUpdate) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 discountIncrease_ = Discounting.calcDiscount(\\r\\n                _poolStorage.discountRate,\\r\\n                futureValue(_poolStorage, nftID_),\\r\\n                _poolStorage.lastNAVUpdate,\\r\\n                maturityDate_\\r\\n            );\\r\\n            latestDiscount_ = Math.safeAdd(latestDiscount_, discountIncrease_);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = discountIncrease_;\\r\\n        }\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestDiscount_,\\r\\n            Math.safeSub(_poolStorage.latestNAV, _poolStorage.latestDiscount)\\r\\n        );\\r\\n        _poolStorage.latestDiscount = latestDiscount_;\\r\\n        return _poolStorage.latestNAV;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the nftID for the underlying collateral nft\\r\\n    /// @param loan the loan id\\r\\n    /// @return nftID_ the nftID of the loan\\r\\n    function nftID(uint256 loan) internal pure returns (bytes32 nftID_) {\\r\\n        return bytes32(loan);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the current valid write off group of a loan\\r\\n    /// @param loan the loan id\\r\\n    /// @return writeOffGroup_ the current valid write off group of a loan\\r\\n    function currentValidWriteOffGroup(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 writeOffGroup_) {\\r\\n        bytes32 nftID_ = nftID(loan);\\r\\n        uint256 maturityDate_ = maturityDate(_poolStorage, nftID_);\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        DataTypes.NFTDetails memory nftDetail = getAsset(_poolStorage, nftID_);\\r\\n\\r\\n        uint128 _loanRiskIndex = nftDetail.risk - 1;\\r\\n\\r\\n        uint128 lastValidWriteOff = type(uint128).max;\\r\\n        uint128 highestOverdueDays = 0;\\r\\n        // it is not guaranteed that writeOff groups are sorted by overdue days\\r\\n        for (uint128 i = 0; i < _poolStorage.writeOffGroups.length; i++) {\\r\\n            uint128 overdueDays = _poolStorage.writeOffGroups[i].overdueDays;\\r\\n            if (\\r\\n                _poolStorage.writeOffGroups[i].riskIndex == _loanRiskIndex &&\\r\\n                overdueDays >= highestOverdueDays &&\\r\\n                nnow >= maturityDate_ + overdueDays * 1 days\\r\\n            ) {\\r\\n                lastValidWriteOff = i;\\r\\n                highestOverdueDays = overdueDays;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // returns type(uint128).max if no write-off group is valid for this loan\\r\\n        return lastValidWriteOff;\\r\\n    }\\r\\n\\r\\n    function debt(DataTypes.Storage storage _poolStorage, uint256 loan) internal view returns (uint256 loanDebt) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        uint256 chi_ = _poolStorage.rates[rate_].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate_].penaltyChi;\\r\\n        if (block.timestamp >= _poolStorage.rates[rate_].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].chi,\\r\\n                _poolStorage.rates[rate_].ratePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate_].penaltyChi,\\r\\n                _poolStorage.rates[rate_].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate_].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function debtWithChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 chi,\\r\\n        uint256 penaltyChi\\r\\n    ) internal view returns (uint256 loanDebt) {\\r\\n        if (penaltyChi == 0) {\\r\\n            return toAmount(chi, _poolStorage.pie[loan]);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi, toAmount(chi, _poolStorage.pie[loan]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chiAndPenaltyChi(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan\\r\\n    ) internal view returns (uint256 chi, uint256 penaltyChi) {\\r\\n        uint256 rate_ = _poolStorage.loanRates[loan];\\r\\n        chi = _poolStorage.rates[rate_].chi;\\r\\n        penaltyChi = _poolStorage.rates[rate_].penaltyChi;\\r\\n    }\\r\\n\\r\\n    function rateDebt(DataTypes.Storage storage _poolStorage, uint256 rate) internal view returns (uint256 totalDebt) {\\r\\n        uint256 chi_ = _poolStorage.rates[rate].chi;\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        uint256 pie_ = _poolStorage.rates[rate].pie;\\r\\n\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            chi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n            penaltyChi_ = chargeInterest(\\r\\n                _poolStorage.rates[rate].penaltyChi,\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (penaltyChi_ == 0) {\\r\\n            return toAmount(chi_, pie_);\\r\\n        } else {\\r\\n            return toAmount(penaltyChi_, toAmount(chi_, pie_));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 rate) internal {\\r\\n        require(_poolStorage.pie[loan] == 0, 'non-zero-debt');\\r\\n        // rate category has to be initiated\\r\\n        require(_poolStorage.rates[rate].chi != 0, 'rate-group-not-set');\\r\\n        _poolStorage.loanRates[loan] = rate;\\r\\n        emit SetRate(nftID(loan), rate);\\r\\n    }\\r\\n\\r\\n    function changeRate(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 newRate) internal {\\r\\n        require(_poolStorage.rates[newRate].chi != 0, 'rate-group-not-set');\\r\\n        if (newRate >= WRITEOFF_RATE_GROUP_START) {\\r\\n            _poolStorage.rates[newRate].timeStartPenalty = uint48(block.timestamp);\\r\\n        }\\r\\n        uint256 currentRate = _poolStorage.loanRates[loan];\\r\\n        drip(_poolStorage, currentRate);\\r\\n        drip(_poolStorage, newRate);\\r\\n        uint256 pie_ = _poolStorage.pie[loan];\\r\\n        uint256 debt_ = toAmount(_poolStorage.rates[currentRate].chi, pie_);\\r\\n        _poolStorage.rates[currentRate].pie = Math.safeSub(_poolStorage.rates[currentRate].pie, pie_);\\r\\n        _poolStorage.pie[loan] = toPie(_poolStorage.rates[newRate].chi, debt_);\\r\\n        _poolStorage.rates[newRate].pie = Math.safeAdd(_poolStorage.rates[newRate].pie, _poolStorage.pie[loan]);\\r\\n        _poolStorage.loanRates[loan] = newRate;\\r\\n        emit ChangeRate(nftID(loan), newRate);\\r\\n    }\\r\\n\\r\\n    function accrue(DataTypes.Storage storage _poolStorage, uint256 loan) internal {\\r\\n        drip(_poolStorage, _poolStorage.loanRates[loan]);\\r\\n    }\\r\\n\\r\\n    function drip(DataTypes.Storage storage _poolStorage, uint256 rate) internal {\\r\\n        if (block.timestamp >= _poolStorage.rates[rate].lastUpdated) {\\r\\n            (uint256 chi, ) = compounding(\\r\\n                _poolStorage.rates[rate].chi,\\r\\n                _poolStorage.rates[rate].ratePerSecond,\\r\\n                _poolStorage.rates[rate].lastUpdated,\\r\\n                _poolStorage.rates[rate].pie\\r\\n            );\\r\\n            _poolStorage.rates[rate].chi = chi;\\r\\n            if (\\r\\n                _poolStorage.rates[rate].penaltyRatePerSecond != 0 &&\\r\\n                _poolStorage.rates[rate].timeStartPenalty != 0 &&\\r\\n                block.timestamp >= _poolStorage.rates[rate].timeStartPenalty\\r\\n            ) {\\r\\n                uint lastUpdated_ = _poolStorage.rates[rate].lastUpdated > _poolStorage.rates[rate].timeStartPenalty\\r\\n                    ? _poolStorage.rates[rate].lastUpdated\\r\\n                    : _poolStorage.rates[rate].timeStartPenalty;\\r\\n                (uint256 penaltyChi, ) = compounding(\\r\\n                    _poolStorage.rates[rate].penaltyChi,\\r\\n                    _poolStorage.rates[rate].penaltyRatePerSecond,\\r\\n                    lastUpdated_,\\r\\n                    _poolStorage.rates[rate].pie\\r\\n                );\\r\\n                _poolStorage.rates[rate].penaltyChi = penaltyChi;\\r\\n            }\\r\\n            _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Interest functions\\r\\n    // @notice This function provides compounding in seconds\\r\\n    // @param chi Accumulated interest rate over time\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated When the interest rate was last updated\\r\\n    // @param _pie Total sum of all amounts accumulating under one interest rate, divided by that rate\\r\\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\\r\\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint _pie) internal view returns (uint, uint) {\\r\\n        require(block.timestamp >= lastUpdated, 'tinlake-math/invalid-timestamp');\\r\\n        require(chi != 0);\\r\\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\\r\\n        uint updatedChi = _chargeInterest(chi, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        return (updatedChi, Math.safeSub(Math.rmul(updatedChi, _pie), Math.rmul(chi, _pie)));\\r\\n    }\\r\\n\\r\\n    // @notice This function charge interest on a interestBearingAmount\\r\\n    // @param interestBearingAmount is the interest bearing amount\\r\\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\\u02c627)\\r\\n    // @param lastUpdated last time the interest has been charged\\r\\n    // @return interestBearingAmount + interest\\r\\n    function chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated\\r\\n    ) internal view returns (uint) {\\r\\n        if (block.timestamp >= lastUpdated) {\\r\\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\\r\\n        }\\r\\n        return interestBearingAmount;\\r\\n    }\\r\\n\\r\\n    function _chargeInterest(\\r\\n        uint interestBearingAmount,\\r\\n        uint ratePerSecond,\\r\\n        uint lastUpdated,\\r\\n        uint current\\r\\n    ) internal pure returns (uint) {\\r\\n        return Math.rmul(Discounting.rpow(ratePerSecond, current - lastUpdated, Math.ONE), interestBearingAmount);\\r\\n    }\\r\\n\\r\\n    // convert pie to debt/savings amount\\r\\n    function toAmount(uint chi, uint _pie) internal pure returns (uint) {\\r\\n        return Math.rmul(_pie, chi);\\r\\n    }\\r\\n\\r\\n    // convert debt/savings amount to pie\\r\\n    function toPie(uint chi, uint amount) internal pure returns (uint) {\\r\\n        return Math.rdivup(amount, chi);\\r\\n    }\\r\\n\\r\\n    function getAsset(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 agreementId\\r\\n    ) internal view returns (DataTypes.NFTDetails memory) {\\r\\n        return _poolStorage.details[agreementId];\\r\\n    }\\r\\n\\r\\n    function reserve(DataTypes.Storage storage _poolStorage) internal view returns (uint256) {\\r\\n        return Math.safeAdd(_poolStorage.capitalReserve, _poolStorage.incomeReserve);\\r\\n    }\\r\\n\\r\\n    /// @param amortizationUnitType AmortizationUnitType enum\\r\\n    /// @return the corresponding length of the unit in seconds\\r\\n    function _getAmortizationUnitLengthInSeconds(\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType\\r\\n    ) private pure returns (uint256) {\\r\\n        if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MINUTES) {\\r\\n            return 1 minutes;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.HOURS) {\\r\\n            return 1 hours;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.DAYS) {\\r\\n            return 1 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.WEEKS) {\\r\\n            return 7 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.MONTHS) {\\r\\n            return 30 days;\\r\\n        } else if (amortizationUnitType == UnpackLoanParamtersLib.AmortizationUnitType.YEARS) {\\r\\n            return 365 days;\\r\\n        } else {\\r\\n            revert('Unknown amortization unit type.');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   Get parameters by Agreement ID (commitment hash)\\r\\n     */\\r\\n    function unpackParamsForAgreementID(\\r\\n        DataTypes.LoanEntry calldata loan\\r\\n    ) internal view returns (UnpackLoanParamtersLib.InterestParams memory params) {\\r\\n        // The principal amount denominated in the aforementioned token.\\r\\n        uint256 principalAmount;\\r\\n        // The interest rate accrued per amortization unit.\\r\\n        uint256 interestRate;\\r\\n        // The amortization unit in which the repayments installments schedule is defined.\\r\\n        uint256 rawAmortizationUnitType;\\r\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 gracePeriodInDays;\\r\\n\\r\\n        (\\r\\n            principalAmount,\\r\\n            interestRate,\\r\\n            rawAmortizationUnitType,\\r\\n            termLengthInAmortizationUnits,\\r\\n            gracePeriodInDays\\r\\n        ) = UnpackLoanParamtersLib.unpackParametersFromBytes(loan.termsParam);\\r\\n\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType = UnpackLoanParamtersLib.AmortizationUnitType(\\r\\n            rawAmortizationUnitType\\r\\n        );\\r\\n\\r\\n        // Grant the real origination date\\r\\n        termLengthInAmortizationUnits =\\r\\n            (loan.expirationTimestamp - block.timestamp) /\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        // Calculate term length base on Amortization Unit and number\\r\\n        uint256 termLengthInSeconds = termLengthInAmortizationUnits *\\r\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType);\\r\\n\\r\\n        return\\r\\n            UnpackLoanParamtersLib.InterestParams({\\r\\n                principalAmount: principalAmount,\\r\\n                interestRate: interestRate,\\r\\n                termStartUnixTimestamp: loan.issuanceBlockTimestamp,\\r\\n                termEndUnixTimestamp: termLengthInSeconds + loan.issuanceBlockTimestamp,\\r\\n                amortizationUnitType: amortizationUnitType,\\r\\n                termLengthInAmortizationUnits: termLengthInAmortizationUnits\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfd2dbe21507523c55ae86aaaaf7489af31db08a5e42c45456779d901c481bd9d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/logic/PoolNAVLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// https://github.com/centrifuge/tinlake\\r\\n// src/borrower/feed/navfeed.sol -- Tinlake NAV Feed\\r\\n\\r\\n// Copyright (C) 2022 Centrifuge\\r\\n// Copyright (C) 2023 Untangled.Finance\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity 0.8.19;\\r\\nimport '../UnpackLoanParamtersLib.sol';\\r\\nimport {DataTypes, ONE_HUNDRED_PERCENT, ONE, WRITEOFF_RATE_GROUP_START} from '../DataTypes.sol';\\r\\nimport {Math} from '../Math.sol';\\r\\nimport {Discounting} from '../Discounting.sol';\\r\\nimport {GenericLogic} from './GenericLogic.sol';\\r\\n\\r\\n/**\\r\\n * @title Untangled's SecuritizaionPoolNAV contract\\r\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\r\\n *  Automatically invests across borrower pools using an adjustable strategy.\\r\\n * @author Untangled Team\\r\\n */\\r\\nlibrary PoolNAVLogic {\\r\\n    event IncreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event DecreaseDebt(bytes32 indexed loan, uint256 currencyAmount);\\r\\n\\r\\n    // events\\r\\n    event SetLoanMaturity(bytes32 indexed loan, uint256 maturityDate_);\\r\\n    event WriteOff(bytes32 indexed loan, uint256 indexed writeOffGroupsIndex, bool override_);\\r\\n    event AddLoan(bytes32 indexed loan, uint256 principalAmount, DataTypes.NFTDetails nftdetails);\\r\\n    event Repay(bytes32 indexed loan, uint256 currencyAmount);\\r\\n    event UpdateAssetRiskScore(bytes32 loan, uint256 risk);\\r\\n\\r\\n    /** UTILITY FUNCTION */\\r\\n\\r\\n    function getExpectedLoanvalue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public view returns (uint256 principalAmount) {\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        principalAmount = (loanParam.principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n    }\\r\\n\\r\\n    function addLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        DataTypes.LoanEntry calldata loanEntry\\r\\n    ) public returns (uint256) {\\r\\n        bytes32 _tokenId = bytes32(loan);\\r\\n        UnpackLoanParamtersLib.InterestParams memory loanParam = GenericLogic.unpackParamsForAgreementID(loanEntry);\\r\\n\\r\\n        _poolStorage.details[_tokenId].risk = loanEntry.riskScore;\\r\\n        _poolStorage.details[_tokenId].debtor = loanEntry.debtor;\\r\\n        _poolStorage.details[_tokenId].expirationTimestamp = loanEntry.expirationTimestamp;\\r\\n        _poolStorage.details[_tokenId].principalTokenAddress = loanEntry.principalTokenAddress;\\r\\n        _poolStorage.details[_tokenId].salt = loanEntry.salt;\\r\\n        _poolStorage.details[_tokenId].issuanceBlockTimestamp = loanEntry.issuanceBlockTimestamp;\\r\\n        _poolStorage.details[_tokenId].assetPurpose = loanEntry.assetPurpose;\\r\\n        _poolStorage.details[_tokenId].termsParam = loanEntry.termsParam;\\r\\n\\r\\n        _poolStorage.details[_tokenId].principalAmount = loanParam.principalAmount;\\r\\n        _poolStorage.details[_tokenId].termStartUnixTimestamp = loanParam.termStartUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].termEndUnixTimestamp = loanParam.termEndUnixTimestamp;\\r\\n        _poolStorage.details[_tokenId].amortizationUnitType = loanParam.amortizationUnitType;\\r\\n        _poolStorage.details[_tokenId].termLengthInAmortizationUnits = loanParam.termLengthInAmortizationUnits;\\r\\n        _poolStorage.details[_tokenId].interestRate = loanParam.interestRate;\\r\\n\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(\\r\\n            _poolStorage.riskScores,\\r\\n            loanEntry.riskScore\\r\\n        );\\r\\n        uint256 principalAmount = loanParam.principalAmount;\\r\\n        uint256 _convertedInterestRate;\\r\\n\\r\\n        principalAmount = (principalAmount * riskParam.advanceRate) / (ONE_HUNDRED_PERCENT);\\r\\n        _convertedInterestRate = Math.ONE + (riskParam.interestRate * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n\\r\\n        _poolStorage.loanToNFT[_poolStorage.loanCount] = _tokenId;\\r\\n        _poolStorage.loanCount++;\\r\\n        setLoanMaturityDate(_poolStorage, _tokenId, loanParam.termEndUnixTimestamp);\\r\\n        if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n            // If interest rate is not set\\r\\n            _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n        }\\r\\n        GenericLogic.setRate(_poolStorage, loan, _convertedInterestRate);\\r\\n        GenericLogic.accrue(_poolStorage, loan);\\r\\n        _poolStorage.balances[loan] = Math.safeAdd(_poolStorage.balances[loan], principalAmount);\\r\\n        _poolStorage.balance = Math.safeAdd(_poolStorage.balance, principalAmount);\\r\\n\\r\\n        // increase NAV\\r\\n        borrow(_poolStorage, loan, principalAmount);\\r\\n        _incDebt(_poolStorage, loan, principalAmount);\\r\\n\\r\\n        emit AddLoan(_tokenId, principalAmount, _poolStorage.details[_tokenId]);\\r\\n\\r\\n        return principalAmount;\\r\\n    }\\r\\n\\r\\n    function setLoanMaturityDate(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        require((GenericLogic.futureValue(_poolStorage, nftID_) == 0), 'can-not-change-maturityDate-outstanding-debt');\\r\\n\\r\\n        _poolStorage.details[nftID_].maturityDate = GenericLogic.toUint128(\\r\\n            Discounting.uniqueDayTimestamp(maturityDate_)\\r\\n        );\\r\\n        emit SetLoanMaturity(nftID_, maturityDate_);\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter\\r\\n    /// @param value new value of the parameter\\r\\n\\r\\n    function file(DataTypes.Storage storage _poolStorage, bytes32 name, uint256 value) public {\\r\\n        if (name == 'discountRate') {\\r\\n            _poolStorage.discountRate = Math.ONE + (value * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n        } else {\\r\\n            revert('unknown config parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file allows governance to change parameters of the contract\\r\\n    /// @param name name of the parameter group\\r\\n    /// @param writeOffPercentage_ the write off rate in percent\\r\\n    /// @param overdueDays_ the number of days after which a loan is considered overdue\\r\\n\\r\\n    function file(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        bytes32 name,\\r\\n        uint256 rate_,\\r\\n        uint256 writeOffPercentage_,\\r\\n        uint256 overdueDays_,\\r\\n        uint256 penaltyRate_,\\r\\n        uint256 riskIndex\\r\\n    ) public {\\r\\n        if (name == 'writeOffGroup') {\\r\\n            uint256 index = _poolStorage.writeOffGroups.length;\\r\\n            uint256 _convertedInterestRate = Math.ONE + (rate_ * Math.ONE) / (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedWriteOffPercentage = Math.ONE - (writeOffPercentage_ * Math.ONE) / ONE_HUNDRED_PERCENT;\\r\\n            uint256 _convertedPenaltyRate = Math.ONE +\\r\\n                (Math.ONE * penaltyRate_ * rate_) /\\r\\n                (ONE_HUNDRED_PERCENT * ONE_HUNDRED_PERCENT * 365 days);\\r\\n            uint256 _convertedOverdueDays = overdueDays_ / 1 days;\\r\\n            _poolStorage.writeOffGroups.push(\\r\\n                DataTypes.WriteOffGroup(\\r\\n                    GenericLogic.toUint128(_convertedWriteOffPercentage),\\r\\n                    GenericLogic.toUint128(_convertedOverdueDays),\\r\\n                    GenericLogic.toUint128(riskIndex)\\r\\n                )\\r\\n            );\\r\\n            _file(_poolStorage, 'rate', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedInterestRate);\\r\\n            _file(_poolStorage, 'penalty', Math.safeAdd(WRITEOFF_RATE_GROUP_START, index), _convertedPenaltyRate);\\r\\n        } else {\\r\\n            revert('unknown name');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice file manages different state configs for the pile\\r\\n    /// only a ward can call this function\\r\\n    /// @param what what config to change\\r\\n    /// @param rate the interest rate group\\r\\n    /// @param value the value to change\\r\\n    function _file(DataTypes.Storage storage _poolStorage, bytes32 what, uint256 rate, uint256 value) private {\\r\\n        if (what == 'rate') {\\r\\n            require(value != 0, 'rate-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].chi == 0) {\\r\\n                _poolStorage.rates[rate].chi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n            _poolStorage.rates[rate].ratePerSecond = value;\\r\\n        } else if (what == 'penalty') {\\r\\n            require(value != 0, 'penalty-per-second-can-not-be-0');\\r\\n            if (_poolStorage.rates[rate].penaltyChi == 0) {\\r\\n                _poolStorage.rates[rate].penaltyChi = Math.ONE;\\r\\n                _poolStorage.rates[rate].lastUpdated = uint48(block.timestamp);\\r\\n            } else {\\r\\n                GenericLogic.drip(_poolStorage, rate);\\r\\n            }\\r\\n\\r\\n            _poolStorage.rates[rate].penaltyRatePerSecond = value;\\r\\n        } else {\\r\\n            revert('unknown parameter');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice borrow updates the NAV for a new borrowed loan\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param amount the amount borrowed\\r\\n    /// @return navIncrease the increase of the NAV impacted by the new borrow\\r\\n    function borrow(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 amount\\r\\n    ) private returns (uint256 navIncrease) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        require(maturityDate_ > nnow, 'maturity-date-is-not-in-the-future');\\r\\n\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        // uint256 beforeNAV = latestNAV;\\r\\n\\r\\n        // calculate amount including fixed fee if applicatable\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n\\r\\n        // calculate future value FV\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            amount,\\r\\n            maturityDate_,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.futureValue(_poolStorage, nftID_), fv)\\r\\n        );\\r\\n\\r\\n        // add future value to the bucket of assets with the same maturity date\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n        // increase borrowed amount for future ceiling computations\\r\\n        _poolStorage.loanDetails[loan].borrowed = GenericLogic.toUint128(\\r\\n            Math.safeAdd(GenericLogic.borrowed(_poolStorage, loan), amount)\\r\\n        );\\r\\n\\r\\n        // return increase NAV amount\\r\\n        navIncrease = Discounting.calcDiscount(_poolStorage.discountRate, fv, nnow, maturityDate_);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n\\r\\n        return navIncrease;\\r\\n    }\\r\\n\\r\\n    function _decreaseLoan(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 amount) private {\\r\\n        _poolStorage.latestNAV = Discounting.secureSub(\\r\\n            _poolStorage.latestNAV,\\r\\n            Math.rmul(\\r\\n                amount,\\r\\n                GenericLogic.toUint128(\\r\\n                    _poolStorage.writeOffGroups[_poolStorage.loanRates[loan] - WRITEOFF_RATE_GROUP_START].percentage\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        decDebt(_poolStorage, loan, amount);\\r\\n    }\\r\\n\\r\\n    function _calcFutureValue(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 _debt,\\r\\n        uint256 _maturityDate\\r\\n    ) private view returns (uint256) {\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, GenericLogic.nftID(loan));\\r\\n        uint256 fv = Discounting.calcFutureValue(\\r\\n            _rate.ratePerSecond,\\r\\n            _debt,\\r\\n            _maturityDate,\\r\\n            GenericLogic.recoveryRatePD(\\r\\n                _poolStorage.riskScores,\\r\\n                nftDetail.risk,\\r\\n                nftDetail.expirationTimestamp - nftDetail.issuanceBlockTimestamp\\r\\n            )\\r\\n        );\\r\\n        return fv;\\r\\n    }\\r\\n\\r\\n    /// @notice repay updates the NAV for a new repaid loan\\r\\n    /// @param loans the ids of the loan\\r\\n    /// @param amounts the amounts repaid\\r\\n    function repayLoan(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256[] calldata loans,\\r\\n        uint256[] calldata amounts\\r\\n    ) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n\\r\\n        uint256 numberOfLoans = loans.length;\\r\\n\\r\\n        uint256[] memory repayAmounts = new uint256[](numberOfLoans);\\r\\n        uint256[] memory previousDebts = new uint256[](numberOfLoans);\\r\\n\\r\\n        for (uint256 i; i < numberOfLoans; i++) {\\r\\n            uint256 loan = loans[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            // re-define: prevent stack too deep\\r\\n            DataTypes.Storage storage __poolStorage = _poolStorage;\\r\\n\\r\\n            GenericLogic.accrue(__poolStorage, loan);\\r\\n\\r\\n            if (nnow > __poolStorage.lastNAVUpdate) {\\r\\n                GenericLogic.calcUpdateNAV(__poolStorage);\\r\\n            }\\r\\n\\r\\n            // In case of successful repayment the latestNAV is decreased by the repaid amount\\r\\n            uint256 maturityDate_ = GenericLogic.maturityDate(__poolStorage, bytes32(loan));\\r\\n\\r\\n            uint256 _currentDebt = GenericLogic.debt(__poolStorage, loan);\\r\\n            if (amount > _currentDebt) {\\r\\n                amount = _currentDebt;\\r\\n            }\\r\\n\\r\\n            repayAmounts[i] = amount;\\r\\n            previousDebts[i] = _currentDebt;\\r\\n\\r\\n            // case 1: repayment of a written-off loan\\r\\n            if (GenericLogic.isLoanWrittenOff(__poolStorage, loan)) {\\r\\n                // update nav with write-off decrease\\r\\n                _decreaseLoan(__poolStorage, loan, amount);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 preFV = GenericLogic.futureValue(__poolStorage, bytes32(loan));\\r\\n            // in case of partial repayment, compute the fv of the remaining debt and add to the according fv bucket\\r\\n            uint256 fvDecrease = preFV;\\r\\n\\r\\n            // prevent stack too deep\\r\\n            {\\r\\n                uint256 fv = 0;\\r\\n                uint256 _debt = Math.safeSub(_currentDebt, amount); // Remaining\\r\\n                if (_debt != 0) {\\r\\n                    fv = _calcFutureValue(__poolStorage, loan, _debt, maturityDate_);\\r\\n                    if (preFV >= fv) {\\r\\n                        fvDecrease = Math.safeSub(preFV, fv);\\r\\n                    } else {\\r\\n                        fvDecrease = 0;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                __poolStorage.details[bytes32(loan)].futureValue = GenericLogic.toUint128(fv);\\r\\n            }\\r\\n\\r\\n            // case 2: repayment of a loan before or on maturity date\\r\\n            if (maturityDate_ >= nnow) {\\r\\n                // remove future value decrease from bucket\\r\\n                __poolStorage.buckets[maturityDate_] = Math.safeSub(__poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n\\r\\n                uint256 discountDecrease = Discounting.calcDiscount(\\r\\n                    __poolStorage.discountRate,\\r\\n                    fvDecrease,\\r\\n                    nnow,\\r\\n                    maturityDate_\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestDiscount = Discounting.secureSub(__poolStorage.latestDiscount, discountDecrease);\\r\\n                __poolStorage.latestDiscountOfNavAssets[bytes32(loan)] = Discounting.secureSub(\\r\\n                    __poolStorage.latestDiscountOfNavAssets[bytes32(loan)],\\r\\n                    discountDecrease\\r\\n                );\\r\\n\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, discountDecrease);\\r\\n            } else {\\r\\n                // case 3: repayment of an overdue loan\\r\\n                __poolStorage.overdueLoans = Math.safeSub(__poolStorage.overdueLoans, fvDecrease);\\r\\n                __poolStorage.overdueLoansOfNavAssets[bytes32(loan)] = Math.safeSub(\\r\\n                    __poolStorage.overdueLoansOfNavAssets[bytes32(loan)],\\r\\n                    fvDecrease\\r\\n                );\\r\\n                __poolStorage.latestNAV = Discounting.secureSub(__poolStorage.latestNAV, fvDecrease);\\r\\n            }\\r\\n\\r\\n            decDebt(__poolStorage, loan, amount);\\r\\n            emit Repay(bytes32(loan), amount);\\r\\n        }\\r\\n        return (repayAmounts, previousDebts);\\r\\n    }\\r\\n\\r\\n    /// @notice writeOff writes off a loan if it is overdue\\r\\n    /// @param loan the id of the loan\\r\\n    function writeOff(DataTypes.Storage storage _poolStorage, uint256 loan) public {\\r\\n        require(!_poolStorage.loanDetails[loan].authWriteOff, 'only-auth-write-off');\\r\\n\\r\\n        bytes32 nftID_ = GenericLogic.nftID(loan);\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n        require(maturityDate_ > 0, 'loan-does-not-exist');\\r\\n\\r\\n        // can not write-off healthy loans\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, nftDetail.risk);\\r\\n        require(maturityDate_ + riskParam.gracePeriod <= nnow, 'maturity-date-in-the-future');\\r\\n        // check the writeoff group based on the amount of days overdue\\r\\n        uint256 writeOffGroupIndex_ = GenericLogic.currentValidWriteOffGroup(_poolStorage, loan);\\r\\n\\r\\n        if (\\r\\n            writeOffGroupIndex_ < type(uint128).max &&\\r\\n            _poolStorage.loanRates[loan] != WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_\\r\\n        ) {\\r\\n            _writeOff(_poolStorage, loan, writeOffGroupIndex_, nftID_, maturityDate_);\\r\\n            emit WriteOff(nftID_, writeOffGroupIndex_, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal function for the write off\\r\\n    /// @param loan the id of the loan\\r\\n    /// @param writeOffGroupIndex_ the index of the writeoff group\\r\\n    /// @param nftID_ the nftID of the loan\\r\\n    /// @param maturityDate_ the maturity date of the loan\\r\\n    function _writeOff(\\r\\n        DataTypes.Storage storage _poolStorage,\\r\\n        uint256 loan,\\r\\n        uint256 writeOffGroupIndex_,\\r\\n        bytes32 nftID_,\\r\\n        uint256 maturityDate_\\r\\n    ) internal {\\r\\n        uint256 nnow = Discounting.uniqueDayTimestamp(block.timestamp);\\r\\n        // Ensure we have an up to date NAV\\r\\n        if (nnow > _poolStorage.lastNAVUpdate) {\\r\\n            GenericLogic.calcUpdateNAV(_poolStorage);\\r\\n        }\\r\\n\\r\\n        uint256 latestNAV_ = _poolStorage.latestNAV;\\r\\n\\r\\n        // first time written-off\\r\\n        if (!GenericLogic.isLoanWrittenOff(_poolStorage, loan)) {\\r\\n            uint256 fv = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            if (Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate) > maturityDate_) {\\r\\n                // write off after the maturity date\\r\\n                _poolStorage.overdueLoans = Discounting.secureSub(_poolStorage.overdueLoans, fv);\\r\\n                _poolStorage.overdueLoansOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.overdueLoansOfNavAssets[nftID_],\\r\\n                    fv\\r\\n                );\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, fv);\\r\\n            } else {\\r\\n                // write off before or on the maturity date\\r\\n                _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fv);\\r\\n\\r\\n                uint256 pv = Math.rmul(\\r\\n                    fv,\\r\\n                    Discounting.rpow(\\r\\n                        _poolStorage.discountRate,\\r\\n                        Math.safeSub(Discounting.uniqueDayTimestamp(maturityDate_), nnow),\\r\\n                        Math.ONE\\r\\n                    )\\r\\n                );\\r\\n                _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, pv);\\r\\n                _poolStorage.latestDiscountOfNavAssets[nftID_] = Discounting.secureSub(\\r\\n                    _poolStorage.latestDiscountOfNavAssets[nftID_],\\r\\n                    pv\\r\\n                );\\r\\n\\r\\n                latestNAV_ = Discounting.secureSub(latestNAV_, pv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        GenericLogic.changeRate(_poolStorage, loan, WRITEOFF_RATE_GROUP_START + writeOffGroupIndex_);\\r\\n        _poolStorage.latestNAV = Math.safeAdd(\\r\\n            latestNAV_,\\r\\n            Math.rmul(\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                _poolStorage.writeOffGroups[writeOffGroupIndex_].percentage\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateAssetRiskScore(DataTypes.Storage storage _poolStorage, bytes32 nftID_, uint256 risk_) public {\\r\\n        _poolStorage.details[nftID_].risk = GenericLogic.toUint128(risk_);\\r\\n\\r\\n        // switch of collateral risk group results in new: ceiling, threshold and interest rate for existing loan\\r\\n        // change to new rate interestRate immediately in pile if loan debt exists\\r\\n        uint256 loan = uint256(nftID_);\\r\\n        if (_poolStorage.pie[loan] != 0) {\\r\\n            DataTypes.RiskScore memory riskParam = GenericLogic.getRiskScoreByIdx(_poolStorage.riskScores, risk_);\\r\\n            uint256 _convertedInterestRate = Math.ONE +\\r\\n                (riskParam.interestRate * Math.ONE) /\\r\\n                (ONE_HUNDRED_PERCENT * 365 days);\\r\\n            if (_poolStorage.rates[_convertedInterestRate].ratePerSecond == 0) {\\r\\n                // If interest rate is not set\\r\\n                _file(_poolStorage, 'rate', _convertedInterestRate, _convertedInterestRate);\\r\\n            }\\r\\n            GenericLogic.changeRate(_poolStorage, loan, _convertedInterestRate);\\r\\n            _poolStorage.details[nftID_].interestRate = riskParam.interestRate;\\r\\n        }\\r\\n\\r\\n        // no currencyAmount borrowed yet\\r\\n        if (GenericLogic.futureValue(_poolStorage, nftID_) == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 maturityDate_ = GenericLogic.maturityDate(_poolStorage, nftID_);\\r\\n\\r\\n        // Changing the risk group of an nft, might lead to a new interest rate for the dependant loan.\\r\\n        // New interest rate leads to a future value.\\r\\n        // recalculation required\\r\\n\\r\\n        uint256 lastNAVUpdate = Discounting.uniqueDayTimestamp(_poolStorage.lastNAVUpdate);\\r\\n        {\\r\\n            uint256 fvDecrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n            uint256 navDecrease = _poolStorage.latestDiscountOfNavAssets[nftID_];\\r\\n            _poolStorage.buckets[maturityDate_] = Math.safeSub(_poolStorage.buckets[maturityDate_], fvDecrease);\\r\\n            _poolStorage.latestDiscount = Discounting.secureSub(_poolStorage.latestDiscount, navDecrease);\\r\\n            _poolStorage.latestDiscountOfNavAssets[nftID_] = 0;\\r\\n            _poolStorage.latestNAV = Discounting.secureSub(_poolStorage.latestNAV, navDecrease);\\r\\n        }\\r\\n\\r\\n        // update latest NAV\\r\\n        // update latest Discount\\r\\n        DataTypes.Rate memory _rate = _poolStorage.rates[_poolStorage.loanRates[loan]];\\r\\n        DataTypes.NFTDetails memory nftDetail = GenericLogic.getAsset(_poolStorage, bytes32(loan));\\r\\n        _poolStorage.details[nftID_].futureValue = GenericLogic.toUint128(\\r\\n            Discounting.calcFutureValue(\\r\\n                _rate.ratePerSecond,\\r\\n                GenericLogic.debt(_poolStorage, loan),\\r\\n                GenericLogic.maturityDate(_poolStorage, nftID_),\\r\\n                GenericLogic.recoveryRatePD(\\r\\n                    _poolStorage.riskScores,\\r\\n                    risk_,\\r\\n                    nftDetail.expirationTimestamp - block.timestamp\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        uint256 fvIncrease = GenericLogic.futureValue(_poolStorage, nftID_);\\r\\n        uint256 navIncrease = Discounting.calcDiscount(\\r\\n            _poolStorage.discountRate,\\r\\n            fvIncrease,\\r\\n            lastNAVUpdate,\\r\\n            maturityDate_\\r\\n        );\\r\\n        _poolStorage.buckets[maturityDate_] = Math.safeAdd(_poolStorage.buckets[maturityDate_], fvIncrease);\\r\\n        _poolStorage.latestDiscount = Math.safeAdd(_poolStorage.latestDiscount, navIncrease);\\r\\n        _poolStorage.latestDiscountOfNavAssets[nftID_] += navIncrease;\\r\\n        _poolStorage.latestNAV = Math.safeAdd(_poolStorage.latestNAV, navIncrease);\\r\\n        emit UpdateAssetRiskScore(nftID_, risk_);\\r\\n    }\\r\\n\\r\\n    function _incDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeAdd(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeAdd(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit IncreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n\\r\\n    function decDebt(DataTypes.Storage storage _poolStorage, uint256 loan, uint256 currencyAmount) private {\\r\\n        uint256 rate = _poolStorage.loanRates[loan];\\r\\n        require(block.timestamp == _poolStorage.rates[rate].lastUpdated, 'rate-group-not-updated');\\r\\n        uint256 penaltyChi_ = _poolStorage.rates[rate].penaltyChi;\\r\\n        if (penaltyChi_ > 0) {\\r\\n            currencyAmount = GenericLogic.toPie(penaltyChi_, currencyAmount);\\r\\n        }\\r\\n        uint256 pieAmount = GenericLogic.toPie(_poolStorage.rates[rate].chi, currencyAmount);\\r\\n\\r\\n        _poolStorage.pie[loan] = Math.safeSub(_poolStorage.pie[loan], pieAmount);\\r\\n        _poolStorage.rates[rate].pie = Math.safeSub(_poolStorage.rates[rate].pie, pieAmount);\\r\\n\\r\\n        emit DecreaseDebt(GenericLogic.nftID(loan), currencyAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a90f3bc53c58a6f95c09ce92dfb8bf88624984f97303d5df528c4f659c1bde8\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x613a7761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063a4571bbc11610065578063a4571bbc14610113578063a9eed69514610133578063b77604c514610146578063d580a21a1461016657600080fd5b80632f3e0ce01461008c57806356a5a299146100c3578063a2cfdc9b146100e5575b600080fd5b81801561009857600080fd5b506100ac6100a73660046134a4565b610186565b6040516100ba929190613559565b60405180910390f35b8180156100cf57600080fd5b506100e36100de36600461357e565b610503565b005b8180156100f157600080fd5b506101056101003660046135bd565b6108b3565b6040519081526020016100ba565b81801561011f57600080fd5b506100e361012e3660046135f4565b610c4f565b610105610141366004613616565b610e4f565b81801561015257600080fd5b506100e3610161366004613644565b610eaf565b81801561017257600080fd5b506100e361018136600461357e565b61113c565b6060806000610194426111f8565b90508560008167ffffffffffffffff8111156101b2576101b2613690565b6040519080825280602002602001820160405280156101db578160200160208202803683370190505b50905060008267ffffffffffffffff8111156101f9576101f9613690565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b50905060005b838110156104f25760008b8b83818110610244576102446136a6565b90506020020135905060008a8a84818110610261576102616136a6565b90506020020135905060008e9050610279818461121a565b80601b01548811156102905761028e8161123a565b505b600061029c82856112f6565b905060006102aa838661131d565b9050808411156102b8578093505b838887815181106102cb576102cb6136a6565b602002602001018181525050808787815181106102ea576102ea6136a6565b6020026020010181815250506103008386611420565b1561031a57610310838686611452565b50505050506104e0565b600061032684876114ea565b9050806000806103368589611509565b905080156103695761034a878a8389611559565b91508184106103645761035d8483611509565b9250610369565b600092505b6103728261161f565b60008a8152601489016020526040902080546001600160801b0319166001600160801b039290921691909117905550508b84106104445760008481526016860160205260409020546103c49082611509565b600085815260168701602052604081209190915560188601546103e990838f8861168c565b90506103f986601a0154826116b6565b601a8701556000888152601d8701602052604090205461041990826116b6565b6000898152601d88016020526040902055601986015461043990826116b6565b601987015550610498565b61045285601c015482611509565b601c8601556000878152601e860160205260409020546104729082611509565b6000888152601e87016020526040902055601985015461049290826116b6565b60198601555b6104a38588886116d9565b60405186815287907f59454c2c3385a95399182e59da91521ee5621f0211b9f016ff08b2e8e5fc98439060200160405180910390a2505050505050505b806104ea816136d2565b915050610228565b50909a909950975050505050505050565b61050c8161161f565b6000838152601485016020908152604080832060010180546001600160801b0319166001600160801b039590951694909417909355600f86019052205482901561061c57600061055f856001018461182a565b9050600061057061271060646136eb565b61057e906301e133806136eb565b676765c793fa10079d601b1b836060015163ffffffff1661059f91906136eb565b6105a99190613702565b6105be90676765c793fa10079d601b1b613724565b6000818152600e88016020526040812060020154919250036105ed576105ed86637261746560e01b83846119da565b6105f8868483611bd9565b50606001516000848152601486016020526040902063ffffffff909116600e909101555b61062684846114ea565b6000036106335750505050565b600061063f85856112f6565b9050600061065086601b01546111f8565b9050600061065e87876114ea565b6000878152601d8901602090815260408083205487845260168c01909252909120549192509061068e9083611509565b600085815260168a016020526040902055601a8801546106ae90826116b6565b601a8901556000878152601d8901602052604081205560198801546106d390826116b6565b6019890155505060008381526010870160209081526040808320548352600e89018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c08201529061075d8886611da4565b90506107a56107a083604001516107748b8961131d565b61077e8c8c6112f6565b61079b8d6001018c428960e001516107969190613737565b611ee1565b611f7c565b61161f565b600088815260148a016020526040812080546001600160801b0319166001600160801b0393909316929092179091556107de89896114ea565b905060006107f28a6018015483878961168c565b600087815260168c0160205260409020549091506108109083611fd4565b600087815260168c016020526040902055601a8a01546108309082611fd4565b601a8b01556000898152601d8b01602052604081208054839290610855908490613724565b909155505060198a01546108699082611fd4565b60198b0155604080518a8152602081018a90527ff51d891f73afa0326444ca250f11a78ec4ede8d4beaf8c2cfe9f29d5f9e5629c910160405180910390a150505050505050505050565b600082816108c084612024565b90506108d260e0850160c0860161374a565b6000838152601488016020908152604090912060010180546001600160801b03191660ff939093169290921790915561090d9085018561376d565b60008381526014880160209081526040918290206002810180546001600160a01b0319166001600160a01b03959095169490941790935560a08701356006909301929092556109619190860190860161376d565b600083815260148801602052604090206003810180546001600160a01b0319166001600160a01b0393909316929092179091556060850135600482015560808501356005909101556109ba610100850160e08601613796565b60008381526014880160205260409020600701805460ff1916600183818111156109e6576109e66137b7565b021790555060008281526014870160209081526040918290208287013560088201558351600982015590830151600a82015590820151600b8201556060820151600c909101805460ff19166001836005811115610a4557610a456137b7565b0217905550608081015160008381526014880160205260408120600d81019290925560a0830151600e90920191909155610a9460018801610a8c60e0880160c0890161374a565b60ff1661182a565b82519091506000610aa861271060646136eb565b6020840151610abd9063ffffffff16846136eb565b610ac79190613702565b9150610ad661271060646136eb565b610ae4906301e133806136eb565b676765c793fa10079d601b1b846060015163ffffffff16610b0591906136eb565b610b0f9190613702565b610b2490676765c793fa10079d601b1b613724565b60118a0180546000908152601f8c01602052604081208890558154929350610b4b836136d2565b9190505550610b5f898686604001516120fc565b6000818152600e8a0160205260408120600201549003610b8c57610b8c89637261746560e01b83846119da565b610b978989836121e1565b610ba1898961121a565b600088815260128a016020526040902054610bbc9083611fd4565b600089815260128b0160205260409020556013890154610bdc9083611fd4565b60138a0155610bec8989846122ca565b50610bf889898461254c565b600085815260148a01602052604090819020905186917f22998f2397a6b1e965f5fdc5684d29ab2c2ebff824295de89aab9465b66822cd91610c3b9186916137f1565b60405180910390a250979650505050505050565b6000818152601583016020526040902054600160801b900460ff1615610cb25760405162461bcd60e51b815260206004820152601360248201527237b7363c96b0baba3416bbb934ba3296b7b33360691b60448201526064015b60405180910390fd5b806000610cbf84836112f6565b905060008111610d075760405162461bcd60e51b81526020600482015260136024820152721b1bd85b8b591bd95ccb5b9bdd0b595e1a5cdd606a1b6044820152606401610ca9565b6000610d12426111f8565b90506000610d208686611da4565b90506000610d3e8760010183604001516001600160801b031661182a565b9050828160e0015163ffffffff1685610d579190613724565b1115610da55760405162461bcd60e51b815260206004820152601b60248201527f6d617475726974792d646174652d696e2d7468652d66757475726500000000006044820152606401610ca9565b6000610db18888612674565b90506001600160801b0381108015610dfa575080610ddc676765c793fa10079d601b1b6103e86136eb565b610de69190613724565b600088815260108a01602052604090205414155b15610e4557610e0c88888389896127e1565b60405160008152819087907fa0d657cd77a4a207fbc8f50dcd70ea7d5bb4a07cbb549bf7ec75a5768a30e6f99060200160405180910390a35b5050505050505050565b600080610e5b83612024565b90506000610e7660018601610a8c60e0870160c0880161374a565b9050610e8561271060646136eb565b60208201518351610e9c9163ffffffff16906136eb565b610ea69190613702565b95945050505050565b856c077726974654f666647726f757609c1b036110fc5760178701546000610eda61271060646136eb565b610ee8906301e133806136eb565b610efd676765c793fa10079d601b1b896136eb565b610f079190613702565b610f1c90676765c793fa10079d601b1b613724565b90506000610f2d61271060646136eb565b610f42676765c793fa10079d601b1b896136eb565b610f4c9190613702565b610f6190676765c793fa10079d601b1b613737565b90506000610f7261271060646136eb565b610f7f61271060646136eb565b610f8991906136eb565b610f97906301e133806136eb565b89610fad88676765c793fa10079d601b1b6136eb565b610fb791906136eb565b610fc19190613702565b610fd690676765c793fa10079d601b1b613724565b90506000610fe76201518089613702565b90508b60170160405180606001604052806110018661161f565b6001600160801b031681526020016110188461161f565b6001600160801b0316815260200161102f8961161f565b6001600160801b0390811690915282546001818101855560009485526020948590208451958501518416600160801b02958416959095176002909202909401908155604090920151919092018054919092166001600160801b0319919091161790556110c38c637261746560e01b6110bd6110b7676765c793fa10079d601b1b6103e86136eb565b89611fd4565b876119da565b6110f28c6670656e616c747960c81b6110ec6110b7676765c793fa10079d601b1b6103e86136eb565b856119da565b5050505050611133565b60405162461bcd60e51b815260206004820152600c60248201526b756e6b6e6f776e206e616d6560a01b6044820152606401610ca9565b50505050505050565b816b646973636f756e745261746560a01b036111ab5761115f61271060646136eb565b61116d906301e133806136eb565b611182676765c793fa10079d601b1b836136eb565b61118c9190613702565b6111a190676765c793fa10079d601b1b613724565b6018840155505050565b60405162461bcd60e51b815260206004820152601860248201527f756e6b6e6f776e20636f6e66696720706172616d6574657200000000000000006044820152606401610ca9565b505050565b60006112076201518083613702565b61121490620151806136eb565b92915050565b60008181526010830160205260409020546112369083906129b7565b5050565b60008060008061124985612b7c565b92509250925060005b85601101548110156112b3576000818152601f87016020526040812054908061127b8984612c6a565b506000948552601e8b016020908152604080872092909255601d8c01905290932092909255506112ac9050816136d2565b9050611252565b50601c8501829055601a85018390556112d56112cf8484611fd4565b82611fd4565b60198601556112e3426111f8565b601b860155505050601990910154919050565b6000818152601483016020526040902054600160801b90046001600160801b031692915050565b6000818152601083016020908152604080832054808452600e860190925282206001810154600482015460059092015490919065ffffffffffff1642106113ca576000838152600e87016020526040902060018101546002820154600590920154611390929065ffffffffffff16612d93565b6000848152600e880160205260409020600481015460038201546005909201549294506113c79290919065ffffffffffff16612d93565b90505b806000036113f8576000858152600f870160205260409020546113ee908390612db3565b9350505050611214565b6113ee8161141b8489600f0160008a815260200190815260200160002054612db3565b612db3565b6000611439676765c793fa10079d601b1b6103e86136eb565b6000928352601093909301602052506040902054101590565b60198301546114da906114d5836114c76017880161147d676765c793fa10079d601b1b6103e86136eb565b600089815260108b0160205260409020546114989190613737565b815481106114a8576114a86136a6565b60009182526020909120600290910201546001600160801b031661161f565b6001600160801b0316612dbb565b6116b6565b60198401556111f38383836116d9565b600090815260149190910160205260409020546001600160801b031690565b6000826115168382613737565b91508111156112145760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b6044820152606401610ca9565b60008381526010850160209081526040808320548352600e87018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152816115dc8787611da4565b905060006116138360400151878761079b8c60010187604001516001600160801b03168860c001518960e001516107969190613737565b98975050505050505050565b60006001600160801b038211156116885760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610ca9565b5090565b6000610ea6846116b1876116a08688611509565b676765c793fa10079d601b1b612ddd565b612e9b565b6000828211156116c857506000611214565b6116d28383611509565b9392505050565b6000828152601084016020908152604080832054808452600e87019092529091206005015465ffffffffffff16421461174d5760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610ca9565b6000818152600e850160205260409020600401548015611774576117718184612f03565b92505b6000828152600e860160205260408120600101546117929085612f03565b6000868152600f880160205260409020549091506117b09082611509565b6000868152600f88016020908152604080832093909355858252600e8901905220546117dc9082611509565b6000848152600e88016020526040902055846040518581527f9d36b5b661e3fc41681961cd76e4b5de0b5f8c5af42446cf86f291efa1363fe6906020015b60405180910390a2505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915281158061188f57508254155b156118f5575060408051610160810182526000808252620f42406020830152918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152611214565b611900600183613737565b9150828281548110611914576119146136a6565b600091825260209182902060408051610160810182526002909302909101805463ffffffff808216855264010000000080830482169686019690965268010000000000000000808304821694860194909452600160601b820481166060860152600160801b820481166080860152600160a01b8204811660a0860152600160c01b8204811660c0860152600160e01b909104811660e085015260019091015480821661010085015293840481166101208401529204909116610140820152905092915050565b82637261746560e01b03611ab75780600003611a385760405162461bcd60e51b815260206004820152601c60248201527f726174652d7065722d7365636f6e642d63616e2d6e6f742d62652d30000000006044820152606401610ca9565b6000828152600e850160205260408120600101549003611a92576000828152600e850160205260409020676765c793fa10079d601b1b6001820155600501805465ffffffffffff19164265ffffffffffff16179055611a9c565b611a9c84836129b7565b6000828152600e850160205260409020600201819055611bd3565b826670656e616c747960c81b03611b975780600003611b185760405162461bcd60e51b815260206004820152601f60248201527f70656e616c74792d7065722d7365636f6e642d63616e2d6e6f742d62652d30006044820152606401610ca9565b6000828152600e850160205260408120600401549003611b72576000828152600e850160205260409020676765c793fa10079d601b1b6004820155600501805465ffffffffffff19164265ffffffffffff16179055611b7c565b611b7c84836129b7565b6000828152600e850160205260409020600301819055611bd3565b60405162461bcd60e51b81526020600482015260116024820152703ab735b737bbb7103830b930b6b2ba32b960791b6044820152606401610ca9565b50505050565b6000818152600e840160205260408120600101549003611c305760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610ca9565b611c47676765c793fa10079d601b1b6103e86136eb565b8110611c84576000818152600e84016020526040902060050180546bffffffffffff0000000000001916600160301b4265ffffffffffff16021790555b6000828152601084016020526040902054611c9f84826129b7565b611ca984836129b7565b6000838152600f85016020908152604080832054848452600e8801909252822060010154909190611cda9083612db3565b6000848152600e88016020526040902054909150611cf89083611509565b6000848152600e88016020526040808220929092558581522060010154611d1f9082612f03565b6000868152600f880160208181526040808420859055888452600e8b0182528320549289905252611d4f91611fd4565b6000858152600e8801602090815260408083209390935587825260108901905220849055846040518581527f8e2ce1fcb819c387686609f23cdd597abcdd18b0a3bcf284394b65c74101f8c49060200161181a565b611dac6133a1565b600082815260148401602090815260409182902082516102008101845281546001600160801b038082168352600160801b9091048116938201939093526001808301549093169381019390935260028101546001600160a01b0390811660608501526003820154166080840152600481015460a0840152600581015460c0840152600681015460e08401526007810154909161010084019160ff1690811115611e5757611e576137b7565b6001811115611e6857611e686137b7565b81526008820154602082015260098201546040820152600a8201546060820152600b8201546080820152600c82015460a09091019060ff166005811115611eb157611eb16137b7565b6005811115611ec257611ec26137b7565b8152600d8201546020820152600e909101546040909101529392505050565b600080611eee858561182a565b9050610ea6676765c793fa10079d601b1b611f0c61271060646136eb565b611f1961271060646136eb565b611f2391906136eb565b611f31906301e133806136eb565b858460a0015163ffffffff16856080015163ffffffff16676765c793fa10079d601b1b611f5e91906136eb565b611f6891906136eb565b611f7291906136eb565b6114d59190613702565b600080611f88426111f8565b9050600081851115611fa157611f9e8583611509565b90505b611fc9611fc3611fbd8984676765c793fa10079d601b1b612ddd565b88612dbb565b85612dbb565b979650505050505050565b600082611fe18382613724565b91508110156112145760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b6044820152606401610ca9565b61202c613425565b60008060008060006120418760400135612f0f565b9398509196509450925090506000836005811115612061576120616137b7565b905061206c81612f32565b61207a4260a08b0135613737565b6120849190613702565b9250600061209182612f32565b61209b90856136eb565b90506040518060c001604052808881526020018a6080013581526020018a60800135836120c89190613724565b81526020018360058111156120df576120df6137b7565b815260200185815260200187815250975050505050505050919050565b61210683836114ea565b156121685760405162461bcd60e51b815260206004820152602c60248201527f63616e2d6e6f742d6368616e67652d6d61747572697479446174652d6f75747360448201526b1d185b991a5b99cb5919589d60a21b6064820152608401610ca9565b6121746107a0826111f8565b60008381526014850160205260409081902080546001600160801b03938416600160801b029316929092179091555182907fe4cc80f41f018b5290a16d068ce1312611f47f682daaa056e36456c59f853d5a906121d49084815260200190565b60405180910390a2505050565b6000828152600f840160205260409020541561222f5760405162461bcd60e51b815260206004820152600d60248201526c1b9bdb8b5e995c9bcb5919589d609a1b6044820152606401610ca9565b6000818152600e8401602052604081206001015490036122865760405162461bcd60e51b81526020600482015260126024820152711c985d194b59dc9bdd5c0b5b9bdd0b5cd95d60721b6044820152606401610ca9565b60008281526010840160205260409020819055816040518281527f502a7eca8a181ab7f1fac839ea906869797df68c21326b477c0da6e7f962fbc9906020016121d4565b6000806122d6426111f8565b90508360006122e587836112f6565b90508281116123415760405162461bcd60e51b815260206004820152602260248201527f6d617475726974792d646174652d69732d6e6f742d696e2d7468652d66757475604482015261726560f01b6064820152608401610ca9565b86601b0154831115612358576123568761123a565b505b60008681526010880160209081526040808320548352600e8a018252808320815160e0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015465ffffffffffff80821660a0840152600160301b9091041660c0820152906123db8989611da4565b905060006124128360400151898661079b8e60010187604001516001600160801b03168860c001518960e001516107969190613737565b905061242a6107a06124248c886114ea565b83611fd4565b600086815260148c016020908152604080832080546001600160801b0319166001600160801b03959095169490941790935586825260168d01905220546124719082611fd4565b600085815260168c0160205260409020556124b26107a06124ac8c8c600090815260159190910160205260409020546001600160801b031690565b8a611fd4565b60008a815260158c016020526040902080546001600160801b0319166001600160801b039290921691909117905560188a01546124f19082888761168c565b96506125018a601a015488611fd4565b601a8b01556000858152601d8b01602052604081208054899290612526908490613724565b909155505060198a015461253a9088611fd4565b60198b01555050505050509392505050565b6000828152601084016020908152604080832054808452600e87019092529091206005015465ffffffffffff1642146125c05760405162461bcd60e51b81526020600482015260166024820152751c985d194b59dc9bdd5c0b5b9bdd0b5d5c19185d195960521b6044820152606401610ca9565b6000818152600e850160205260408120600101546125de9084612f03565b6000858152600f870160205260409020549091506125fc9082611fd4565b6000858152600f87016020908152604080832093909355848252600e8801905220546126289082611fd4565b6000838152600e87016020526040902055836040518481527f025cdc0b70e4d52ce267700d2925d12f1f4046b82d6eea316cb83391813f1c479060200160405180910390a25050505050565b6000818161268285836112f6565b9050600061268f426111f8565b9050600061269d8785611da4565b90506000600182604001516126b291906138d9565b90506001600160801b036000805b60178b01546001600160801b03821610156127ca5760008b601701826001600160801b0316815481106126f5576126f56136a6565b906000526020600020906002020160000160109054906101000a90046001600160801b03169050846001600160801b03168c601701836001600160801b031681548110612744576127446136a6565b60009182526020909120600160029092020101546001600160801b03161480156127805750826001600160801b0316816001600160801b031610155b80156127ab57506127948162015180613900565b6127a7906001600160801b031689613724565b8710155b156127b7578193508092505b50806127c28161392b565b9150506126c0565b50506001600160801b031698975050505050505050565b60006127ec426111f8565b905085601b0154811115612805576128038661123a565b505b60198601546128148787611420565b61293057600061282488866114ea565b90508361283489601b01546111f8565b111561288a5761284888601c0154826116b6565b601c8901556000858152601e8901602052604090205461286890826116b6565b6000868152601e8a01602052604090205561288382826116b6565b915061292e565b60008481526016890160205260409020546128a59082611509565b600085815260168a01602052604081209190915560188901546128df9083906128da906116a06128d48a6111f8565b89611509565b612dbb565b90506128ef89601a0154826116b6565b601a8a01556000868152601d8a01602052604090205461290f90826116b6565b6000878152601d8b01602052604090205561292a83826116b6565b9250505b505b61295c87878761294d676765c793fa10079d601b1b6103e86136eb565b6129579190613724565b611bd9565b6129a6816129a161296d8a8a61131d565b8a6017018981548110612982576129826136a6565b60009182526020909120600290910201546001600160801b0316612dbb565b611fd4565b876019018190555050505050505050565b6000818152600e8301602052604090206005015465ffffffffffff164210611236576000818152600e8301602052604081206001810154600282015460058301549254612a0c9365ffffffffffff169061304b565b506000838152600e850160205260409020600181018290556003015490915015801590612a5a57506000828152600e84016020526040902060050154600160301b900465ffffffffffff1615155b8015612a8857506000828152600e84016020526040902060050154600160301b900465ffffffffffff164210155b15612b4d576000828152600e8401602052604081206005015465ffffffffffff600160301b82048116911611612ae0576000838152600e85016020526040902060050154600160301b900465ffffffffffff16612afd565b6000838152600e8501602052604090206005015465ffffffffffff165b6000848152600e86016020526040812060048101546003820154915465ffffffffffff9490941694509192612b35929190859061304b565b506000858152600e8701602052604090206004015550505b506000908152600e9190910160205260409020600501805465ffffffffffff19164265ffffffffffff16179055565b601a810154601c8201546018830154601b840154600093849384939192909190838503612bbe57600083612baf8a6130e6565b96509650965050505050612c63565b600080612bca426111f8565b9050825b81811015612c2757600081815260168c0160205260409020548015612c1257612c03846129a1836128da8a6116a08989611509565b9350612c0f8a82611fd4565b99505b50612c208162015180613724565b9050612bce565b50612c43612c3d876128da876116a08689611509565b836116b6565b612c4d868a611fd4565b612c568c6130e6565b9850985098505050505050505b9193909250565b60188201546000828152601d84016020908152604080832054601b870154601e880190935290832054929384938493849391612ca68a8a611420565b15612cdf576000612cb78b8b612674565b9050612cdb612cc68c8c61131d565b8c6017018381548110612982576129826136a6565b9550505b82600003612cf957600097509550929350612d8c92505050565b600080612d05426111f8565b90506000612d1b612d168e8e6112f6565b6111f8565b9050848110158015612d2c57508181105b15612d57576000612d3d8e8e6114ea565b9050612d51816128da8a6116a08787611509565b909a5092505b612d72612d6c876128da8a6116a0878b611509565b846116b6565b612d7c858c611fd4565b899a509a509a5050505050505050505b9250925092565b6000814210612dab57612da884848442613157565b93505b509192915050565b60006116d282845b6000676765c793fa10079d601b1b612dd38484613170565b6116d29190613702565b6000838015612e7d57600184168015612df857859250612dfc565b8392505b50600283046002850494505b8415612e77578586028687820414612e1f57600080fd5b81810181811015612e2f57600080fd5b8590049650506001851615612e6c578583028387820414158715151615612e5557600080fd5b81810181811015612e6557600080fd5b8590049350505b600285049450612e08565b50612e93565b838015612e8d5760009250612e91565b8392505b505b509392505050565b6000808211612edf5760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610ca9565b81612dd3612ef885676765c793fa10079d601b1b613170565b6129a1600286613702565b60006116d282846131d2565b6000806000806000612f208661323a565b939a9299509097509550909350915050565b600080826005811115612f4757612f476137b7565b03612f545750603c919050565b6001826005811115612f6857612f686137b7565b03612f765750610e10919050565b6002826005811115612f8a57612f8a6137b7565b03612f99575062015180919050565b6003826005811115612fad57612fad6137b7565b03612fbc575062093a80919050565b6004826005811115612fd057612fd06137b7565b03612fdf575062278d00919050565b6005826005811115612ff357612ff36137b7565b0361300357506301e13380919050565b60405162461bcd60e51b815260206004820152601f60248201527f556e6b6e6f776e20616d6f7274697a6174696f6e20756e697420747970652e006044820152606401610ca9565b6000808342101561309e5760405162461bcd60e51b815260206004820152601e60248201527f74696e6c616b652d6d6174682f696e76616c69642d74696d657374616d7000006044820152606401610ca9565b856000036130ab57600080fd5b60006130b987878742613157565b9050806130d86130c98387612dbb565b6130d38a88612dbb565b611509565b925092505094509492505050565b6000805b60178301548110156131515761313d826129a16131288685613119676765c793fa10079d601b1b6103e86136eb565b6131239190613724565b6132ca565b866017018581548110612982576129826136a6565b915080613149816136d2565b9150506130ea565b50919050565b6000610ea661316a856116a08686613737565b86612dbb565b60008115806131945750828261318681836136eb565b92506131929083613702565b145b6112145760405162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b6044820152606401610ca9565b60008082116132165760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b6044820152606401610ca9565b81612dd361322f85676765c793fa10079d601b1b613170565b6129a1856001611509565b6000808080806bffffffffffffffffffffffff60981b861662ffffff60801b8716600f607c1b88166f0ffffffffffffffffffffffff00000008916630ff000008a1661328785609861338a565b61329285608061338a565b61329d85607c61338a565b6132a885601c61338a565b6132b385601461338a565b939f929e50909c509a509098509650505050505050565b6000818152600e8301602052604081206001810154600482015482546005909301549192909165ffffffffffff16421061336a576000858152600e87016020526040902060018101546002820154600590920154613330929065ffffffffffff16612d93565b6000868152600e880160205260409020600481015460038201546005909201549295506133679290919065ffffffffffff16612d93565b91505b8160000361337c576113ee8382612db3565b6113ee8261141b8584612db3565b6000613397826002613a35565b6116d29084613702565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808101829052906101a08201905b815260200160008152602001600081525090565b6040518060c0016040528060008152602001600081526020016000815260200160006005811115613411576134116137b7565b60008083601f84011261346a57600080fd5b50813567ffffffffffffffff81111561348257600080fd5b6020830191508360208260051b850101111561349d57600080fd5b9250929050565b6000806000806000606086880312156134bc57600080fd5b85359450602086013567ffffffffffffffff808211156134db57600080fd5b6134e789838a01613458565b9096509450604088013591508082111561350057600080fd5b5061350d88828901613458565b969995985093965092949392505050565b600081518084526020808501945080840160005b8381101561354e57815187529582019590820190600101613532565b509495945050505050565b60408152600061356c604083018561351e565b8281036020840152610ea6818561351e565b60008060006060848603121561359357600080fd5b505081359360208301359350604090920135919050565b6000610100828403121561315157600080fd5b600080600061014084860312156135d357600080fd5b83359250602084013591506135eb85604086016135aa565b90509250925092565b6000806040838503121561360757600080fd5b50508035926020909101359150565b600080610120838503121561362a57600080fd5b8235915061363b84602085016135aa565b90509250929050565b600080600080600080600060e0888a03121561365f57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016136e4576136e46136bc565b5060010190565b8082028115828204841417611214576112146136bc565b60008261371f57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611214576112146136bc565b81810381811115611214576112146136bc565b60006020828403121561375c57600080fd5b813560ff811681146116d257600080fd5b60006020828403121561377f57600080fd5b81356001600160a01b03811681146116d257600080fd5b6000602082840312156137a857600080fd5b8135600281106116d257600080fd5b634e487b7160e01b600052602160045260246000fd5b600281106137dd576137dd6137b7565b9052565b600681106137dd576137dd6137b7565b82815281546001600160801b038082166020840152608091821c6040840152600184015416606083015260028301546001600160a01b039081169183019190915260038301541660a0820152600482015460c0820152600582015460e08201526006820154610100820152600782015461022082019060ff166138786101208401826137cd565b5060088301546101408301526009830154610160830152600a830154610180830152600b8301546101a0830152600c83015460ff166138bb6101c08401826137e1565b50600d8301546101e0830152600e8301546102008301529392505050565b6001600160801b038281168282160390808211156138f9576138f96136bc565b5092915050565b6001600160801b03818116838216028082169190828114613923576139236136bc565b505092915050565b60006001600160801b03808316818103613947576139476136bc565b6001019392505050565b600181815b8085111561398c578160001904821115613972576139726136bc565b8085161561397f57918102915b93841c9390800290613956565b509250929050565b6000826139a357506001611214565b816139b057506000611214565b81600181146139c657600281146139d0576139ec565b6001915050611214565b60ff8411156139e1576139e16136bc565b50506001821b611214565b5060208310610133831016604e8410600b8410161715613a0f575081810a611214565b613a198383613951565b8060001904821115613a2d57613a2d6136bc565b029392505050565b60006116d2838361399456fea26469706673582212200c0281dc35a918b05e220d4ec4e5ef037a19e3f84da6d6cf84a9369d18bee9bc64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Untangled Team",
    "kind": "dev",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "params": {
          "name": "name of the parameter",
          "value": "new value of the parameter"
        }
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "name": "name of the parameter group",
          "overdueDays_": "the number of days after which a loan is considered overdue",
          "writeOffPercentage_": "the write off rate in percent"
        }
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "params": {
          "amounts": "the amounts repaid",
          "loans": "the ids of the loan"
        }
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "params": {
          "loan": "the id of the loan"
        }
      }
    },
    "title": "Untangled's SecuritizaionPoolNAV contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "file(DataTypes.Storage storage,bytes32,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "file(DataTypes.Storage storage,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "file allows governance to change parameters of the contract"
      },
      "getExpectedLoanvalue(DataTypes.Storage storage,DataTypes.LoanEntry)": {
        "notice": "UTILITY FUNCTION "
      },
      "repayLoan(DataTypes.Storage storage,uint256[],uint256[])": {
        "notice": "repay updates the NAV for a new repaid loan"
      },
      "writeOff(DataTypes.Storage storage,uint256)": {
        "notice": "writeOff writes off a loan if it is overdue"
      }
    },
    "notice": "Main entry point for senior LPs (a.k.a. capital providers)  Automatically invests across borrower pools using an adjustable strategy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}