{
  "address": "0x63D66BD25e0025C2FE0cf214b24272Bf10595942",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_10",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_6",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_7",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_8",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ID_TYPE_9",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_COST_PER_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addSuperAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "values",
          "type": "bool[]"
        }
      ],
      "name": "setSupportedUIDTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedUIDTypes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlockWrongToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x093d11afe77747843b66880bd047741d16883ca5656dba0e185193acce85f5f0",
  "receipt": {
    "to": null,
    "from": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3",
    "contractAddress": "0x63D66BD25e0025C2FE0cf214b24272Bf10595942",
    "transactionIndex": 8,
    "gasUsed": "3438281",
    "logsBloom": "0x
    "blockHash": "0x1549cdaa955f219e0131ffb26028efb70dacddd03134f8f69f4e102fcdccb7f4",
    "transactionHash": "0x093d11afe77747843b66880bd047741d16883ca5656dba0e185193acce85f5f0",
    "logs": [],
    "blockNumber": 16265827,
    "cumulativeGasUsed": "5366923",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28c74a8c94428243a2756fd51ab4a3b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_TYPE_9\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST_PER_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"setSupportedUIDTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedUIDTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlockWrongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Untangled\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256,bytes)\":{\"params\":{\"account\":\"The account which currently owns the UID\",\"expiresAt\":\"The expiration time of the signature\",\"id\":\"The id representing the KYC type of the UniqueIdentity\",\"signature\":\"An EIP-191 signature of the corresponding burn params:                  (account, id, expiresAt, address(this), nonces[account], block.chainid)                  from an address with the SIGNER_ROLE.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"account\":\"The account which currently owns the UID\",\"id\":\"The id representing the KYC type of the UniqueIdentity\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(uint256,uint256,bytes)\":{\"params\":{\"expiresAt\":\"The expiration time of the signature\",\"id\":\"The id representing the KYC type of the UniqueIdentity\",\"signature\":\"An EIP-191 signature of the corresponding mint params:                  account, id, expiresAt, address(this), nonces[account], block.chainid                  from an address with the SIGNER_ROLE.\"}},\"mintTo(address,uint256,uint256,bytes)\":{\"params\":{\"expiresAt\":\"The expiration time of the signature\",\"id\":\"The id representing the KYC type of the UniqueIdentity\",\"recipient\":\"The recipient address to be minted to.\",\"signature\":\"An EIP-191 signature of the corresponding mintTo params:                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)                  from an address with the SIGNER_ROLE.\"}},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"nonces\":{\"details\":\"We include a nonce in every hashed message, and increment the nonce as part of a state-changing operation, so as to prevent replay attacks, i.e. the reuse of a signature.\"}},\"title\":\"UniqueIdentity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256,uint256,bytes)\":{\"notice\":\"Burn a UniqueIdentity token of `id` from the `account`\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\"},\"mint(uint256,uint256,bytes)\":{\"notice\":\"Mint a new UniqueIdentity token to the msgSender\"},\"mintTo(address,uint256,uint256,bytes)\":{\"notice\":\"Mint a new UniqueIdentity token to the `recipient`\"}},\"notice\":\"UniqueIdentity is an ERC1155-compliant contract for representing the identity verification status of addresses.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uid/UniqueIdentity.sol\":\"UniqueIdentity\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc3e465e1fdd0e491688ad75ef1b946e1680e7f9f78bf5beeefd6daed8693c856\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\\n    function __ERC1155Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC1155Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x51a92dac23410b512a573d8c3b55f221698b255c85af1ce552b0772076db0a95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/external/ERC1155PresetPauserUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport {OWNER_ROLE, PAUSER_ROLE} from '../libraries/DataTypes.sol';\\r\\n/**\\r\\n * @dev {ERC1155} token, including a pauser role that allows to stop all token transfers\\r\\n * (including minting and burning).\\r\\n *\\r\\n * This contract uses {AccessControl} to lock permissioned functions using the\\r\\n * different roles - head to its documentation for details.\\r\\n *\\r\\n * Adapted from OZ's ERC1155PresetMinterPauserUpgradeable.sol: removed inheritance of\\r\\n * ERC1155BurnableUpgradeable; removed MINTER_ROLE; replaced DEFAULT_ADMIN_ROLE with OWNER_ROLE;\\r\\n * grants roles to owner param rather than `_msgSender()`; added `setURI()`, to give owner ability\\r\\n * to set the URI after initialization; added `isAdmin()` helper and `onlyAdmin` modifier.\\r\\n */\\r\\ncontract ERC1155PresetPauserUpgradeable is\\r\\n    Initializable,\\r\\n    ContextUpgradeable,\\r\\n    AccessControlEnumerableUpgradeable,\\r\\n    ERC1155PausableUpgradeable\\r\\n{\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `OWNER_ROLE` and `PAUSER_ROLE` to the account that\\r\\n     * deploys the contract.\\r\\n     */\\r\\n    function __ERC1155PresetPauser_init(address owner, string memory uri) internal onlyInitializing {\\r\\n        __Context_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __ERC1155_init_unchained(uri);\\r\\n        __Pausable_init_unchained();\\r\\n        __ERC1155Pausable_init_unchained();\\r\\n        __ERC1155PresetPauser_init_unchained(owner);\\r\\n    }\\r\\n\\r\\n    function __ERC1155PresetPauser_init_unchained(address owner) internal onlyInitializing {\\r\\n        _setupRole(OWNER_ROLE, owner);\\r\\n        _setupRole(PAUSER_ROLE, owner);\\r\\n\\r\\n        _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\r\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\r\\n    }\\r\\n\\r\\n    function setURI(string memory newuri) external onlyAdmin {\\r\\n        /// @dev Because the `newuri` is not id-specific, we do not emit a URI event here. See the comment\\r\\n        /// on `_setURI()`.\\r\\n        _setURI(newuri);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses all token transfers.\\r\\n     *\\r\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function pause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), 'ERC1155PresetPauser: must have pauser role to pause');\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses all token transfers.\\r\\n     *\\r\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function unpause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), 'ERC1155PresetPauser: must have pauser role to unpause');\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override(ERC1155PausableUpgradeable) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function isAdmin() public view returns (bool) {\\r\\n        return hasRole(OWNER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(), 'Must have admin role to perform this action');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc61a9b5a06f997ccb8f54ce2bf8ac87f20de2187d3b231b015839ddcb0aa079c\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IUniqueIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\r\\n\\r\\ninterface IUniqueIdentity is IERC1155Upgradeable {\\r\\n    /// @notice Mint a new UniqueIdentity token to the msgSender\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding mint params:\\r\\n    ///                  account, id, expiresAt, address(this), nonces[account], block.chainid\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function mint(uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\r\\n\\r\\n    /// @notice Mint a new UniqueIdentity token to the `recipient`\\r\\n    /// @param recipient The recipient address to be minted to.\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding mintTo params:\\r\\n    ///                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function mintTo(address recipient, uint256 id, uint256 expiresAt, bytes calldata signature) external payable;\\r\\n\\r\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account`\\r\\n    /// @param account The account which currently owns the UID\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    /// @param expiresAt The expiration time of the signature\\r\\n    /// @param signature An EIP-191 signature of the corresponding burn params:\\r\\n    ///                  (account, id, expiresAt, address(this), nonces[account], block.chainid)\\r\\n    ///                  from an address with the SIGNER_ROLE.\\r\\n    function burn(address account, uint256 id, uint256 expiresAt, bytes calldata signature) external;\\r\\n\\r\\n    /// @notice Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet\\r\\n    /// @param account The account which currently owns the UID\\r\\n    /// @param id The id representing the KYC type of the UniqueIdentity\\r\\n    function burnFrom(address account, uint256 id) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9ccf02e406b5bcdfa6d67bfd3fde8af1ff127303241a6fa6337b0882ad43d7ae\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @title Configuration\\r\\n/// @author Untangled Team\\r\\nlibrary Configuration {\\r\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\r\\n    // You can rename or append. But NEVER change the order.\\r\\n    enum CONTRACT_TYPE {\\r\\n        SECURITIZATION_MANAGER,\\r\\n        SECURITIZATION_POOL,\\r\\n        NOTE_TOKEN_FACTORY,\\r\\n        TOKEN_GENERATION_EVENT_FACTORY,\\r\\n        DISTRIBUTION_ASSESSOR,\\r\\n        LOAN_ASSET_TOKEN,\\r\\n        LOAN_KERNEL,\\r\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\r\\n        GO,\\r\\n        NOTE_TOKEN_VAULT\\r\\n    }\\r\\n\\r\\n    enum NOTE_TOKEN_TYPE {\\r\\n        SENIOR,\\r\\n        JUNIOR\\r\\n    }\\r\\n\\r\\n    enum ASSET_PURPOSE {\\r\\n        LOAN,\\r\\n        INVOICE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x667c8e731fed3ece0d945ec16fb7c55e668743b9bda26dc4d87de9dd8666d73f\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import '../storage/Registry.sol';\\r\\nimport './Configuration.sol';\\r\\nimport './UnpackLoanParamtersLib.sol';\\r\\n\\r\\nuint256 constant RATE_SCALING_FACTOR = 10 ** 4;\\r\\n\\r\\nuint256 constant ONE_HUNDRED_PERCENT = 100 * RATE_SCALING_FACTOR;\\r\\n\\r\\nuint256 constant ONE = 10 ** 27;\\r\\nuint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n\\r\\nbytes32 constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\nbytes32 constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\r\\nbytes32 constant BACKEND_ADMIN_ROLE = keccak256('BACKEND_ADMIN');\\r\\nbytes32 constant SIGNER_ROLE = keccak256('SIGNER_ROLE');\\r\\nbytes32 constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN');\\r\\nbytes32 constant POOL_ADMIN_ROLE = keccak256('POOL_CREATOR');\\r\\n\\r\\n// In PoolNAV we use this\\r\\nbytes32 constant POOL = keccak256('POOL');\\r\\nuint256 constant PRICE_DECIMAL = 10 ** 18;\\r\\nbytes32 constant VALIDATOR_ROLE = keccak256('VALIDATOR_ROLE');\\r\\nbytes32 constant MINTER_ROLE = keccak256('MINTER_ROLE');\\r\\n// In Go\\r\\nbytes32 constant ZAPPER_ROLE = keccak256('ZAPPER_ROLE');\\r\\n// in ERC1155PresetPauserUpgradeable\\r\\nbytes32 constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct RiskScore {\\r\\n        uint32 daysPastDue;\\r\\n        uint32 advanceRate;\\r\\n        uint32 penaltyRate;\\r\\n        uint32 interestRate;\\r\\n        uint32 probabilityOfDefault;\\r\\n        uint32 lossGivenDefault;\\r\\n        uint32 writeOffAfterGracePeriod;\\r\\n        uint32 gracePeriod;\\r\\n        uint32 collectionPeriod;\\r\\n        uint32 writeOffAfterCollectionPeriod;\\r\\n        uint32 discountRate;\\r\\n    }\\r\\n\\r\\n    struct LoanEntry {\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        bytes32 termsParam; // actually inside this param was already included P token address\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        uint8 riskScore;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n    }\\r\\n    struct NFTAsset {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct NewPoolParams {\\r\\n        address currency;\\r\\n        uint32 minFirstLossCushion;\\r\\n        bool validatorRequired;\\r\\n        uint256 debtCeiling;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the underlying collateral\\r\\n    struct NFTDetails {\\r\\n        uint128 futureValue;\\r\\n        uint128 maturityDate;\\r\\n        uint128 risk;\\r\\n        address debtor;\\r\\n        address principalTokenAddress;\\r\\n        uint256 salt;\\r\\n        uint256 issuanceBlockTimestamp;\\r\\n        uint256 expirationTimestamp;\\r\\n        Configuration.ASSET_PURPOSE assetPurpose;\\r\\n        bytes32 termsParam;\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        UnpackLoanParamtersLib.AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    /// @notice stores all needed information of an interest rate group\\r\\n    struct Rate {\\r\\n        // total debt of all loans with this rate\\r\\n        uint256 pie;\\r\\n        // accumlated rate index over time\\r\\n        uint256 chi;\\r\\n        // interest rate per second\\r\\n        uint256 ratePerSecond;\\r\\n        // penalty rate per second\\r\\n        uint256 penaltyRatePerSecond;\\r\\n        // accumlated penalty rate index over time\\r\\n        uint256 penaltyChi;\\r\\n        // last time the rate was accumulated\\r\\n        uint48 lastUpdated;\\r\\n        // time start to penalty\\r\\n        uint48 timeStartPenalty;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the loan\\r\\n    struct LoanDetails {\\r\\n        uint128 borrowed;\\r\\n        // only auth calls can move loan into different writeOff group\\r\\n        bool authWriteOff;\\r\\n    }\\r\\n\\r\\n    /// @notice details of the write off group\\r\\n    struct WriteOffGroup {\\r\\n        // denominated in (10^27)\\r\\n        uint128 percentage;\\r\\n        // amount of days after the maturity days that the writeoff group can be applied by default\\r\\n        uint128 overdueDays;\\r\\n        uint128 riskIndex;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        bool validatorRequired;\\r\\n        uint64 firstAssetTimestamp;\\r\\n        RiskScore[] riskScores;\\r\\n        NFTAsset[] nftAssets;\\r\\n        address tgeAddress;\\r\\n        address secondTGEAddress;\\r\\n        address sotToken;\\r\\n        address jotToken;\\r\\n        address underlyingCurrency;\\r\\n        uint256 incomeReserve;\\r\\n        uint256 capitalReserve;\\r\\n        uint32 minFirstLossCushion;\\r\\n        uint64 openingBlockTimestamp;\\r\\n        // by default it is address(this)\\r\\n        address pot;\\r\\n        uint256 interestRateSOT;\\r\\n        uint256 totalAssetRepaidCurrency;\\r\\n        uint256 debtCeiling;\\r\\n        mapping(uint256 => Rate) rates;\\r\\n        mapping(uint256 => uint256) pie;\\r\\n        /// @notice mapping from loan => rate\\r\\n        mapping(uint256 => uint256) loanRates;\\r\\n        /// @notice mapping from loan => grace time\\r\\n        uint256 loanCount;\\r\\n        mapping(uint256 => uint256) balances;\\r\\n        uint256 balance;\\r\\n        // nft => details\\r\\n        mapping(bytes32 => NFTDetails) details;\\r\\n        // loan => details\\r\\n        mapping(uint256 => LoanDetails) loanDetails;\\r\\n        // timestamp => bucket\\r\\n        mapping(uint256 => uint256) buckets;\\r\\n        WriteOffGroup[] writeOffGroups;\\r\\n        // Write-off groups will be added as rate groups to the pile with their index\\r\\n        // in the writeOffGroups array + this number\\r\\n        //        uint256 constant WRITEOFF_RATE_GROUP_START = 1000 * ONE;\\r\\n        //        uint256 constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\r\\n\\r\\n        // Discount rate applied on every asset's fv depending on its maturityDate.\\r\\n        // The discount decreases with the maturityDate approaching.\\r\\n        // denominated in (10^27)\\r\\n        uint256 discountRate;\\r\\n        // latestNAV is calculated in case of borrows & repayments between epoch executions.\\r\\n        // It decreases/increases the NAV by the repaid/borrowed amount without running the NAV calculation routine.\\r\\n        // This is required for more accurate Senior & JuniorAssetValue estimations between epochs\\r\\n        uint256 latestNAV;\\r\\n        uint256 latestDiscount;\\r\\n        uint256 lastNAVUpdate;\\r\\n        // overdue loans are loans which passed the maturity date but are not written-off\\r\\n        uint256 overdueLoans;\\r\\n        // tokenId => latestDiscount\\r\\n        mapping(bytes32 => uint256) latestDiscountOfNavAssets;\\r\\n        mapping(bytes32 => uint256) overdueLoansOfNavAssets;\\r\\n        mapping(uint256 => bytes32) loanToNFT;\\r\\n        // value to view\\r\\n        uint256 totalPrincipalRepaid;\\r\\n        uint256 totalInterestRepaid;\\r\\n        // value to calculate rebase\\r\\n        uint256 seniorDebt;\\r\\n        uint256 seniorBalance;\\r\\n        uint64 lastUpdateSeniorInterest;\\r\\n    }\\r\\n\\r\\n    struct LoanAssetInfo {\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] nonces;\\r\\n        address validator;\\r\\n        bytes validateSignature;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b6120a2810775ef84487aa845d03070b7c10a0defa78324dce9d8e0b094abbd\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.5.10;\\r\\n\\r\\nlibrary UnpackLoanParamtersLib {\\r\\n    struct InterestParams {\\r\\n        uint256 principalAmount;\\r\\n        uint256 termStartUnixTimestamp;\\r\\n        uint256 termEndUnixTimestamp;\\r\\n        AmortizationUnitType amortizationUnitType;\\r\\n        uint256 termLengthInAmortizationUnits;\\r\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\r\\n        uint256 interestRate;\\r\\n    }\\r\\n\\r\\n    enum AmortizationUnitType {\\r\\n        MINUTES, // 0 - since 1.0.13\\r\\n        HOURS, // 1\\r\\n        DAYS, // 2\\r\\n        WEEKS, // 3\\r\\n        MONTHS, // 4\\r\\n        YEARS // 5\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\r\\n     */\\r\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\r\\n        return uint256(value) / 2 ** amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack parameters from packed bytes32 data\\r\\n     */\\r\\n    function _unpackLoanTermsParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\r\\n        bytes32 principalAmountShifted = parameters &\\r\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\r\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\r\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\r\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\r\\n        bytes32 amortizationUnitTypeShifted = parameters &\\r\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\r\\n        // The subsequent 12 bytes encode the term length, as denominated in\\r\\n        // the encoded amortization unit.\\r\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\r\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\r\\n\\r\\n        bytes32 gracePeriodInDaysShifted = parameters &\\r\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\r\\n\\r\\n        return (\\r\\n            _bitShiftRight(principalAmountShifted, 152),\\r\\n            _bitShiftRight(interestRateShifted, 128),\\r\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\r\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\r\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpack data from hex string which including informations about Loan\\r\\n     */\\r\\n    function unpackParametersFromBytes(\\r\\n        bytes32 parameters\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 _principalAmount,\\r\\n            uint256 _interestRate,\\r\\n            uint256 _amortizationUnitType,\\r\\n            uint256 _termLengthInAmortizationUnits,\\r\\n            uint256 _gracePeriodInDays\\r\\n        )\\r\\n    {\\r\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfee2d0df159de7c95d678a16abe3887b4beece4db2634ef47082b14f5716c21b\",\"license\":\"AGPL-3.0-only\"},\"contracts/uid/UniqueIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ECDSAUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\r\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport {ERC1155PresetPauserUpgradeable} from '../external/ERC1155PresetPauserUpgradeable.sol';\\r\\nimport {IUniqueIdentity} from '../interfaces/IUniqueIdentity.sol';\\r\\nimport {OWNER_ROLE ,SIGNER_ROLE , SUPER_ADMIN_ROLE} from '../libraries/DataTypes.sol';\\r\\n/**\\r\\n * @title UniqueIdentity\\r\\n * @notice UniqueIdentity is an ERC1155-compliant contract for representing\\r\\n * the identity verification status of addresses.\\r\\n * @author Untangled\\r\\n */\\r\\n\\r\\ncontract UniqueIdentity is ERC1155PresetPauserUpgradeable, IUniqueIdentity {\\r\\n\\r\\n    uint256 public constant ID_TYPE_0 = 0; // non-US individual\\r\\n    uint256 public constant ID_TYPE_1 = 1; // US individual\\r\\n    uint256 public constant ID_TYPE_2 = 2; // non-US entity\\r\\n    uint256 public constant ID_TYPE_3 = 3; // US entity\\r\\n    uint256 public constant ID_TYPE_4 = 4;\\r\\n    uint256 public constant ID_TYPE_5 = 5;\\r\\n    uint256 public constant ID_TYPE_6 = 6;\\r\\n    uint256 public constant ID_TYPE_7 = 7;\\r\\n    uint256 public constant ID_TYPE_8 = 8;\\r\\n    uint256 public constant ID_TYPE_9 = 9;\\r\\n    uint256 public constant ID_TYPE_10 = 10;\\r\\n\\r\\n    uint256 public constant MINT_COST_PER_TOKEN = 830000 gwei;\\r\\n\\r\\n    /// @dev We include a nonce in every hashed message, and increment the nonce as part of a\\r\\n    /// state-changing operation, so as to prevent replay attacks, i.e. the reuse of a signature.\\r\\n    mapping(address => uint256) public nonces;\\r\\n    mapping(uint256 => bool) public supportedUIDTypes;\\r\\n\\r\\n    function initialize(address owner, string memory uri) public initializer {\\r\\n        require(owner != address(0), 'Owner address cannot be empty');\\r\\n\\r\\n        __ERC1155PresetPauser_init(owner, uri);\\r\\n        __UniqueIdentity_init(owner);\\r\\n    }\\r\\n\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function __UniqueIdentity_init(address owner) internal onlyInitializing {\\r\\n        __UniqueIdentity_init_unchained(owner);\\r\\n    }\\r\\n\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function __UniqueIdentity_init_unchained(address owner) internal onlyInitializing {\\r\\n        _setupRole(SIGNER_ROLE, owner);\\r\\n        _setRoleAdmin(SIGNER_ROLE, OWNER_ROLE);\\r\\n        _setupRole(SUPER_ADMIN_ROLE, owner);\\r\\n        _setRoleAdmin(SUPER_ADMIN_ROLE, OWNER_ROLE);\\r\\n    }\\r\\n\\r\\n    function addSuperAdmin(address account) public onlyAdmin {\\r\\n        _setupRole(SUPER_ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function setSupportedUIDTypes(uint256[] calldata ids, bool[] calldata values) public onlyAdmin {\\r\\n        require(ids.length == values.length, 'accounts and ids length mismatch');\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            supportedUIDTypes[ids[i]] = values[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the token name.\\r\\n     * @return string representing the token name\\r\\n     */\\r\\n    function name() public pure returns (string memory) {\\r\\n        return 'Unique Identity';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the token symbol.\\r\\n     * @return string representing the token symbol\\r\\n     */\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return 'UID';\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        uint256 id,\\r\\n        uint256 expiresAt,\\r\\n        bytes calldata signature\\r\\n    ) public payable override onlySigner(_msgSender(), id, expiresAt, signature) incrementNonce(_msgSender()) {\\r\\n        _mintTo(_msgSender(), id);\\r\\n    }\\r\\n\\r\\n    function mintTo(\\r\\n        address recipient,\\r\\n        uint256 id,\\r\\n        uint256 expiresAt,\\r\\n        bytes calldata signature\\r\\n    ) public payable override onlySignerMintTo(recipient, id, expiresAt, signature) incrementNonce(_msgSender()) {\\r\\n        require(balanceOf(_msgSender(), id) == 0, 'msgSender already owns UID');\\r\\n        _mintTo(recipient, id);\\r\\n    }\\r\\n\\r\\n    function _mintTo(address mintToAddress, uint256 id) private {\\r\\n        require(msg.value >= MINT_COST_PER_TOKEN, 'Token mint requires 0.00083 ETH');\\r\\n        require(supportedUIDTypes[id], 'Token id not supported');\\r\\n        require(balanceOf(mintToAddress, id) == 0, 'Balance before mint must be 0');\\r\\n\\r\\n        _mint(mintToAddress, id, 1, '');\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 expiresAt,\\r\\n        bytes calldata signature\\r\\n    ) public override onlySigner(account, id, expiresAt, signature) incrementNonce(account) {\\r\\n        _burn(account, id, 1);\\r\\n\\r\\n        uint256 accountBalance = balanceOf(account, id);\\r\\n        require(accountBalance == 0, 'Balance after burn must be 0');\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 id) public override onlyRole(SUPER_ADMIN_ROLE) {\\r\\n        _burn(account, id, 1);\\r\\n\\r\\n        uint256 accountBalance = balanceOf(account, id);\\r\\n        require(accountBalance == 0, 'Balance after burn must be 0');\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal override(ERC1155PresetPauserUpgradeable) {\\r\\n        require(\\r\\n            (from == address(0) && to != address(0)) || (from != address(0) && to == address(0)),\\r\\n            'Only mint or burn transfers are allowed'\\r\\n        );\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    modifier onlySigner(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 expiresAt,\\r\\n        bytes calldata signature\\r\\n    ) {\\r\\n        require(block.timestamp < expiresAt, 'Signature has expired');\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(account, id, expiresAt, address(this), nonces[account], block.chainid)\\r\\n        );\\r\\n        bytes32 ethSignedMessage = ECDSAUpgradeable.toEthSignedMessageHash(hash);\\r\\n        require(hasRole(SIGNER_ROLE, ECDSAUpgradeable.recover(ethSignedMessage, signature)), 'Invalid signer');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySignerMintTo(\\r\\n        address mintToAddress,\\r\\n        uint256 id,\\r\\n        uint256 expiresAt,\\r\\n        bytes calldata signature\\r\\n    ) {\\r\\n        require(block.timestamp < expiresAt, 'Signature has expired');\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _msgSender(),\\r\\n                mintToAddress,\\r\\n                id,\\r\\n                expiresAt,\\r\\n                address(this),\\r\\n                nonces[_msgSender()],\\r\\n                block.chainid\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 ethSignedMessage = ECDSAUpgradeable.toEthSignedMessageHash(hash);\\r\\n        require(hasRole(SIGNER_ROLE, ECDSAUpgradeable.recover(ethSignedMessage, signature)), 'Invalid signer');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier incrementNonce(address account) {\\r\\n        nonces[account] += 1;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // unlock\\r\\n    function unlockWrongToken(address token) public onlyAdmin {\\r\\n        if (token == address(0)) {\\r\\n            (bool success, ) = payable(_msgSender()).call{value: address(this).balance}('');\\r\\n            require(success, 'Transfer failed.');\\r\\n        } else {\\r\\n            require(\\r\\n                IERC20Upgradeable(token).transfer(_msgSender(), IERC20Upgradeable(token).balanceOf(address(this))),\\r\\n                'Transfer failed.'\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1f76f6033e92e344e0a36a59b3ab31ff6a971b92efb939b81eff1c1bf9a00b2a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d38806100206000396000f3fe6080604052600436106102715760003560e01c8063801dfa901161014f578063a22cb465116100c1578063e57a2a501161007a578063e57a2a5014610731578063e985e9c514610746578063ec2e8a751461078f578063f242432a146107a4578063f399e22e146107c4578063fb79a684146107e457600080fd5b8063a22cb46514610687578063b3292ff0146106a7578063b6db75a0146106c7578063ca15c873146106dc578063d547741f146106fc578063ddd8f6871461071c57600080fd5b80639010d07c116101135780639010d07c146105bd5780639142575d146105f557806391d148541461062657806395d89b41146106465780639b56d78814610672578063a217fddf1461067257600080fd5b8063801dfa901461053e57806380f87802146105535780638456cb5914610568578063879dcceb1461057d5780638a94b05f1461059d57600080fd5b80632eb2c2d6116101e85780634e1273f4116101ac5780634e1273f4146104815780635344626a146104ae5780635c975abb146104c3578063701d240a146104db57806379cc6790146104f05780637ecebe001461051057600080fd5b80632eb2c2d6146103f75780632f2ff15d1461041757806336568abe146104375780633f4ba83a14610457578063479e743c1461046c57600080fd5b80630e89341c1161023a5780630e89341c1461034f5780631484bddd1461036f578063248a9ca314610384578063280f4e28146103b45780632dc2c007146103c75780632e82d895146103e257600080fd5b8062fdd58e1461027657806301ffc9a7146102a957806302fe5305146102d957806306fdde03146102fb57806308dc9f421461033c575b600080fd5b34801561028257600080fd5b50610296610291366004612e90565b610804565b6040519081526020015b60405180910390f35b3480156102b557600080fd5b506102c96102c4366004612ed0565b61089f565b60405190151581526020016102a0565b3480156102e557600080fd5b506102f96102f4366004612fa2565b6108aa565b005b34801561030757600080fd5b5060408051808201909152600f81526e556e69717565204964656e7469747960881b60208201525b6040516102a0919061302e565b6102f961034a366004613082565b6108da565b34801561035b57600080fd5b5061032f61036a3660046130d4565b610a04565b34801561037b57600080fd5b50610296600881565b34801561039057600080fd5b5061029661039f3660046130d4565b60009081526065602052604090206001015490565b6102f96103c23660046130ed565b610a98565b3480156103d357600080fd5b506102966602f2e16f29e00081565b3480156103ee57600080fd5b50610296600381565b34801561040357600080fd5b506102f96104123660046131e8565b610c48565b34801561042357600080fd5b506102f9610432366004613291565b610c94565b34801561044357600080fd5b506102f9610452366004613291565b610cbe565b34801561046357600080fd5b506102f9610d3c565b34801561047857600080fd5b50610296600581565b34801561048d57600080fd5b506104a161049c3660046132bd565b610dc8565b6040516102a091906133c2565b3480156104ba57600080fd5b50610296600681565b3480156104cf57600080fd5b5060fb5460ff166102c9565b3480156104e757600080fd5b50610296600181565b3480156104fc57600080fd5b506102f961050b366004612e90565b610ef1565b34801561051c57600080fd5b5061029661052b3660046133d5565b6101916020526000908152604090205481565b34801561054a57600080fd5b50610296600781565b34801561055f57600080fd5b50610296600281565b34801561057457600080fd5b506102f9610f77565b34801561058957600080fd5b506102f9610598366004613434565b610fff565b3480156105a957600080fd5b506102f96105b83660046130ed565b6110f8565b3480156105c957600080fd5b506105dd6105d8366004613493565b61128d565b6040516001600160a01b0390911681526020016102a0565b34801561060157600080fd5b506102c96106103660046130d4565b6101926020526000908152604090205460ff1681565b34801561063257600080fd5b506102c9610641366004613291565b6112ac565b34801561065257600080fd5b5060408051808201909152600381526215525160ea1b602082015261032f565b34801561067e57600080fd5b50610296600081565b34801561069357600080fd5b506102f96106a23660046134c3565b6112d7565b3480156106b357600080fd5b506102f96106c23660046133d5565b6112e2565b3480156106d357600080fd5b506102c961131e565b3480156106e857600080fd5b506102966106f73660046130d4565b61133d565b34801561070857600080fd5b506102f9610717366004613291565b611354565b34801561072857600080fd5b50610296600a81565b34801561073d57600080fd5b50610296600981565b34801561075257600080fd5b506102c96107613660046134fa565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b34801561079b57600080fd5b50610296600481565b3480156107b057600080fd5b506102f96107bf366004613524565b611379565b3480156107d057600080fd5b506102f96107df366004613588565b6113be565b3480156107f057600080fd5b506102f96107ff3660046133d5565b611531565b60006001600160a01b0383166108745760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b600061089982611714565b6108b261131e565b6108ce5760405162461bcd60e51b815260040161086b906135cb565b6108d781611754565b50565b33848484848242106108fe5760405162461bcd60e51b815260040161086b90613616565b6001600160a01b03851660009081526101916020908152604080832054905161093292899289928992309291469101613645565b604051602081830303815290604052805190602001209050600061095582611760565b90506109a9600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b6109c55760405162461bcd60e51b815260040161086b9061368b565b336000818152610191602052604081208054600192906109e69084906136c9565b909155506109f69050338d6117af565b505050505050505050505050565b606060cb8054610a13906136dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3f906136dc565b8015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b50505050509050919050565b8484848484824210610abc5760405162461bcd60e51b815260040161086b90613616565b336000818152610191602090815260408083205481516bffffffffffffffffffffffff19606096871b8116828601528b871b81166034830152604882018b9052606882018a90523090961b9095166088860152609c8501524660bc808601919091528151808603909101815260dc9094019052825192019190912090610b4182611760565b9050610b95600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b610bb15760405162461bcd60e51b815260040161086b9061368b565b33600081815261019160205260408120805460019290610bd29084906136c9565b90915550610be29050338d610804565b15610c2f5760405162461bcd60e51b815260206004820152601a60248201527f6d736753656e64657220616c7265616479206f776e7320554944000000000000604482015260640161086b565b610c398d8d6117af565b50505050505050505050505050565b6001600160a01b038516331480610c645750610c648533610761565b610c805760405162461bcd60e51b815260040161086b90613716565b610c8d85858585856118d1565b5050505050565b600082815260656020526040902060010154610caf81611abf565b610cb98383611ac9565b505050565b6001600160a01b0381163314610d2e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161086b565b610d388282611aeb565b5050565b610d54600080516020613cc3833981519152336112ac565b610dbe5760405162461bcd60e51b815260206004820152603560248201527f455243313135355072657365745061757365723a206d75737420686176652070604482015274617573657220726f6c6520746f20756e706175736560581b606482015260840161086b565b610dc6611b0d565b565b60608151835114610e2d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161086b565b600083516001600160401b03811115610e4857610e48612eed565b604051908082528060200260200182016040528015610e71578160200160208202803683370190505b50905060005b8451811015610ee957610ebc858281518110610e9557610e95613764565b6020026020010151858381518110610eaf57610eaf613764565b6020026020010151610804565b828281518110610ece57610ece613764565b6020908102919091010152610ee28161377a565b9050610e77565b509392505050565b600080516020613c83833981519152610f0981611abf565b610f1583836001611b5f565b6000610f218484610804565b90508015610f715760405162461bcd60e51b815260206004820152601c60248201527f42616c616e6365206166746572206275726e206d757374206265203000000000604482015260640161086b565b50505050565b610f8f600080516020613cc3833981519152336112ac565b610ff75760405162461bcd60e51b815260206004820152603360248201527f455243313135355072657365745061757365723a206d75737420686176652070604482015272617573657220726f6c6520746f20706175736560681b606482015260840161086b565b610dc6611cf8565b61100761131e565b6110235760405162461bcd60e51b815260040161086b906135cb565b8281146110725760405162461bcd60e51b815260206004820181905260248201527f6163636f756e747320616e6420696473206c656e677468206d69736d61746368604482015260640161086b565b60005b83811015610c8d5782828281811061108f5761108f613764565b90506020020160208101906110a49190613793565b61019260008787858181106110bb576110bb613764565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806110f19061377a565b9050611075565b848484848482421061111c5760405162461bcd60e51b815260040161086b90613616565b6001600160a01b03851660009081526101916020908152604080832054905161115092899289928992309291469101613645565b604051602081830303815290604052805190602001209050600061117382611760565b90506111c7600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b6111e35760405162461bcd60e51b815260040161086b9061368b565b6001600160a01b038c1660009081526101916020526040812080548e926001929161120f9084906136c9565b9091555061122190508d8d6001611b5f565b600061122d8e8e610804565b9050801561127d5760405162461bcd60e51b815260206004820152601c60248201527f42616c616e6365206166746572206275726e206d757374206265203000000000604482015260640161086b565b5050505050505050505050505050565b60008281526097602052604081206112a59083611d35565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d38338383611d41565b6112ea61131e565b6113065760405162461bcd60e51b815260040161086b906135cb565b6108d7600080516020613c8383398151915282611e21565b6000611338600080516020613ca3833981519152336112ac565b905090565b600081815260976020526040812061089990611e2b565b60008281526065602052604090206001015461136f81611abf565b610cb98383611aeb565b6001600160a01b03851633148061139557506113958533610761565b6113b15760405162461bcd60e51b815260040161086b90613716565b610c8d8585858585611e35565b600054610100900460ff16158080156113de5750600054600160ff909116105b806113f85750303b1580156113f8575060005460ff166001145b61145b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161086b565b6000805460ff19166001179055801561147e576000805461ff0019166101001790555b6001600160a01b0383166114d45760405162461bcd60e51b815260206004820152601d60248201527f4f776e657220616464726573732063616e6e6f7420626520656d707479000000604482015260640161086b565b6114de8383611f71565b6114e783611fda565b8015610cb9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b61153961131e565b6115555760405162461bcd60e51b815260040161086b906135cb565b6001600160a01b0381166115ee57604051600090339047908381818185875af1925050503d80600081146115a5576040519150601f19603f3d011682016040523d82523d6000602084013e6115aa565b606091505b5050905080610d385760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b6001600160a01b03811663a9059cbb336040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166691906137b0565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906137c9565b6108d75760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b60006001600160e01b03198216636cdb3d1360e11b148061174557506001600160e01b031982166303a24d0760e21b145b8061089957506108998261200a565b60cb610d38828261382c565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b60008060006117a2858561202f565b91509150610ee981612074565b6602f2e16f29e0003410156118065760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206d696e7420726571756972657320302e30303038332045544800604482015260640161086b565b6000818152610192602052604090205460ff1661185e5760405162461bcd60e51b8152602060048201526016602482015275151bdad95b881a59081b9bdd081cdd5c1c1bdc9d195960521b604482015260640161086b565b6118688282610804565b156118b55760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206265666f7265206d696e74206d7573742062652030000000604482015260640161086b565b610d3882826001604051806020016040528060008152506121be565b81518351146119335760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161086b565b6001600160a01b0384166119595760405162461bcd60e51b815260040161086b906138eb565b336119688187878787876122da565b60005b8451811015611a5157600085828151811061198857611988613764565b6020026020010151905060008583815181106119a6576119a6613764565b602090810291909101810151600084815260c9835260408082206001600160a01b038e1683529093529190912054909150818110156119f75760405162461bcd60e51b815260040161086b90613930565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a369084906136c9565b9250508190555050505080611a4a9061377a565b905061196b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611aa192919061397a565b60405180910390a4611ab7818787878787612388565b505050505050565b6108d781336124e3565b611ad3828261253c565b6000828152609760205260409020610cb990826125c2565b611af582826125d7565b6000828152609760205260409020610cb9908261263e565b611b15612653565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611bc15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161086b565b336000611bcd8461269c565b90506000611bda8461269c565b9050611bfa838760008585604051806020016040528060008152506122da565b600085815260c9602090815260408083206001600160a01b038a16845290915290205484811015611c795760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161086b565b600086815260c9602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b611d006126e7565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b423390565b60006112a5838361272d565b816001600160a01b0316836001600160a01b031603611db45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161086b565b6001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d388282611ac9565b6000610899825490565b6001600160a01b038416611e5b5760405162461bcd60e51b815260040161086b906138eb565b336000611e678561269c565b90506000611e748561269c565b9050611e848389898585896122da565b600086815260c9602090815260408083206001600160a01b038c16845290915290205485811015611ec75760405162461bcd60e51b815260040161086b90613930565b600087815260c9602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611f069084906136c9565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f66848a8a8a8a8a612757565b505050505050505050565b600054610100900460ff16611f985760405162461bcd60e51b815260040161086b906139a8565b611fa0612812565b611fa8612812565b611fb0612812565b611fb8612812565b611fc181612839565b611fc9612860565b611fd1612812565b610d3882612893565b600054610100900460ff166120015760405162461bcd60e51b815260040161086b906139a8565b6108d781612928565b60006001600160e01b03198216635a05180f60e01b14806108995750610899826129cb565b60008082516041036120655760208301516040840151606085015160001a61205987828585612a00565b9450945050505061206d565b506000905060025b9250929050565b6000816004811115612088576120886139f3565b036120905750565b60018160048111156120a4576120a46139f3565b036120f15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161086b565b6002816004811115612105576121056139f3565b036121525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161086b565b6003816004811115612166576121666139f3565b036108d75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161086b565b6001600160a01b03841661221e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161086b565b33600061222a8561269c565b905060006122378561269c565b9050612248836000898585896122da565b600086815260c9602090815260408083206001600160a01b038b1684529091528120805487929061227a9084906136c9565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cef83600089898989612757565b6001600160a01b0385161580156122f957506001600160a01b03841615155b8061231e57506001600160a01b0385161580159061231e57506001600160a01b038416155b61237a5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79206d696e74206f72206275726e207472616e73666572732061726520604482015266185b1b1bddd95960ca1b606482015260840161086b565b611ab7868686868686612ac4565b6001600160a01b0384163b15611ab75760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123cc9089908990889088908890600401613a09565b6020604051808303816000875af1925050508015612407575060408051601f3d908101601f1916820190925261240491810190613a67565b60015b6124b357612413613a84565b806308c379a00361244c5750612427613aa0565b80612432575061244e565b8060405162461bcd60e51b815260040161086b919061302e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161086b565b6001600160e01b0319811663bc197c8160e01b14611cef5760405162461bcd60e51b815260040161086b90613b29565b6124ed82826112ac565b610d38576124fa81612ad2565b612505836020612ae4565b604051602001612516929190613b71565b60408051601f198184030181529082905262461bcd60e51b825261086b9160040161302e565b61254682826112ac565b610d385760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561257e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006112a5836001600160a01b038416612c7f565b6125e182826112ac565b15610d385760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006112a5836001600160a01b038416612cce565b60fb5460ff16610dc65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161086b565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126d6576126d6613764565b602090810291909101015292915050565b60fb5460ff1615610dc65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161086b565b600082600001828154811061274457612744613764565b9060005260206000200154905092915050565b6001600160a01b0384163b15611ab75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061279b9089908990889088908890600401613be6565b6020604051808303816000875af19250505080156127d6575060408051601f3d908101601f191682019092526127d391810190613a67565b60015b6127e257612413613a84565b6001600160e01b0319811663f23a6e6160e01b14611cef5760405162461bcd60e51b815260040161086b90613b29565b600054610100900460ff16610dc65760405162461bcd60e51b815260040161086b906139a8565b600054610100900460ff166108ce5760405162461bcd60e51b815260040161086b906139a8565b600054610100900460ff166128875760405162461bcd60e51b815260040161086b906139a8565b60fb805460ff19169055565b600054610100900460ff166128ba5760405162461bcd60e51b815260040161086b906139a8565b6128d2600080516020613ca383398151915282611e21565b6128ea600080516020613cc383398151915282611e21565b612910600080516020613cc3833981519152600080516020613ca3833981519152612dc1565b6108d7600080516020613ca383398151915280612dc1565b600054610100900460ff1661294f5760405162461bcd60e51b815260040161086b906139a8565b612967600080516020613ce383398151915282611e21565b61298d600080516020613ce3833981519152600080516020613ca3833981519152612dc1565b6129a5600080516020613c8383398151915282611e21565b6108d7600080516020613c83833981519152600080516020613ca3833981519152612dc1565b60006001600160e01b03198216637965db0b60e01b148061089957506301ffc9a760e01b6001600160e01b0319831614610899565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a375750600090506003612abb565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a8b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612ab457600060019250925050612abb565b9150600090505b94509492505050565b611ab7868686868686612e0c565b60606108996001600160a01b03831660145b60606000612af3836002613c2b565b612afe9060026136c9565b6001600160401b03811115612b1557612b15612eed565b6040519080825280601f01601f191660200182016040528015612b3f576020820181803683370190505b509050600360fc1b81600081518110612b5a57612b5a613764565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b8957612b89613764565b60200101906001600160f81b031916908160001a9053506000612bad846002613c2b565b612bb89060016136c9565b90505b6001811115612c30576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612bec57612bec613764565b1a60f81b828281518110612c0257612c02613764565b60200101906001600160f81b031916908160001a90535060049490941c93612c2981613c42565b9050612bbb565b5083156112a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161086b565b6000818152600183016020526040812054612cc657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610899565b506000610899565b60008181526001830160205260408120548015612db7576000612cf2600183613c59565b8554909150600090612d0690600190613c59565b9050818114612d6b576000866000018281548110612d2657612d26613764565b9060005260206000200154905080876000018481548110612d4957612d49613764565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d7c57612d7c613c6c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610899565b6000915050610899565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60fb5460ff1615611ab75760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b606482015260840161086b565b80356001600160a01b0381168114612e8b57600080fd5b919050565b60008060408385031215612ea357600080fd5b612eac83612e74565b946020939093013593505050565b6001600160e01b0319811681146108d757600080fd5b600060208284031215612ee257600080fd5b81356112a581612eba565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612f2857612f28612eed565b6040525050565b600082601f830112612f4057600080fd5b81356001600160401b03811115612f5957612f59612eed565b604051612f70601f8301601f191660200182612f03565b818152846020838601011115612f8557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612fb457600080fd5b81356001600160401b03811115612fca57600080fd5b612fd684828501612f2f565b949350505050565b60005b83811015612ff9578181015183820152602001612fe1565b50506000910152565b6000815180845261301a816020860160208601612fde565b601f01601f19169290920160200192915050565b6020815260006112a56020830184613002565b60008083601f84011261305357600080fd5b5081356001600160401b0381111561306a57600080fd5b60208301915083602082850101111561206d57600080fd5b6000806000806060858703121561309857600080fd5b843593506020850135925060408501356001600160401b038111156130bc57600080fd5b6130c887828801613041565b95989497509550505050565b6000602082840312156130e657600080fd5b5035919050565b60008060008060006080868803121561310557600080fd5b61310e86612e74565b9450602086013593506040860135925060608601356001600160401b0381111561313757600080fd5b61314388828901613041565b969995985093965092949392505050565b60006001600160401b0382111561316d5761316d612eed565b5060051b60200190565b600082601f83011261318857600080fd5b8135602061319582613154565b6040516131a28282612f03565b83815260059390931b85018201928281019150868411156131c257600080fd5b8286015b848110156131dd57803583529183019183016131c6565b509695505050505050565b600080600080600060a0868803121561320057600080fd5b61320986612e74565b945061321760208701612e74565b935060408601356001600160401b038082111561323357600080fd5b61323f89838a01613177565b9450606088013591508082111561325557600080fd5b61326189838a01613177565b9350608088013591508082111561327757600080fd5b5061328488828901612f2f565b9150509295509295909350565b600080604083850312156132a457600080fd5b823591506132b460208401612e74565b90509250929050565b600080604083850312156132d057600080fd5b82356001600160401b03808211156132e757600080fd5b818501915085601f8301126132fb57600080fd5b8135602061330882613154565b6040516133158282612f03565b83815260059390931b850182019282810191508984111561333557600080fd5b948201945b8386101561335a5761334b86612e74565b8252948201949082019061333a565b9650508601359250508082111561337057600080fd5b5061337d85828601613177565b9150509250929050565b600081518084526020808501945080840160005b838110156133b75781518752958201959082019060010161339b565b509495945050505050565b6020815260006112a56020830184613387565b6000602082840312156133e757600080fd5b6112a582612e74565b60008083601f84011261340257600080fd5b5081356001600160401b0381111561341957600080fd5b6020830191508360208260051b850101111561206d57600080fd5b6000806000806040858703121561344a57600080fd5b84356001600160401b038082111561346157600080fd5b61346d888389016133f0565b9096509450602087013591508082111561348657600080fd5b506130c8878288016133f0565b600080604083850312156134a657600080fd5b50508035926020909101359150565b80151581146108d757600080fd5b600080604083850312156134d657600080fd5b6134df83612e74565b915060208301356134ef816134b5565b809150509250929050565b6000806040838503121561350d57600080fd5b61351683612e74565b91506132b460208401612e74565b600080600080600060a0868803121561353c57600080fd5b61354586612e74565b945061355360208701612e74565b9350604086013592506060860135915060808601356001600160401b0381111561357c57600080fd5b61328488828901612f2f565b6000806040838503121561359b57600080fd5b6135a483612e74565b915060208301356001600160401b038111156135bf57600080fd5b61337d85828601612f2f565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b60208082526015908201527414da59db985d1d5c99481a185cc8195e1c1a5c9959605a1b604082015260600190565b6bffffffffffffffffffffffff19606097881b81168252601482019690965260348101949094529190941b90921660548201526068810192909252608882015260a80190565b6020808252600e908201526d24b73b30b634b21039b4b3b732b960911b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610899576108996136b3565b600181811c908216806136f057607f821691505b60208210810361371057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161378c5761378c6136b3565b5060010190565b6000602082840312156137a557600080fd5b81356112a5816134b5565b6000602082840312156137c257600080fd5b5051919050565b6000602082840312156137db57600080fd5b81516112a5816134b5565b601f821115610cb957600081815260208120601f850160051c8101602086101561380d5750805b601f850160051c820191505b81811015611ab757828155600101613819565b81516001600160401b0381111561384557613845612eed565b6138598161385384546136dc565b846137e6565b602080601f83116001811461388e57600084156138765750858301515b600019600386901b1c1916600185901b178555611ab7565b600085815260208120601f198616915b828110156138bd5788860151825594840194600190910190840161389e565b50858210156138db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061398d6040830185613387565b828103602084015261399f8185613387565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0386811682528516602082015260a060408201819052600090613a3590830186613387565b8281036060840152613a478186613387565b90508281036080840152613a5b8185613002565b98975050505050505050565b600060208284031215613a7957600080fd5b81516112a581612eba565b600060033d1115613a9d5760046000803e5060005160e01c5b90565b600060443d1015613aae5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613add57505050505090565b8285019150815181811115613af55750505050505090565b843d8701016020828501011115613b0f5750505050505090565b613b1e60208286010187612f03565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ba9816017850160208801612fde565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613bda816028840160208801612fde565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613c2090830184613002565b979650505050505050565b8082028115828204841417610899576108996136b3565b600081613c5157613c516136b3565b506000190190565b81810381811115610899576108996136b3565b634e487b7160e01b600052603160045260246000fdfed980155b32cf66e6af51e0972d64b9d5efe0e6f237dfaa4bdc83f990dd79e9c8b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ae2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a2646970667358221220009b47ea62d4ea043601e902d94bc0164a010aa2388ef35db53bc086f9d3c9e564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102715760003560e01c8063801dfa901161014f578063a22cb465116100c1578063e57a2a501161007a578063e57a2a5014610731578063e985e9c514610746578063ec2e8a751461078f578063f242432a146107a4578063f399e22e146107c4578063fb79a684146107e457600080fd5b8063a22cb46514610687578063b3292ff0146106a7578063b6db75a0146106c7578063ca15c873146106dc578063d547741f146106fc578063ddd8f6871461071c57600080fd5b80639010d07c116101135780639010d07c146105bd5780639142575d146105f557806391d148541461062657806395d89b41146106465780639b56d78814610672578063a217fddf1461067257600080fd5b8063801dfa901461053e57806380f87802146105535780638456cb5914610568578063879dcceb1461057d5780638a94b05f1461059d57600080fd5b80632eb2c2d6116101e85780634e1273f4116101ac5780634e1273f4146104815780635344626a146104ae5780635c975abb146104c3578063701d240a146104db57806379cc6790146104f05780637ecebe001461051057600080fd5b80632eb2c2d6146103f75780632f2ff15d1461041757806336568abe146104375780633f4ba83a14610457578063479e743c1461046c57600080fd5b80630e89341c1161023a5780630e89341c1461034f5780631484bddd1461036f578063248a9ca314610384578063280f4e28146103b45780632dc2c007146103c75780632e82d895146103e257600080fd5b8062fdd58e1461027657806301ffc9a7146102a957806302fe5305146102d957806306fdde03146102fb57806308dc9f421461033c575b600080fd5b34801561028257600080fd5b50610296610291366004612e90565b610804565b6040519081526020015b60405180910390f35b3480156102b557600080fd5b506102c96102c4366004612ed0565b61089f565b60405190151581526020016102a0565b3480156102e557600080fd5b506102f96102f4366004612fa2565b6108aa565b005b34801561030757600080fd5b5060408051808201909152600f81526e556e69717565204964656e7469747960881b60208201525b6040516102a0919061302e565b6102f961034a366004613082565b6108da565b34801561035b57600080fd5b5061032f61036a3660046130d4565b610a04565b34801561037b57600080fd5b50610296600881565b34801561039057600080fd5b5061029661039f3660046130d4565b60009081526065602052604090206001015490565b6102f96103c23660046130ed565b610a98565b3480156103d357600080fd5b506102966602f2e16f29e00081565b3480156103ee57600080fd5b50610296600381565b34801561040357600080fd5b506102f96104123660046131e8565b610c48565b34801561042357600080fd5b506102f9610432366004613291565b610c94565b34801561044357600080fd5b506102f9610452366004613291565b610cbe565b34801561046357600080fd5b506102f9610d3c565b34801561047857600080fd5b50610296600581565b34801561048d57600080fd5b506104a161049c3660046132bd565b610dc8565b6040516102a091906133c2565b3480156104ba57600080fd5b50610296600681565b3480156104cf57600080fd5b5060fb5460ff166102c9565b3480156104e757600080fd5b50610296600181565b3480156104fc57600080fd5b506102f961050b366004612e90565b610ef1565b34801561051c57600080fd5b5061029661052b3660046133d5565b6101916020526000908152604090205481565b34801561054a57600080fd5b50610296600781565b34801561055f57600080fd5b50610296600281565b34801561057457600080fd5b506102f9610f77565b34801561058957600080fd5b506102f9610598366004613434565b610fff565b3480156105a957600080fd5b506102f96105b83660046130ed565b6110f8565b3480156105c957600080fd5b506105dd6105d8366004613493565b61128d565b6040516001600160a01b0390911681526020016102a0565b34801561060157600080fd5b506102c96106103660046130d4565b6101926020526000908152604090205460ff1681565b34801561063257600080fd5b506102c9610641366004613291565b6112ac565b34801561065257600080fd5b5060408051808201909152600381526215525160ea1b602082015261032f565b34801561067e57600080fd5b50610296600081565b34801561069357600080fd5b506102f96106a23660046134c3565b6112d7565b3480156106b357600080fd5b506102f96106c23660046133d5565b6112e2565b3480156106d357600080fd5b506102c961131e565b3480156106e857600080fd5b506102966106f73660046130d4565b61133d565b34801561070857600080fd5b506102f9610717366004613291565b611354565b34801561072857600080fd5b50610296600a81565b34801561073d57600080fd5b50610296600981565b34801561075257600080fd5b506102c96107613660046134fa565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b34801561079b57600080fd5b50610296600481565b3480156107b057600080fd5b506102f96107bf366004613524565b611379565b3480156107d057600080fd5b506102f96107df366004613588565b6113be565b3480156107f057600080fd5b506102f96107ff3660046133d5565b611531565b60006001600160a01b0383166108745760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b600061089982611714565b6108b261131e565b6108ce5760405162461bcd60e51b815260040161086b906135cb565b6108d781611754565b50565b33848484848242106108fe5760405162461bcd60e51b815260040161086b90613616565b6001600160a01b03851660009081526101916020908152604080832054905161093292899289928992309291469101613645565b604051602081830303815290604052805190602001209050600061095582611760565b90506109a9600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b6109c55760405162461bcd60e51b815260040161086b9061368b565b336000818152610191602052604081208054600192906109e69084906136c9565b909155506109f69050338d6117af565b505050505050505050505050565b606060cb8054610a13906136dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3f906136dc565b8015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b50505050509050919050565b8484848484824210610abc5760405162461bcd60e51b815260040161086b90613616565b336000818152610191602090815260408083205481516bffffffffffffffffffffffff19606096871b8116828601528b871b81166034830152604882018b9052606882018a90523090961b9095166088860152609c8501524660bc808601919091528151808603909101815260dc9094019052825192019190912090610b4182611760565b9050610b95600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b610bb15760405162461bcd60e51b815260040161086b9061368b565b33600081815261019160205260408120805460019290610bd29084906136c9565b90915550610be29050338d610804565b15610c2f5760405162461bcd60e51b815260206004820152601a60248201527f6d736753656e64657220616c7265616479206f776e7320554944000000000000604482015260640161086b565b610c398d8d6117af565b50505050505050505050505050565b6001600160a01b038516331480610c645750610c648533610761565b610c805760405162461bcd60e51b815260040161086b90613716565b610c8d85858585856118d1565b5050505050565b600082815260656020526040902060010154610caf81611abf565b610cb98383611ac9565b505050565b6001600160a01b0381163314610d2e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161086b565b610d388282611aeb565b5050565b610d54600080516020613cc3833981519152336112ac565b610dbe5760405162461bcd60e51b815260206004820152603560248201527f455243313135355072657365745061757365723a206d75737420686176652070604482015274617573657220726f6c6520746f20756e706175736560581b606482015260840161086b565b610dc6611b0d565b565b60608151835114610e2d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161086b565b600083516001600160401b03811115610e4857610e48612eed565b604051908082528060200260200182016040528015610e71578160200160208202803683370190505b50905060005b8451811015610ee957610ebc858281518110610e9557610e95613764565b6020026020010151858381518110610eaf57610eaf613764565b6020026020010151610804565b828281518110610ece57610ece613764565b6020908102919091010152610ee28161377a565b9050610e77565b509392505050565b600080516020613c83833981519152610f0981611abf565b610f1583836001611b5f565b6000610f218484610804565b90508015610f715760405162461bcd60e51b815260206004820152601c60248201527f42616c616e6365206166746572206275726e206d757374206265203000000000604482015260640161086b565b50505050565b610f8f600080516020613cc3833981519152336112ac565b610ff75760405162461bcd60e51b815260206004820152603360248201527f455243313135355072657365745061757365723a206d75737420686176652070604482015272617573657220726f6c6520746f20706175736560681b606482015260840161086b565b610dc6611cf8565b61100761131e565b6110235760405162461bcd60e51b815260040161086b906135cb565b8281146110725760405162461bcd60e51b815260206004820181905260248201527f6163636f756e747320616e6420696473206c656e677468206d69736d61746368604482015260640161086b565b60005b83811015610c8d5782828281811061108f5761108f613764565b90506020020160208101906110a49190613793565b61019260008787858181106110bb576110bb613764565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806110f19061377a565b9050611075565b848484848482421061111c5760405162461bcd60e51b815260040161086b90613616565b6001600160a01b03851660009081526101916020908152604080832054905161115092899289928992309291469101613645565b604051602081830303815290604052805190602001209050600061117382611760565b90506111c7600080516020613ce38339815191526106418387878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061179392505050565b6111e35760405162461bcd60e51b815260040161086b9061368b565b6001600160a01b038c1660009081526101916020526040812080548e926001929161120f9084906136c9565b9091555061122190508d8d6001611b5f565b600061122d8e8e610804565b9050801561127d5760405162461bcd60e51b815260206004820152601c60248201527f42616c616e6365206166746572206275726e206d757374206265203000000000604482015260640161086b565b5050505050505050505050505050565b60008281526097602052604081206112a59083611d35565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d38338383611d41565b6112ea61131e565b6113065760405162461bcd60e51b815260040161086b906135cb565b6108d7600080516020613c8383398151915282611e21565b6000611338600080516020613ca3833981519152336112ac565b905090565b600081815260976020526040812061089990611e2b565b60008281526065602052604090206001015461136f81611abf565b610cb98383611aeb565b6001600160a01b03851633148061139557506113958533610761565b6113b15760405162461bcd60e51b815260040161086b90613716565b610c8d8585858585611e35565b600054610100900460ff16158080156113de5750600054600160ff909116105b806113f85750303b1580156113f8575060005460ff166001145b61145b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161086b565b6000805460ff19166001179055801561147e576000805461ff0019166101001790555b6001600160a01b0383166114d45760405162461bcd60e51b815260206004820152601d60248201527f4f776e657220616464726573732063616e6e6f7420626520656d707479000000604482015260640161086b565b6114de8383611f71565b6114e783611fda565b8015610cb9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b61153961131e565b6115555760405162461bcd60e51b815260040161086b906135cb565b6001600160a01b0381166115ee57604051600090339047908381818185875af1925050503d80600081146115a5576040519150601f19603f3d011682016040523d82523d6000602084013e6115aa565b606091505b5050905080610d385760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b6001600160a01b03811663a9059cbb336040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166691906137b0565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906137c9565b6108d75760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b60006001600160e01b03198216636cdb3d1360e11b148061174557506001600160e01b031982166303a24d0760e21b145b8061089957506108998261200a565b60cb610d38828261382c565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b60008060006117a2858561202f565b91509150610ee981612074565b6602f2e16f29e0003410156118065760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206d696e7420726571756972657320302e30303038332045544800604482015260640161086b565b6000818152610192602052604090205460ff1661185e5760405162461bcd60e51b8152602060048201526016602482015275151bdad95b881a59081b9bdd081cdd5c1c1bdc9d195960521b604482015260640161086b565b6118688282610804565b156118b55760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206265666f7265206d696e74206d7573742062652030000000604482015260640161086b565b610d3882826001604051806020016040528060008152506121be565b81518351146119335760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161086b565b6001600160a01b0384166119595760405162461bcd60e51b815260040161086b906138eb565b336119688187878787876122da565b60005b8451811015611a5157600085828151811061198857611988613764565b6020026020010151905060008583815181106119a6576119a6613764565b602090810291909101810151600084815260c9835260408082206001600160a01b038e1683529093529190912054909150818110156119f75760405162461bcd60e51b815260040161086b90613930565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a369084906136c9565b9250508190555050505080611a4a9061377a565b905061196b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611aa192919061397a565b60405180910390a4611ab7818787878787612388565b505050505050565b6108d781336124e3565b611ad3828261253c565b6000828152609760205260409020610cb990826125c2565b611af582826125d7565b6000828152609760205260409020610cb9908261263e565b611b15612653565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611bc15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161086b565b336000611bcd8461269c565b90506000611bda8461269c565b9050611bfa838760008585604051806020016040528060008152506122da565b600085815260c9602090815260408083206001600160a01b038a16845290915290205484811015611c795760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161086b565b600086815260c9602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b611d006126e7565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b423390565b60006112a5838361272d565b816001600160a01b0316836001600160a01b031603611db45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161086b565b6001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d388282611ac9565b6000610899825490565b6001600160a01b038416611e5b5760405162461bcd60e51b815260040161086b906138eb565b336000611e678561269c565b90506000611e748561269c565b9050611e848389898585896122da565b600086815260c9602090815260408083206001600160a01b038c16845290915290205485811015611ec75760405162461bcd60e51b815260040161086b90613930565b600087815260c9602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611f069084906136c9565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f66848a8a8a8a8a612757565b505050505050505050565b600054610100900460ff16611f985760405162461bcd60e51b815260040161086b906139a8565b611fa0612812565b611fa8612812565b611fb0612812565b611fb8612812565b611fc181612839565b611fc9612860565b611fd1612812565b610d3882612893565b600054610100900460ff166120015760405162461bcd60e51b815260040161086b906139a8565b6108d781612928565b60006001600160e01b03198216635a05180f60e01b14806108995750610899826129cb565b60008082516041036120655760208301516040840151606085015160001a61205987828585612a00565b9450945050505061206d565b506000905060025b9250929050565b6000816004811115612088576120886139f3565b036120905750565b60018160048111156120a4576120a46139f3565b036120f15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161086b565b6002816004811115612105576121056139f3565b036121525760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161086b565b6003816004811115612166576121666139f3565b036108d75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161086b565b6001600160a01b03841661221e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161086b565b33600061222a8561269c565b905060006122378561269c565b9050612248836000898585896122da565b600086815260c9602090815260408083206001600160a01b038b1684529091528120805487929061227a9084906136c9565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cef83600089898989612757565b6001600160a01b0385161580156122f957506001600160a01b03841615155b8061231e57506001600160a01b0385161580159061231e57506001600160a01b038416155b61237a5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79206d696e74206f72206275726e207472616e73666572732061726520604482015266185b1b1bddd95960ca1b606482015260840161086b565b611ab7868686868686612ac4565b6001600160a01b0384163b15611ab75760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123cc9089908990889088908890600401613a09565b6020604051808303816000875af1925050508015612407575060408051601f3d908101601f1916820190925261240491810190613a67565b60015b6124b357612413613a84565b806308c379a00361244c5750612427613aa0565b80612432575061244e565b8060405162461bcd60e51b815260040161086b919061302e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161086b565b6001600160e01b0319811663bc197c8160e01b14611cef5760405162461bcd60e51b815260040161086b90613b29565b6124ed82826112ac565b610d38576124fa81612ad2565b612505836020612ae4565b604051602001612516929190613b71565b60408051601f198184030181529082905262461bcd60e51b825261086b9160040161302e565b61254682826112ac565b610d385760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561257e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006112a5836001600160a01b038416612c7f565b6125e182826112ac565b15610d385760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006112a5836001600160a01b038416612cce565b60fb5460ff16610dc65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161086b565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126d6576126d6613764565b602090810291909101015292915050565b60fb5460ff1615610dc65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161086b565b600082600001828154811061274457612744613764565b9060005260206000200154905092915050565b6001600160a01b0384163b15611ab75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061279b9089908990889088908890600401613be6565b6020604051808303816000875af19250505080156127d6575060408051601f3d908101601f191682019092526127d391810190613a67565b60015b6127e257612413613a84565b6001600160e01b0319811663f23a6e6160e01b14611cef5760405162461bcd60e51b815260040161086b90613b29565b600054610100900460ff16610dc65760405162461bcd60e51b815260040161086b906139a8565b600054610100900460ff166108ce5760405162461bcd60e51b815260040161086b906139a8565b600054610100900460ff166128875760405162461bcd60e51b815260040161086b906139a8565b60fb805460ff19169055565b600054610100900460ff166128ba5760405162461bcd60e51b815260040161086b906139a8565b6128d2600080516020613ca383398151915282611e21565b6128ea600080516020613cc383398151915282611e21565b612910600080516020613cc3833981519152600080516020613ca3833981519152612dc1565b6108d7600080516020613ca383398151915280612dc1565b600054610100900460ff1661294f5760405162461bcd60e51b815260040161086b906139a8565b612967600080516020613ce383398151915282611e21565b61298d600080516020613ce3833981519152600080516020613ca3833981519152612dc1565b6129a5600080516020613c8383398151915282611e21565b6108d7600080516020613c83833981519152600080516020613ca3833981519152612dc1565b60006001600160e01b03198216637965db0b60e01b148061089957506301ffc9a760e01b6001600160e01b0319831614610899565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a375750600090506003612abb565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612a8b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612ab457600060019250925050612abb565b9150600090505b94509492505050565b611ab7868686868686612e0c565b60606108996001600160a01b03831660145b60606000612af3836002613c2b565b612afe9060026136c9565b6001600160401b03811115612b1557612b15612eed565b6040519080825280601f01601f191660200182016040528015612b3f576020820181803683370190505b509050600360fc1b81600081518110612b5a57612b5a613764565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b8957612b89613764565b60200101906001600160f81b031916908160001a9053506000612bad846002613c2b565b612bb89060016136c9565b90505b6001811115612c30576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612bec57612bec613764565b1a60f81b828281518110612c0257612c02613764565b60200101906001600160f81b031916908160001a90535060049490941c93612c2981613c42565b9050612bbb565b5083156112a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161086b565b6000818152600183016020526040812054612cc657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610899565b506000610899565b60008181526001830160205260408120548015612db7576000612cf2600183613c59565b8554909150600090612d0690600190613c59565b9050818114612d6b576000866000018281548110612d2657612d26613764565b9060005260206000200154905080876000018481548110612d4957612d49613764565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d7c57612d7c613c6c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610899565b6000915050610899565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60fb5460ff1615611ab75760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b606482015260840161086b565b80356001600160a01b0381168114612e8b57600080fd5b919050565b60008060408385031215612ea357600080fd5b612eac83612e74565b946020939093013593505050565b6001600160e01b0319811681146108d757600080fd5b600060208284031215612ee257600080fd5b81356112a581612eba565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612f2857612f28612eed565b6040525050565b600082601f830112612f4057600080fd5b81356001600160401b03811115612f5957612f59612eed565b604051612f70601f8301601f191660200182612f03565b818152846020838601011115612f8557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612fb457600080fd5b81356001600160401b03811115612fca57600080fd5b612fd684828501612f2f565b949350505050565b60005b83811015612ff9578181015183820152602001612fe1565b50506000910152565b6000815180845261301a816020860160208601612fde565b601f01601f19169290920160200192915050565b6020815260006112a56020830184613002565b60008083601f84011261305357600080fd5b5081356001600160401b0381111561306a57600080fd5b60208301915083602082850101111561206d57600080fd5b6000806000806060858703121561309857600080fd5b843593506020850135925060408501356001600160401b038111156130bc57600080fd5b6130c887828801613041565b95989497509550505050565b6000602082840312156130e657600080fd5b5035919050565b60008060008060006080868803121561310557600080fd5b61310e86612e74565b9450602086013593506040860135925060608601356001600160401b0381111561313757600080fd5b61314388828901613041565b969995985093965092949392505050565b60006001600160401b0382111561316d5761316d612eed565b5060051b60200190565b600082601f83011261318857600080fd5b8135602061319582613154565b6040516131a28282612f03565b83815260059390931b85018201928281019150868411156131c257600080fd5b8286015b848110156131dd57803583529183019183016131c6565b509695505050505050565b600080600080600060a0868803121561320057600080fd5b61320986612e74565b945061321760208701612e74565b935060408601356001600160401b038082111561323357600080fd5b61323f89838a01613177565b9450606088013591508082111561325557600080fd5b61326189838a01613177565b9350608088013591508082111561327757600080fd5b5061328488828901612f2f565b9150509295509295909350565b600080604083850312156132a457600080fd5b823591506132b460208401612e74565b90509250929050565b600080604083850312156132d057600080fd5b82356001600160401b03808211156132e757600080fd5b818501915085601f8301126132fb57600080fd5b8135602061330882613154565b6040516133158282612f03565b83815260059390931b850182019282810191508984111561333557600080fd5b948201945b8386101561335a5761334b86612e74565b8252948201949082019061333a565b9650508601359250508082111561337057600080fd5b5061337d85828601613177565b9150509250929050565b600081518084526020808501945080840160005b838110156133b75781518752958201959082019060010161339b565b509495945050505050565b6020815260006112a56020830184613387565b6000602082840312156133e757600080fd5b6112a582612e74565b60008083601f84011261340257600080fd5b5081356001600160401b0381111561341957600080fd5b6020830191508360208260051b850101111561206d57600080fd5b6000806000806040858703121561344a57600080fd5b84356001600160401b038082111561346157600080fd5b61346d888389016133f0565b9096509450602087013591508082111561348657600080fd5b506130c8878288016133f0565b600080604083850312156134a657600080fd5b50508035926020909101359150565b80151581146108d757600080fd5b600080604083850312156134d657600080fd5b6134df83612e74565b915060208301356134ef816134b5565b809150509250929050565b6000806040838503121561350d57600080fd5b61351683612e74565b91506132b460208401612e74565b600080600080600060a0868803121561353c57600080fd5b61354586612e74565b945061355360208701612e74565b9350604086013592506060860135915060808601356001600160401b0381111561357c57600080fd5b61328488828901612f2f565b6000806040838503121561359b57600080fd5b6135a483612e74565b915060208301356001600160401b038111156135bf57600080fd5b61337d85828601612f2f565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b60208082526015908201527414da59db985d1d5c99481a185cc8195e1c1a5c9959605a1b604082015260600190565b6bffffffffffffffffffffffff19606097881b81168252601482019690965260348101949094529190941b90921660548201526068810192909252608882015260a80190565b6020808252600e908201526d24b73b30b634b21039b4b3b732b960911b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610899576108996136b3565b600181811c908216806136f057607f821691505b60208210810361371057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161378c5761378c6136b3565b5060010190565b6000602082840312156137a557600080fd5b81356112a5816134b5565b6000602082840312156137c257600080fd5b5051919050565b6000602082840312156137db57600080fd5b81516112a5816134b5565b601f821115610cb957600081815260208120601f850160051c8101602086101561380d5750805b601f850160051c820191505b81811015611ab757828155600101613819565b81516001600160401b0381111561384557613845612eed565b6138598161385384546136dc565b846137e6565b602080601f83116001811461388e57600084156138765750858301515b600019600386901b1c1916600185901b178555611ab7565b600085815260208120601f198616915b828110156138bd5788860151825594840194600190910190840161389e565b50858210156138db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061398d6040830185613387565b828103602084015261399f8185613387565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0386811682528516602082015260a060408201819052600090613a3590830186613387565b8281036060840152613a478186613387565b90508281036080840152613a5b8185613002565b98975050505050505050565b600060208284031215613a7957600080fd5b81516112a581612eba565b600060033d1115613a9d5760046000803e5060005160e01c5b90565b600060443d1015613aae5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613add57505050505090565b8285019150815181811115613af55750505050505090565b843d8701016020828501011115613b0f5750505050505090565b613b1e60208286010187612f03565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ba9816017850160208801612fde565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613bda816028840160208801612fde565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613c2090830184613002565b979650505050505050565b8082028115828204841417610899576108996136b3565b600081613c5157613c516136b3565b506000190190565b81810381811115610899576108996136b3565b634e487b7160e01b600052603160045260246000fdfed980155b32cf66e6af51e0972d64b9d5efe0e6f237dfaa4bdc83f990dd79e9c8b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862ae2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70a2646970667358221220009b47ea62d4ea043601e902d94bc0164a010aa2388ef35db53bc086f9d3c9e564736f6c63430008130033",
  "devdoc": {
    "author": "Untangled",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256,bytes)": {
        "params": {
          "account": "The account which currently owns the UID",
          "expiresAt": "The expiration time of the signature",
          "id": "The id representing the KYC type of the UniqueIdentity",
          "signature": "An EIP-191 signature of the corresponding burn params:                  (account, id, expiresAt, address(this), nonces[account], block.chainid)                  from an address with the SIGNER_ROLE."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "account": "The account which currently owns the UID",
          "id": "The id representing the KYC type of the UniqueIdentity"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(uint256,uint256,bytes)": {
        "params": {
          "expiresAt": "The expiration time of the signature",
          "id": "The id representing the KYC type of the UniqueIdentity",
          "signature": "An EIP-191 signature of the corresponding mint params:                  account, id, expiresAt, address(this), nonces[account], block.chainid                  from an address with the SIGNER_ROLE."
        }
      },
      "mintTo(address,uint256,uint256,bytes)": {
        "params": {
          "expiresAt": "The expiration time of the signature",
          "id": "The id representing the KYC type of the UniqueIdentity",
          "recipient": "The recipient address to be minted to.",
          "signature": "An EIP-191 signature of the corresponding mintTo params:                  (account, recipient, id, expiresAt, address(this), nonces[account], block.chainid)                  from an address with the SIGNER_ROLE."
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "nonces": {
        "details": "We include a nonce in every hashed message, and increment the nonce as part of a state-changing operation, so as to prevent replay attacks, i.e. the reuse of a signature."
      }
    },
    "title": "UniqueIdentity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256,uint256,bytes)": {
        "notice": "Burn a UniqueIdentity token of `id` from the `account`"
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn a UniqueIdentity token of `id` from the `account` by using SUPPER_ADMIN wallet"
      },
      "mint(uint256,uint256,bytes)": {
        "notice": "Mint a new UniqueIdentity token to the msgSender"
      },
      "mintTo(address,uint256,uint256,bytes)": {
        "notice": "Mint a new UniqueIdentity token to the `recipient`"
      }
    },
    "notice": "UniqueIdentity is an ERC1155-compliant contract for representing the identity verification status of addresses.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 759,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 762,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4972,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6262,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7572_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1161,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1167,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1169,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_uri",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 2376,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 942,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1047,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10987,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25368,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "nonces",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25372,
        "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
        "label": "supportedUIDTypes",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7572_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7572_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7572_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7571,
            "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7257_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7257_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7252,
            "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7256,
            "contract": "contracts/uid/UniqueIdentity.sol:UniqueIdentity",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}